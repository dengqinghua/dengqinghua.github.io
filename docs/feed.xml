<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.7">Jekyll</generator><link href="https://dengqinghua.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://dengqinghua.github.io/" rel="alternate" type="text/html" /><updated>2022-07-22T14:53:58+08:00</updated><id>https://dengqinghua.github.io/feed.xml</id><title type="html">Dengqinghua.42</title><subtitle>Everything I think
</subtitle><author><name>dengqinghua</name></author><entry><title type="html">MySQL 子查询笔记</title><link href="https://dengqinghua.github.io/mysql-subquery.html" rel="alternate" type="text/html" title="MySQL 子查询笔记" /><published>2022-03-03T00:00:00+08:00</published><updated>2022-03-03T00:00:00+08:00</updated><id>https://dengqinghua.github.io/mysql-subquery</id><content type="html" xml:base="https://dengqinghua.github.io/mysql-subquery.html">&lt;h3 id=&quot;outer-query--subquery&quot;&gt;Outer Query &amp;amp; Subquery&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SELECT * FROM a WHERE c1 = (SELECT c1 FROM b)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;Outer Query: &lt;code class=&quot;highlighter-rouge&quot;&gt;SELECT * FROM a&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;subQuery: &lt;code class=&quot;highlighter-rouge&quot;&gt;(SELECT c1 FROM b)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;scalar-column-row-and-table-subqueries&quot;&gt;scalar, column, row, and table subqueries&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;scalar 单个值&lt;/li&gt;
  &lt;li&gt;column 返回一个列&lt;/li&gt;
  &lt;li&gt;row 返回一行&lt;/li&gt;
  &lt;li&gt;table 返回一个表(多行数据)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这里只能返回单个值 &lt;code class=&quot;highlighter-rouge&quot;&gt;count(*)&lt;/code&gt; 这里只返回一个值&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SELECT (SELECT count(*) FROM advertisement) # OK
SELECT (SELECT code FROM advertisement LIMIT 1) # OK
SELECT (SELECT code FROM advertisement) # NOT OK 包含多行
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;比较&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SELECT * FROM advertisement WHERE code = (SELECT code FROM tag LIMIT 1) # 必须单行
SELECT * FROM advertisement WHERE code IN (SELECT code FROM tag) # 可以多行
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;any-in-some-all&quot;&gt;ANY, IN, SOME, ALL&lt;/h3&gt;
&lt;p&gt;ANY, IN, SOME 都是存在的意思&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SELECT * FROM advertisement WHERE code = ANY (select code from tag) # 这个的 = ANY 跟 IN 是一样的
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;ALL 全部满足条件&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SELECT s1 FROM t1 WHERE s1 &amp;gt; ALL (SELECT s1 FROM t2);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;exists&quot;&gt;EXISTS&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SELECT * FROM t1 WHERE EXISTS (SELECT * FROM t2)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;如果 &lt;code class=&quot;highlighter-rouge&quot;&gt;SELECT * FROM t2&lt;/code&gt; 有值，则为 true&lt;/p&gt;

&lt;h3 id=&quot;derived-table&quot;&gt;Derived Table&lt;/h3&gt;
&lt;p&gt;从几张表中拿出数据，组成一个新表&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;INSERT INTO t1 VALUES (1,'1',1.0);
INSERT INTO t1 VALUES (2,'2',2.0);
SELECT sb1,sb2,sb3
  FROM (SELECT s1 AS sb1, s2 AS sb2, s3*2 AS sb3 FROM t1) AS sb
  WHERE sb1 &amp;gt; 1;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>dengqinghua</name></author><summary type="html">Outer Query &amp;amp; Subquery</summary></entry><entry><title type="html">2021 的总结 &amp;amp; 2022 的 flag</title><link href="https://dengqinghua.github.io/2021-backward-and-forward.html" rel="alternate" type="text/html" title="2021 的总结 &amp; 2022 的 flag" /><published>2022-01-14T00:00:00+08:00</published><updated>2022-01-14T00:00:00+08:00</updated><id>https://dengqinghua.github.io/2021-backward-and-forward</id><content type="html" xml:base="https://dengqinghua.github.io/2021-backward-and-forward.html">&lt;hr data-content=&quot; 2021 &quot; /&gt;

&lt;p&gt;work&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;加入了新的公司，转换了一个行业领域&lt;/li&gt;
  &lt;li&gt;搭建了完整的系统平台，从前后端到运维到 devops，并且可以快速复制该架构到任何系统中&lt;/li&gt;
  &lt;li&gt;关注了其他的技术领域，如 推荐系统，搜索 和 机器学习&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;good&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;录制 9 首曲子&lt;/li&gt;
  &lt;li&gt;录制曲子的时候，更加有耐心了，注重了音乐的细节和音乐性，不再单纯地追求录音的结果&lt;/li&gt;
  &lt;li&gt;硬拉 160KG，卧推 90KG&lt;/li&gt;
  &lt;li&gt;学会了借力引体，ttb，半挺，挺举等基本姿势&lt;/li&gt;
  &lt;li&gt;减少了很多无效地社交，愿意很多时间陪在家人身边&lt;/li&gt;
  &lt;li&gt;还活着&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;bad&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;排斥很多事情，变得更加封闭和自我&lt;/li&gt;
  &lt;li&gt;情感诉求减少，更多地追求短暂的欢愉&lt;/li&gt;
  &lt;li&gt;目标感变弱，思维变得太多元且混乱&lt;/li&gt;
&lt;/ul&gt;

&lt;hr data-content=&quot; 2022 &quot; /&gt;

&lt;p&gt;flag&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;完成双力臂&lt;/li&gt;
  &lt;li&gt;写一首1分钟以上的指弹曲&lt;/li&gt;
  &lt;li&gt;改编一首1分钟以上的流行歌曲&lt;/li&gt;
  &lt;li&gt;阅读完可以获取到的 博尔赫斯 的书籍&lt;/li&gt;
&lt;/ul&gt;</content><author><name>dengqinghua</name></author><summary type="html"></summary></entry><entry><title type="html">机器学习</title><link href="https://dengqinghua.github.io/machine-learning-learning.html" rel="alternate" type="text/html" title="机器学习" /><published>2022-01-04T00:00:00+08:00</published><updated>2022-01-04T00:00:00+08:00</updated><id>https://dengqinghua.github.io/machine-learning-learning</id><content type="html" xml:base="https://dengqinghua.github.io/machine-learning-learning.html">&lt;h2 id=&quot;机器学习的思考故事&quot;&gt;机器学习的思考故事&lt;/h2&gt;

&lt;h2 id=&quot;吴恩达&quot;&gt;吴恩达&lt;/h2&gt;
&lt;h3 id=&quot;machine-learning&quot;&gt;Machine Learning&lt;/h3&gt;
&lt;h4 id=&quot;week1&quot;&gt;Week1&lt;/h4&gt;
&lt;blockquote&gt;
  &lt;ol&gt;
    &lt;li&gt;学习算法，模拟人类大脑的学习方式&lt;/li&gt;
    &lt;li&gt;Machine Learning defined by Arthur Samuel(1959), ability to learn without explictly programmed&lt;/li&gt;
    &lt;li&gt;E, T, P&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;Supervised Learning
    &lt;ul&gt;
      &lt;li&gt;给出现有的结果集(Right Answers for each example)，去推导因果关系&lt;/li&gt;
      &lt;li&gt;Regression Problem, 回归问题, 预测的是 连续的数据&lt;/li&gt;
      &lt;li&gt;Classification Problem, 分类问题，预测的是 有限的取值&lt;/li&gt;
      &lt;li&gt;Infinite number of features, 无限的特征和属性&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;UnSupervised Learning
    &lt;ul&gt;
      &lt;li&gt;No labels&lt;/li&gt;
      &lt;li&gt;clusters，聚类&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;工具: octave&lt;/li&gt;
  &lt;li&gt;鸡尾酒会效应(cocktail-party-effect), 人们可以在嘈杂的环境进行交谈，忽略掉背景噪声而听到对方的谈话。属于 图形-背景现象 的听觉版本&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;线性代数算法&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Training Set&lt;/li&gt;
  &lt;li&gt;m: numbers of training examples&lt;/li&gt;
  &lt;li&gt;x’s = input / features&lt;/li&gt;
  &lt;li&gt;y’s = output / target variable&lt;/li&gt;
  &lt;li&gt;&lt;script type=&quot;math/tex&quot;&gt;(x, y)&lt;/script&gt; training example&lt;/li&gt;
  &lt;li&gt;&lt;script type=&quot;math/tex&quot;&gt;(x^{(i)}, y^{(i)})&lt;/script&gt; case of i, i 为 index&lt;/li&gt;
  &lt;li&gt;h hypothesis, 假设 &lt;script type=&quot;math/tex&quot;&gt;y = h(x)&lt;/script&gt;&lt;/li&gt;
  &lt;li&gt;linare regression with one variable &lt;script type=&quot;math/tex&quot;&gt;h_\theta = \theta_0 + \theta_1 x&lt;/script&gt;&lt;/li&gt;
  &lt;li&gt;univariate linear regression 单变量线性回归&lt;/li&gt;
  &lt;li&gt;目标, 找到最小值: &lt;script type=&quot;math/tex&quot;&gt;minimize_{\theta_0\theta_1} {1 \over2m} \sum_{i=1}^m(h_\theta(x^{(i)}) - y^{(i)})^2&lt;/script&gt;&lt;/li&gt;
  &lt;li&gt;Cost Function 定义为 &lt;script type=&quot;math/tex&quot;&gt;J(\theta_0, \theta_1) = {1 \over2m} \sum_{i=1}^m(\hat y_i - y^{(i)})^2 = {1 \over2m} \sum_{i=1}^m(h_\theta(x^{(i)}) - y^{(i)})^2&lt;/script&gt;&lt;/li&gt;
  &lt;li&gt;目标: &lt;script type=&quot;math/tex&quot;&gt;minimize_{\theta_0\theta_1} J(\theta_0, \theta_1)&lt;/script&gt; 为平方差代价函数&lt;/li&gt;
  &lt;li&gt;目标: &lt;script type=&quot;math/tex&quot;&gt;J(\theta_0, \theta_1)&lt;/script&gt; 导数为 0 的那个 &lt;script type=&quot;math/tex&quot;&gt;\theta_1&lt;/script&gt; 的值&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Hypothesis(假设)&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Paramemters(参数)&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;CostFunction&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Goal&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;script type=&quot;math/tex&quot;&gt;h_\theta = \theta_0 + \theta_1 x&lt;/script&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;script type=&quot;math/tex&quot;&gt;\theta_0, \theta_1&lt;/script&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;script type=&quot;math/tex&quot;&gt;J(\theta_0, \theta_1) = {1 \over2m} \sum_{i=1}^m(h_\theta(x^{(i)}) - y^{(i)})^2&lt;/script&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;script type=&quot;math/tex&quot;&gt;minimize_{\theta_0\theta_1} J(\theta_0, \theta_1)&lt;/script&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;ul&gt;
  &lt;li&gt;contour plot, 画图的软件, 见 &lt;a href=&quot;https://www.itl.nist.gov/div898/handbook/eda/section3/contour.htm&quot;&gt;这里&lt;/a&gt; 和 &lt;a href=&quot;https://plotly.com/javascript/contour-plots/&quot;&gt;JS 版本&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;梯度下降算法 Gradient Descent&lt;/p&gt;

&lt;p&gt;每次寻找对应的 &lt;script type=&quot;math/tex&quot;&gt;\theta_0, \theta_1&lt;/script&gt;，使得下面的值越来越小&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;J(\theta_0, \theta_1)&lt;/script&gt;

&lt;p&gt;步骤:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\text{repeat untile convergence} \\
\\ \theta_j := \theta_j - \alpha \frac{\partial}{\partial \theta_j} {J(\theta_0, \theta_1)},\text{ for (j=0 and j=1)}&lt;/script&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;script type=&quot;math/tex&quot;&gt;\alpha&lt;/script&gt; 为 learning rate，越大代表下降越快。&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;需要同时更新 &lt;script type=&quot;math/tex&quot;&gt;\theta_0, \theta_1&lt;/script&gt; 的值&lt;/p&gt;

    &lt;table&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;temp0 := \theta_0 - \alpha \frac{\partial}{\partial \theta_0} {J(\theta_0, \theta_1)}&lt;/script&gt;&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;temp1 := \theta_1 - \alpha \frac{\partial}{\partial \theta_1} {J(\theta_0, \theta_1)}&lt;/script&gt;&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;\theta_0 := temp0&lt;/script&gt;&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;\theta_1 := temp1&lt;/script&gt;&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/gradient-descent.png&quot; alt=&quot;gradient-descent&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;通过斜率的变化，来动态调整参数的值，使得达到收敛(converge)的点, 也就是图中的最低点的位置&lt;/li&gt;
  &lt;li&gt;偏离 diverge&lt;/li&gt;
  &lt;li&gt;&lt;script type=&quot;math/tex&quot;&gt;\alpha&lt;/script&gt; 很小，则找到具体的点会比较慢, 过大，则容易错过最优点&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;根据导数的值的大小，动态地调整 &lt;script type=&quot;math/tex&quot;&gt;\alpha&lt;/script&gt; 的值&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;convex 凸函数(bowl shaped function)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;第一个机器学习的算法&lt;/p&gt;

&lt;blockquote&gt;

  &lt;p&gt;在这之前，需要复习几个&lt;a href=&quot;https://baike.baidu.com/item/%E6%B1%82%E5%AF%BC/1063861&quot;&gt;求导法则&lt;/a&gt;。有助于理解下面的公式计算&lt;/p&gt;

  &lt;p&gt;假设 &lt;script type=&quot;math/tex&quot;&gt;u(x),v(x)&lt;/script&gt; 均可导, 则&lt;/p&gt;

  &lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{align}
  (u(x) \pm v(x))^{'} &amp;= u^{'}(x) \pm v^{'}(x) \\
  (u(x)v(x))^{'} &amp;= u^{'}(x)v(x) + u(x)v^{'}(x) \\
  (u(v(x)))^{'} &amp;= u^{'}(x)v(x) \\
  ({u(x) \over v(x)})^{'} &amp;= \frac{u^{'}(x)v(x) - u(x)v^{'}(x)}{v^2(x)} \\
  (cu(x))^{'} &amp;= cu^{'}(x) \text{, c 为常数} \\
  \end{align} %]]&gt;&lt;/script&gt;
&lt;/blockquote&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Hypothesis(假设)&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Paramemters(参数)&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;CostFunction&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Goal&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;script type=&quot;math/tex&quot;&gt;h_\theta = \theta_0 + \theta_1 x&lt;/script&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;script type=&quot;math/tex&quot;&gt;\theta_0, \theta_1&lt;/script&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;script type=&quot;math/tex&quot;&gt;J(\theta_0, \theta_1) = {1 \over2m} \sum_{i=1}^m(h_\theta(x^{(i)}) - y^{(i)})^2&lt;/script&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;script type=&quot;math/tex&quot;&gt;minimize_{\theta_0\theta_1} J(\theta_0, \theta_1)&lt;/script&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;对 CostFunction 求导数&lt;/p&gt;

    &lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{align}
 \frac{\partial}{\partial \theta_j} J(\theta) &amp;= {1 \over m} \sum_{i=1}^m((h_\theta(x^{(i)}) - y^{(i)})^{'}(h_\theta(x^{(i)}) - y^{(i)})) \\
        &amp;= {1 \over m} \sum_{i=1}^m(h^{'}_\theta(x^{(i)})(h_\theta(x^{(i)}) - y^{(i)})) \\
        &amp;= {1 \over m} \sum_{i=1}^m(\theta_0 + \theta_1 x^{(i)})^{'}(h_\theta(x^{(i)}) - y^{(i)})) \\
 \end{align} %]]&gt;&lt;/script&gt;

    &lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{align}
 \frac{\partial}{\partial \theta_0} J(\theta) &amp;= {1 \over m} \sum_{i=1}^m(\theta_0 + \theta_1 x^{(i)})^{'}(h_\theta(x^{(i)}) - y^{(i)})) \\
        &amp;= {1 \over m} \sum_{i=1}^m(h_\theta(x^{(i)}) - y^{(i)})) \\
        &amp;= {1 \over m} \sum_{i=1}^m(\theta_0 + \theta_1 x^{(i)} - y^{(i)}))
 \end{align} %]]&gt;&lt;/script&gt;

    &lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{align}
 \frac{\partial}{\partial \theta_1} J(\theta) &amp;= {1 \over m} \sum_{i=1}^m(\theta_0 + \theta_1 x^{(i)})^{'}(h_\theta(x^{(i)}) - y^{(i)})) \\
        &amp;= {1 \over m} \sum_{i=1}^m(x^{(i)})(\theta_0 + \theta_1 x^{(i)} - y^{(i)}))
 \end{align} %]]&gt;&lt;/script&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;将 导数 部分代入到 梯度下降算法中&lt;/p&gt;

    &lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{align}
 \text{repeat untile convergence...} &amp;\{ \\
 temp0 &amp;:= \theta_0 - {\alpha \over m} \sum_{i=1}^m(\theta_0 + \theta_1 x^{(i)} - y^{(i)})) \\
 temp1 &amp;:= \theta_1 - {\alpha \over m} \sum_{i=1}^m(x^{(i)})(\theta_0 + \theta_1 x^{(i)} - y^{(i)})) \\
 \theta_0 &amp;:= temp0 \\
 \theta_1 &amp;:= temp1 \\
 &amp;\}
 \end{align} \\ %]]&gt;&lt;/script&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;metrics 和 vectors&lt;/p&gt;

&lt;p&gt;下面为一个 2 x 3 的矩阵&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
A = \begin{bmatrix}
1 &amp; 2 &amp; 3 \\
1 &amp; 3 &amp; 5 \\
\end{bmatrix} %]]&gt;&lt;/script&gt;

&lt;p&gt;&lt;script type=&quot;math/tex&quot;&gt;A_{ij}&lt;/script&gt; 为 第 i 行，第 j 列的值，注意 i，j 都是从 1 开始的&lt;/p&gt;

&lt;p&gt;vector: n x 1 的矩阵, 如下为 3维 vector&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;A = \begin{bmatrix}
1 \\
2 \\
3 \\
\end{bmatrix}&lt;/script&gt;

&lt;ul&gt;
  &lt;li&gt;矩阵的乘法: &lt;script type=&quot;math/tex&quot;&gt;A_{m,n} \times x_{n,1} = y_{m,1}\\
A_{m,n} \times B_{n,o} = C_{m,o}&lt;/script&gt;&lt;/li&gt;
  &lt;li&gt;1-indexed vs 0-indexed vector&lt;/li&gt;
  &lt;li&gt;大写字母表示矩阵，小写字母表示向量&lt;/li&gt;
  &lt;li&gt;矩阵运算见&lt;a href=&quot;https://baike.baidu.hk/item/%E7%9F%A9%E9%99%A3/18069&quot;&gt;这里&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;scalar 标量，raw number&lt;/li&gt;
  &lt;li&gt;使用 矩阵运算，而不是 for 运算，能够更加简洁，高效地计算。
  &lt;img src=&quot;assets/images/for-matrix-example.png&quot; alt=&quot;for-matrix-example&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;不满足交换律: &lt;script type=&quot;math/tex&quot;&gt;A \times B \neq B \times A&lt;/script&gt; (not commutative)&lt;/li&gt;
  &lt;li&gt;满足结合律: &lt;script type=&quot;math/tex&quot;&gt;(A \times B) \times C  = A \times (B \times C)&lt;/script&gt; (associative)&lt;/li&gt;
  &lt;li&gt;单位矩阵，Diagonal or Identity Matrix：&lt;script type=&quot;math/tex&quot;&gt;I_{n \times n}&lt;/script&gt;&lt;/li&gt;
  &lt;li&gt;单位矩阵满足：&lt;script type=&quot;math/tex&quot;&gt;A_{m,n} \times I_{n,n} = I_{m,m} \times A_{m,n} = A_{m,n}&lt;/script&gt;&lt;/li&gt;
  &lt;li&gt;逆矩阵 matrix inverse。&lt;script type=&quot;math/tex&quot;&gt;AA^{-1} = A^{-1}A = I&lt;/script&gt; 则 &lt;script type=&quot;math/tex&quot;&gt;A^{-1}&lt;/script&gt; 为 A 的 逆矩阵 (A为 mxm 矩阵，也就是 square matrix, 方阵)&lt;/li&gt;
  &lt;li&gt;奇异矩阵 sigular matrix，没有逆矩阵的矩阵&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;转置矩阵 transpose matrix&lt;/p&gt;

    &lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
A = \begin{bmatrix}
1 &amp; 2 &amp; 3 \\
1 &amp; 3 &amp; 5 \\
\end{bmatrix},

A^T = \begin{bmatrix}
1 &amp; 1 \\
2 &amp; 3 \\
3 &amp; 5 \\
\end{bmatrix} %]]&gt;&lt;/script&gt;
  &lt;/li&gt;
  &lt;li&gt;octave 中矩阵的操作可参考&lt;a href=&quot;http://www.philender.com/courses/multivariate/notes/matoctave.html&quot;&gt;这里&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;week2&quot;&gt;Week2&lt;/h4&gt;
&lt;p&gt;使用 vector 和 matrix 来表示 multi feature hypothesis，多维度的假设函数&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{align}h(\theta) &amp;= \theta_0 + \theta_1 x_1 + \theta_2 x_2 + \cdots + \theta_n x_n \\
&amp;= \theta_0 x_0 + \theta_1 x_1 + \theta_2 x_2 + \cdots + \theta_n x_n \text{ for } x_0 = 1 \\
&amp;= \begin{bmatrix}
\theta_0 &amp; \theta_1 &amp; \cdots &amp; \theta_n
\end{bmatrix}
\times \begin{bmatrix}
x_0 \\
x_1 \\
\vdots \\
x_n
\end{bmatrix} \\
&amp;= \theta^T \times x
\end{align} %]]&gt;&lt;/script&gt;

&lt;p&gt;其中 &lt;script type=&quot;math/tex&quot;&gt;\theta&lt;/script&gt; 和 &lt;script type=&quot;math/tex&quot;&gt;x&lt;/script&gt; 均为 vector&lt;/p&gt;

&lt;p&gt;使用矢量/矩阵来实现多特征梯度下降 (multi feature gradient descent)&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Hypothesis(假设)&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Paramemters(参数)&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;CostFunction&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Goal&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;script type=&quot;math/tex&quot;&gt;% &lt;![CDATA[
\begin{align}y^{(i)} &amp;= \theta_0 x_0^{(i)} + \theta_1 x_1^{(i)} + \cdots + \theta_n x_n^{(i)} \\ &amp;= (x^{(i)})^{T} \times \theta \\ Y &amp;= X \times \theta \end{align} %]]&gt;&lt;/script&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;script type=&quot;math/tex&quot;&gt;\theta = \begin{bmatrix} \theta_0 \\ \theta_1 \\ \cdots \\ \theta_n \end{bmatrix}&lt;/script&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;script type=&quot;math/tex&quot;&gt;J(\theta) = {1 \over2m} \sum_{i=1}^m(h_\theta(x^{(i)}) - y^{(i)})^2&lt;/script&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;script type=&quot;math/tex&quot;&gt;minimize_{\theta} J(\theta_0, \theta_1, \cdots, \theta_n)&lt;/script&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Gradient Descent&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{align}
\text{repeat } &amp;\{ \\
\theta_j &amp;:= \theta_j - \alpha \frac{\partial}{\partial \theta_j} {J(\theta)},\text{ for } j=0, 1, \cdots, n \\
         &amp;:= \theta_j - \alpha \sum_{i=1}^m(x^{(i)}_{j})(h_\theta - y^{(i)})) \\
\}
\end{align} %]]&gt;&lt;/script&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;feature scaling, 将特征值进行缩放，使得图形能够更快地收敛&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;assets/images/feature-scale.png&quot; alt=&quot;feature-scale&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;使得所有的特征的值接近 &lt;script type=&quot;math/tex&quot;&gt;-1 \leq x \leq 1&lt;/script&gt; 的区间，建议是差别不超过三倍&lt;/li&gt;
  &lt;li&gt;Mean Normalization, 归一化 &lt;script type=&quot;math/tex&quot;&gt;x = \frac{ x - \mu }{s}&lt;/script&gt;, 其中 &lt;script type=&quot;math/tex&quot;&gt;\mu&lt;/script&gt; 为特征 x 的均值, s 为(最大值-最小值) 或者是标准差&lt;/li&gt;
  &lt;li&gt;特征缩放不需要非常准备&lt;/li&gt;
  &lt;li&gt;选择 &lt;script type=&quot;math/tex&quot;&gt;\alpha&lt;/script&gt; (Learning rate) 的技巧。变小的幅度小于 &lt;script type=&quot;math/tex&quot;&gt;10^{-3}&lt;/script&gt; 便可停止了&lt;/li&gt;
  &lt;li&gt;Polynomial Regression 多项式回归, 如 &lt;script type=&quot;math/tex&quot;&gt;h_\theta = \theta_0 x_0 + \theta_1 x_1^2 + \cdots + \theta_n x_n^n&lt;/script&gt;&lt;/li&gt;
  &lt;li&gt;Polynomial Regression 的参数的 scaling 很重要，因为数值会随着 &lt;script type=&quot;math/tex&quot;&gt;x^n&lt;/script&gt; 的 n 指数型增长&lt;/li&gt;
  &lt;li&gt;模型变量的选择：可以是原始变量的组合。&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Normal Equation, 一次性求解出所有的 &lt;script type=&quot;math/tex&quot;&gt;\theta&lt;/script&gt;，类似于解矩阵方程的思路，下面是结果。参考 &lt;a href=&quot;https://blog.csdn.net/artprog/article/details/51172025&quot;&gt;机器学习笔记03：Normal equation与梯度下降的比较&lt;/a&gt; 其中 m 为样本数，n 为特征数 和 &lt;a href=&quot;https://stanford.edu/~rezab/classes/cme323/S15/notes/lec11.pdf&quot;&gt;复杂度分析&lt;/a&gt;&lt;/p&gt;

    &lt;table&gt;
      &lt;thead&gt;
        &lt;tr&gt;
          &lt;th style=&quot;text-align: center&quot;&gt;Hypothesis(假设)&lt;/th&gt;
          &lt;th style=&quot;text-align: center&quot;&gt;features &lt;script type=&quot;math/tex&quot;&gt;X_{(m, n+1)}&lt;/script&gt;&lt;/th&gt;
          &lt;th style=&quot;text-align: center&quot;&gt;Paramemters &lt;script type=&quot;math/tex&quot;&gt;\theta&lt;/script&gt;&lt;/th&gt;
          &lt;th style=&quot;text-align: center&quot;&gt;Normal Equation Answer&lt;/th&gt;
        &lt;/tr&gt;
      &lt;/thead&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;&lt;script type=&quot;math/tex&quot;&gt;% &lt;![CDATA[
\begin{align}y^{(i)} &amp;= \theta_0 x_0^{(i)} + \theta_1 x_1^{(i)} + \cdots + \theta_n x_n^{(i)} \\ &amp;= (x^{(i)})^{T} \times \theta \\ Y &amp;= X \times \theta \end{align} %]]&gt;&lt;/script&gt;&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;&lt;script type=&quot;math/tex&quot;&gt;X = \begin{bmatrix} (x^{(1)})^{T} \\ (x^{(2)})^{T} \\ \cdots \\  (x^{(m)})^{T} \\ \end{bmatrix}&lt;/script&gt;&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;&lt;script type=&quot;math/tex&quot;&gt;\theta = \begin{bmatrix} \theta_0 \\ \theta_1 \\ \cdots \\ \theta_n \end{bmatrix}&lt;/script&gt;&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;&lt;script type=&quot;math/tex&quot;&gt;\theta = (X^TX)^{(-1)}X^TY&lt;/script&gt;&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/li&gt;
  &lt;li&gt;Normal Equation 不需要做 feature scaling，但是在 n 比较大(&amp;gt;10000)的时候比较慢，计算 &lt;script type=&quot;math/tex&quot;&gt;(X^TX)^{(-1)}&lt;/script&gt; 的复杂度为 &lt;script type=&quot;math/tex&quot;&gt;O(n^3)&lt;/script&gt;&lt;/li&gt;
  &lt;li&gt;什么时候矩阵是奇异矩阵，见&lt;a href=&quot;https://byjus.com/maths/singular-matrix/#:~:text=What%20is%20Singular%20Matrix%3F,if%20its%20determinant%20is%200.&quot;&gt;这里&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;octave-tutorial&quot;&gt;octave tutorial&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;a = 1:0.1:2 % 从 1 到 2 以 0.1 为步长
zeros(2, 3) % 2行3列的全是0的矩阵
ones(2, 3) % 2行3列的全是1的矩阵
rand(2, 3) % 2行3列的【0到1之间的】随机数的矩阵
randn(1, 3) % 平均值为0，方差为1的高斯分布的随机矩阵
w = -6 + sqrt(10) * (randn(1, 10000)); hist(w) % 画出直方图(histogram)
eye(10) % 单位矩阵，eye 代表的是 I 的意思
pwd % 当前的路劲 类似还可以用 cd, ls 等
who % 查看当前的作用域 whos
save % 保存矩阵到对应的文件 save new.dat v
C = [3 4;2 2] % 可以省去逗号
1./C % =[1/3 1/4; 1/2 1/2]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;plot&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;% 还可以设置坐标名称，线名称，颜色等等
t = [0:0.01:0.98]
y1 = sin(2 * pi * t)
plot(t, y1)
hold on % 画第二个图
y2 = cos(2 * pi * t)
plot(t, y2)
xlabel(&quot;横坐标&quot;)
ylabel(&quot;纵坐标&quot;)
legend(&quot;线的定义&quot;)
title(&quot;图片标题&quot;)
print -dpng % 保存文件
close % 关闭

% 定义图一和图二
figure(1); plot(t, y1)
figure(2); plot(t, y2)

% 将图分隔展示
subplot(1,2,1);plot(t, y1)
subplot(1,2,2);plot(t, y2)

% 修改中轴线
axis
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;vectorization&lt;/p&gt;

&lt;p&gt;将数值运算，变成矩阵运算&lt;/p&gt;

&lt;h4 id=&quot;week3&quot;&gt;Week3&lt;/h4&gt;
&lt;p&gt;分类 classification&lt;/p&gt;

&lt;h2 id=&quot;reference&quot;&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://aistudio.baidu.com/aistudio/education/group/info/1138&quot;&gt;机器学习的思考故事&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://aistudio.baidu.com/aistudio/course/introduce/1297&quot;&gt;零基础实践机器学习&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.coursera.org/learn/machine-learning/home/welcome&quot;&gt;吴恩达在 coursera 的机器学习课程&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>dengqinghua</name></author><summary type="html">机器学习的思考故事</summary></entry><entry><title type="html">推荐系统 101</title><link href="https://dengqinghua.github.io/recommend-sys-with-es.html" rel="alternate" type="text/html" title="推荐系统 101" /><published>2021-12-31T00:00:00+08:00</published><updated>2021-12-31T00:00:00+08:00</updated><id>https://dengqinghua.github.io/recommend-sys-with-es</id><content type="html" xml:base="https://dengqinghua.github.io/recommend-sys-with-es.html">&lt;p&gt;从&lt;a href=&quot;./recommend-sys.html&quot;&gt;前面&lt;/a&gt;一篇文章，我们可以了解到一些基本的概念，非常重要的几个点为&lt;/p&gt;

&lt;h2 id=&quot;概念回顾&quot;&gt;概念回顾&lt;/h2&gt;
&lt;h3 id=&quot;推荐过程&quot;&gt;推荐过程&lt;/h3&gt;

&lt;div class=&quot;mermaid&quot;&gt;
graph LR;
  input([原始数据 &lt;br /&gt; 亿/千万])
  callback(召回 &lt;br /&gt;万/千);
  sort(排序 &lt;br /&gt;千/百);
  filter(调整 &lt;br /&gt;百/十);
  output([结果 &lt;br /&gt; 十])
  input--&amp;gt;callback--&amp;gt;sort--&amp;gt;filter--&amp;gt;output
&lt;/div&gt;

&lt;h3 id=&quot;召回的方式&quot;&gt;召回的方式&lt;/h3&gt;

&lt;p&gt;这里的 i 为 item，可以理解为音频，u 为 user，也就是用户，2 为 to&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;路劲&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;解释&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;例子&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;方法&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;i2i&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;你看了itemA,推荐给你itemB&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;头条的相似文章推荐&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;item相似度, 协同过滤 和 关联规则(比如人工标注)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;u2i&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;用户的直接行为&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;点击过的内容但是未购买的商品, 很容易产生购买行为&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;用户行为数据&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;u2i2i&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;将 u2i 得到的结果, 推荐给新的用户&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;N/A&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;u2u2i&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;用户聚类，获得相似的用户，再根据用户的推荐给当前用户&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;相同年龄/性别的用户, 相同点击行为的用户推荐相似的内容&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;用户聚类, 用户行为，来进行 u2u 部分&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;u2tag2i&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;先算出用户的tag, 在匹配 tag 和 item 的关系&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;豆瓣, B站的 tag, tag效果比较好, 内容不会扩展&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;u2***2i&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;基于图的算法&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;版本1-基于协同算法的-member-media-相似度计算&quot;&gt;版本1: 基于协同算法的 member-media 相似度计算&lt;/h2&gt;
&lt;h3 id=&quot;member-和-media-的矩阵计算&quot;&gt;member 和 media 的矩阵计算&lt;/h3&gt;
&lt;p&gt;在我们最初的版本, 我们计算的是每一个 member 和 每一个 media 的相似度。&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;用户/item的评分&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;哈利波特&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;流水白噪声&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;小提琴音乐&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;用户A&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0.8&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0.9&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0.12&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;用户B&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0.1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0.19&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0.5&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;具体的计算方式为&lt;/p&gt;

&lt;div class=&quot;mermaid&quot;&gt;
graph LR;
  vector1(计算 media 的矢量 v1)
  vector2(计算 member 的矢量 v2);
  multiply(计算 v1 和 v2 的余弦相似度);
  record([记录 member 和 media 的分数])
  vector1--&amp;gt;vector2--&amp;gt;multiply--&amp;gt;record
&lt;/div&gt;

&lt;div class=&quot;mermaid&quot;&gt;
graph LR;
  mv(media 的矢量 v1)
  mv1(media标签: 减压/助眠);
  mv2(老师: 黄华/小花);
  mv3(类型: 故事/白噪声)
  mv4(isBetterSleep = 1&lt;br /&gt;isRelax = 0 &lt;br /&gt; isMasterHH = 1 &lt;br /&gt;isStory = 1)
  mv--&amp;gt;mv1 &amp;amp; mv2 &amp;amp; mv3 --&amp;gt;mv4
&lt;/div&gt;

&lt;p&gt;可以得到 media 的矩阵如下:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
Matrix(media) = \begin{pmatrix} isRelax &amp; isBetterSleep &amp; isMasterHH &amp; isMasterXH &amp; isStory &amp; isNoice \end{pmatrix} %]]&gt;&lt;/script&gt;

&lt;p&gt;同理，如果某个用户听过某个 media，则 media 的所有的矩阵属性，则会添加到用户的矩阵中&lt;/p&gt;

&lt;div class=&quot;mermaid&quot;&gt;
graph LR;
  mv(member 的矢量)
  mv1(&quot;用户试听了【黄华老师】的【故事】&quot;);
  mv2(isMasterHH = 1 &lt;br /&gt; isStroy = 1);
  mv--&amp;gt;mv1 --&amp;gt; mv2
&lt;/div&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
Matrix(member) = \begin{pmatrix} isRelax &amp; isBetterSleep &amp; isMasterHH &amp; isMasterXH &amp; isStory &amp; isNoice \end{pmatrix} %]]&gt;&lt;/script&gt;

&lt;p&gt;我们通过余弦相似度可以计算:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;CosineSimlarity= \frac{Matrix(member) · Matrix(media)}{\Vert Matrix(member)\Vert \mathrm x \Vert Matrix(media)\Vert}&lt;/script&gt;

&lt;p&gt;可以得到一个 (0 到 1) 的一个值&lt;/p&gt;

&lt;h3 id=&quot;协同过滤的优缺点&quot;&gt;协同过滤的优缺点&lt;/h3&gt;
&lt;p&gt;优点&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;解解释性强, 计算出矩阵，可以解释为什么会给 A用户 推送 B视频&lt;/li&gt;
  &lt;li&gt;本身计算方式简单，效果比较好&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;缺点&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;计算量大，需要全量计算用户和每个音频之间的关系, 而且很多计算是不必要的&lt;/li&gt;
  &lt;li&gt;由于用户的体量 远大于 音频的体量，所以不考虑计算 用户和用户 之间的相似度，来进行用户的协同推荐&lt;/li&gt;
  &lt;li&gt;用户之间的标签无法使用，无法进行群体数据下的推荐&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;版本2-基于-es-的算法推荐&quot;&gt;版本2: 基于 ES 的算法推荐&lt;/h2&gt;
&lt;h3 id=&quot;一个购物车推荐的例子&quot;&gt;一个购物车推荐的例子&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;购物车1&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;购物车2&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;购物车3&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;购物车4&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;鸡蛋&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;鸡蛋&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;鸡蛋&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;鸡蛋&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;苹果&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;苹果&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;香蕉&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;牛奶&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;牛奶&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;牛肉&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;牛肉&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;鸡胸肉&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;鸡胸肉&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;菠菜&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;如果说加入用户买了 牛肉，应该推荐什么呢? 我们从购物车可以看到 购物车3 和 购物车4 都包含了牛肉。买了牛肉的人他们也买了
下面的东西:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;食物&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;总数&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;鸡蛋&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;鸡胸肉&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;牛奶&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;所以，我们应该推荐 【鸡蛋】 和 【鸡胸肉】，但是实际上，所有的人都买了【鸡蛋】&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;上述的方式，只考虑了总数，容易产生一种偏差，即：推荐的东西永远都是热门的，而不是真正的用户最喜欢的&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;用 venn 图来表示&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;img src=&quot;assets/images/beef_egg.png&quot; alt=&quot;beef_and_egg&quot; /&gt;&lt;/td&gt;
      &lt;td&gt;&lt;img src=&quot;assets/images/beef_and_chest.png&quot; alt=&quot;beef_and_egg&quot; /&gt;&lt;/td&gt;
      &lt;td&gt;&lt;img src=&quot;assets/images/beef_and_milk.png&quot; alt=&quot;beef_and_milk&quot; /&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;jaccard-相似度&quot;&gt;Jaccard 相似度&lt;/h3&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;Similarity = \frac{A \cap B}{A \cup B}&lt;/script&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;食物1&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;食物2&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;相似度&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;牛肉&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;鸡胸肉&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;(2)/(2+2)=0.5&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;牛肉&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;鸡蛋&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;(2)/(2+4)=0.333&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;牛肉&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;牛奶&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;(1)/(2+1)=0.333&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/long_tail.png&quot; alt=&quot;long_tail&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在使用 Jaccard 相似度的时候，会导致一些比较偏门的东西一旦重复买了，则会使得对应的相似度很高。如在这个例子里面, 牛奶,鸡蛋 和 牛肉的相似度是一样的&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;食物1&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;食物2&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;相似度&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;牛肉&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;鸡蛋&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;(2)/(2+4)=0.333&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;牛肉&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;牛奶&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;(1)/(2+1)=0.333&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;significant-terms-aggregation&quot;&gt;Significant Terms Aggregation&lt;/h3&gt;
&lt;p&gt;回到我们的音频推荐，其实和购物车的推荐是一样的，在 es 中，我们可以很轻松地得到所有音频的试听的数量&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;GET&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/es_device/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_search&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;query&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;match_all&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;size&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;aggs&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;listened&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;terms&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;field&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;listenedMediaIds&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;##&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;key&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;【冥想】【助眠】25分钟·月夜安睡&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;doc_count&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1298&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;key&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;【冥想】【助眠】30分钟·深度睡眠&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;doc_count&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1293&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;key&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;【故事】给圣诞老人的信&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;doc_count&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1238&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;同样，如果我们只考虑总数，那么只会使得经常命中的是 「热门音频」&lt;/p&gt;

&lt;p&gt;在 ES 中，提供了 &lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-bucket-significantterms-aggregation.html#search-aggregations-bucket-significantterms-aggregation&quot;&gt;significant terms&lt;/a&gt; 的聚合方式&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;GET&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/es_device/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_search&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;query&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;【冥想】【助眠】25分钟·月夜安睡&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;size&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;aggs&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;listened&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;significant_terms&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;field&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;listenedMediaIds&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;##&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&quot;doc_count&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1298&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# 听了月夜安睡的人&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&quot;bg_count&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1617&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# 所有的音频的试听数&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;key&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;【白噪音】【专注】 春雨&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;doc_count&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1120&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# 听了 月夜安睡 的人中，有 1120 听了春雨&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;bg_count&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1123&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# 总共有 1123 个人听了春雨&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;key&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;【故事】摇篮曲&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;doc_count&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1085&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# 听了 月夜安睡 的人中，有 1085 听了摇篮曲&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;bg_count&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1089&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# 总共有 1123 个人听了摇篮曲&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;音频1&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;音频2&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;音频1 &amp;amp; 音频2&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;月夜安睡(1298)&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;春雨(1123)&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;同时听了月夜安睡和春雨(1120)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;月夜安睡(1298)&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;摇篮曲(1089)&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;同时听了月夜安睡和春雨(1085)&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;在 ES 中，他的计算分数的默认算法是 JLH&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fgPercentage&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bgPercentage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fgPercentage&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bgPercentage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;其中 fg 代表 foreground, bg 代表 background&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/bg_fg.png&quot; alt=&quot;bg_fg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;分数为 (fg / bg) * (fg - bg) = 0.20918870031071285&lt;/p&gt;

&lt;h2 id=&quot;落地方案&quot;&gt;落地方案&lt;/h2&gt;

&lt;div class=&quot;mermaid&quot;&gt;
graph LR;
  record([统计用户数据])
  record1([用户标签])
  record2([用户听过的音频])
  record3([用户喜欢的音频])
  record4([用户听过的老师])
  record--&amp;gt;record1 &amp;amp; record2 &amp;amp; record3 &amp;amp; record4 --&amp;gt;查询和该用户相似行为或者标签的用户数据--&amp;gt;聚合数据并展示
&lt;/div&gt;

&lt;p&gt;如果为空数据用户，则返回 「最热的音频」给用户即可&lt;/p&gt;

&lt;h2 id=&quot;reference&quot;&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/andrely/ipython-notebooks/blob/master/JLH%20score%20characteristics.ipynb&quot;&gt;JLH Explained&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://opensourceconnections.com/blog/2016/06/06/recommender-systems-101-basket-analysis/&quot;&gt;Recommender Systems 101: Basket Analysis&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://opensourceconnections.com/blog/2016/09/09/better-recsys-elasticsearch/&quot;&gt;Better Recsys Elasticsearch&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://aclanthology.org/J93-1003.pdf&quot;&gt;Accurate Methods for the Statistics of Surprise and Coincidence&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>dengqinghua</name></author><summary type="html">从前面一篇文章，我们可以了解到一些基本的概念，非常重要的几个点为</summary></entry><entry><title type="html">检索技术探索</title><link href="https://dengqinghua.github.io/all-for-search.html" rel="alternate" type="text/html" title="检索技术探索" /><published>2021-09-01T00:00:00+08:00</published><updated>2021-09-01T00:00:00+08:00</updated><id>https://dengqinghua.github.io/all-for-search</id><content type="html" xml:base="https://dengqinghua.github.io/all-for-search.html">&lt;h2 id=&quot;方案设计&quot;&gt;方案设计&lt;/h2&gt;
&lt;h3 id=&quot;可选的搜索方案&quot;&gt;可选的搜索方案&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;方案&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;优点&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;缺点&lt;/th&gt;
      &lt;th&gt;扩展性&lt;/th&gt;
      &lt;th&gt;难度&lt;/th&gt;
      &lt;th&gt;实现方式&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;MySQL&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;接入成本小， 原生的 MySQL 支持简单的全文索引 和 ngram 分词&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;功能&lt;a href=&quot;https://dev.mysql.com/doc/refman/5.7/en/fulltext-restrictions.html&quot;&gt;有限&lt;/a&gt;， 不支持复杂的分词逻辑， 不支持预先设置字段权重&lt;/td&gt;
      &lt;td&gt;⭐️&lt;/td&gt;
      &lt;td&gt;⭐️&lt;/td&gt;
      &lt;td&gt;直接接入并使用 MyBatisPlus 进行查询即可&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;内存(H2)&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;速度快，可使用 &lt;a href=&quot;https://www.h2database.com/html/main.html&quot;&gt;H2&lt;/a&gt; 和 &lt;a href=&quot;http://www.h2database.com/javadoc/index.html&quot;&gt;Lucene&lt;/a&gt; 结合进行检索， 当前数据量大概为 500K， 可考虑全部导入&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;数据量变大之后容易导致 OOM， 需要处理多实例的数据同步问题&lt;/td&gt;
      &lt;td&gt;⭐️⭐️&lt;/td&gt;
      &lt;td&gt;⭐️⭐️⭐️&lt;/td&gt;
      &lt;td&gt;1. 接入 H2&lt;br /&gt; 2. 提供同步更新机制 &lt;br /&gt;3. OOM 优化 &lt;br /&gt;4. 分词优化方案和调试方案&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;ES&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;主流， 满足基本的搜索需求， 丰富的 API， 分词功能支持较好&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;引入第三方组件， 容易造成单点， 服务可靠性无法保证&lt;/td&gt;
      &lt;td&gt;⭐️⭐️⭐️⭐️⭐️&lt;/td&gt;
      &lt;td&gt;⭐️⭐️&lt;/td&gt;
      &lt;td&gt;1. 接入 ES&lt;br /&gt; 2. 实现 ES Wrapper &lt;br /&gt;3. 提供统一的搜索接口&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;例子&quot;&gt;例子&lt;/h3&gt;
&lt;h4 id=&quot;mysql&quot;&gt;MySQL&lt;/h4&gt;
&lt;p&gt;给 media 表的 content 字段 添加全文索引， 这里使用了 &lt;a href=&quot;https://dev.mysql.com/doc/refman/5.7/en/fulltext-search-ngram.html&quot;&gt;ngram&lt;/a&gt; 作为分词器&lt;/p&gt;

&lt;p&gt;分词的字数由 &lt;code class=&quot;highlighter-rouge&quot;&gt;ngram_token_size&lt;/code&gt; 参数进行控制&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;ALTER&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TABLE&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;`media`&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ADD&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FULLTEXT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;`content`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;WITH&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PARSER&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ngram&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;，&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;content&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;media&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;230&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;，&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;231&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;G&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;***************************&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;row&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;***************************&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;230&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;&quot;description&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;&quot;【为什么失眠】&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n\n\n&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;【专注练习】&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; 为了避免大脑走神，&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;***************************&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;row&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;***************************&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;231&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;&quot;description&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;&quot;描述文案&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;，&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;&quot;title&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;&quot;播放器标题&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;查看匹配的分数， 这里拿了两个 id 作为例子&lt;/p&gt;
&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;，&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AGAINST&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'为什么失眠'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;score&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;media&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;230&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;，&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;231&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;-----+--------------------+&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;score&lt;/span&gt;              &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;-----+--------------------+&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;230&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3379950523376465&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;231&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;                  &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;-----+--------------------+&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rows&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;05&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;mysql&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;，&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AGAINST&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'失眠'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;score&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;media&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;230&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;，&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;231&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;-----+-------------------+&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;score&lt;/span&gt;             &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;-----+-------------------+&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;230&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;675990104675293&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;231&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;                 &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;-----+-------------------+&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;mysql&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;，&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AGAINST&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'眠'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;score&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;media&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;230&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;，&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;231&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;-----+-------+&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;score&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;-----+-------+&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;230&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;     &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;231&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;     &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;-----+-------+&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rows&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;04&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;h2&quot;&gt;H2&lt;/h4&gt;
&lt;p&gt;例子见 &lt;a href=&quot;https://zhuanlan.zhihu.com/p/142833556&quot;&gt;H2 的全文检索功能&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;H2 可以结合 Lucene 一起进行使用， 但是从 API 的设计和扩展性来说，都有比较大的限制，可以作为测试使用，不适合用在生产环境中&lt;/p&gt;

&lt;h4 id=&quot;es&quot;&gt;ES&lt;/h4&gt;
&lt;p&gt;ES 作为专业的搜索引擎，有丰富的功能和 API，在&lt;a href=&quot;./3-month-sharing#elk&quot;&gt;之前&lt;/a&gt;我们便使用了 ELK 做日志相关的收集和查询，
在稳定性和查询速度上面都要对应的保证。&lt;/p&gt;

&lt;p&gt;相比于 MySQL，ES 提供更细粒度的相关度控制(&lt;a href=&quot;https://www.elastic.co/guide/en/app-search/current/relevance-tuning-guide.html&quot;&gt;Relevance Tuning&lt;/a&gt;)， 即可以指定每个字段的搜索权重，例子&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl &lt;span class=&quot;nt&quot;&gt;-X&lt;/span&gt; GET &lt;span class=&quot;s1&quot;&gt;'https://es/search'&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-H&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Content-Type: application/json'&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'{
  &quot;search_fields&quot;: {
    &quot;title&quot;: {
      &quot;weight&quot;: 10
    },
    &quot;description&quot;: {
      &quot;weight&quot;: 1
    },
    &quot;states&quot;: {
      &quot;weight&quot;: 2
    }
  },
  &quot;query&quot;: &quot;mountains&quot;
}'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;对比于 MySQL， 更提供了全套的管理后台，可在 Kibana 进行对应的索引管理和监控等操作&lt;/p&gt;

&lt;p&gt;另外，除了 weight/boost 设置之外， ES 还支持前缀匹配，同义词检索，分词插件等功能，其中 同义词，分词插件 可直接在腾讯云后台中更新&lt;/p&gt;

&lt;h2 id=&quot;落地方案&quot;&gt;落地方案&lt;/h2&gt;
&lt;h3 id=&quot;搜索&quot;&gt;搜索&lt;/h3&gt;

&lt;div class=&quot;mermaid&quot;&gt;
flowchart TD;
    onMemeroy([缓存 获取搜索结果&lt;br /&gt;热词检索/TopK 等]);
    es([es 检索]);
    E([返回搜索结果]);
    E1([返回推荐数据]);
    onMemeroy--&amp;gt;|有结果| E
    onMemeroy--&amp;gt;|无结果| es
    es--&amp;gt;|有结果| E
    es--&amp;gt;|无结果| E1
&lt;/div&gt;

&lt;h3 id=&quot;索引&quot;&gt;索引&lt;/h3&gt;
&lt;p&gt;采用 ES 作为主要的搜索引擎， 通过事件维护索引的更新&lt;/p&gt;

&lt;div class=&quot;mermaid&quot;&gt;
graph LR
    subgraph 查询
      cache(内存);
      es(ES API);
    end
    subgraph 索引更新
      EventHandler(Pulsa队列);
      storage1(存储1 &lt;br /&gt; ES-主查询引擎);
      storage2(存储2 &lt;br /&gt; 内存-热词,TopK 等信息);
    end
    subgraph 源数据事件
      event1(单曲/合集/QE/DE 更新);
      event2(老师更新);
      event3(标签更新);
    end
    subgraph 宽表 Schema
      field(索引字段);
      weight(搜索权重值);
    end

    event1 &amp;amp; event2 &amp;amp; field &amp;amp; weight--&amp;gt;EventHandler--&amp;gt;storage1 &amp;amp; storage2;
    cache--&amp;gt;storage1;
    es--&amp;gt;storage2;
&lt;/div&gt;

&lt;h3 id=&quot;部署&quot;&gt;部署&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;如果采用 H2 作为搜索引擎， 为了服务的简单行来说，需要考虑 &lt;strong&gt;新建项目&lt;/strong&gt;， 而且需要维护好数据更新的问题&lt;/li&gt;
  &lt;li&gt;如果使用 ES 或者 MySQL 作为搜索引擎， 则可不需要考虑单独起项目，在原有项目上开发即可&lt;/li&gt;
  &lt;li&gt;无论使用哪一种方案，都需要将搜索服务部署到单独的服务器中，通过 Nginx 的二级域名进行流量转发和分流处理， 该部分在 Nginx 层控制即可&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;任务分析&quot;&gt;任务分析&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;热词维护&lt;/p&gt;

    &lt;p&gt;后台配置，存储 MySQL，使用 guava cache，全量缓存 热词对应的id 至 内存中&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;索引维护&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;确定可供搜索的字段来源&lt;/li&gt;
      &lt;li&gt;字段更新之后，需要发送对应的事件，使得 ES 进行索引的更新&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;搜索&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;优先匹配 热词， 该部分直接从缓存中获取&lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;热词中不存在时， 则使用 ES 进行查询&lt;/p&gt;

        &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;QueryBuilders&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;multiMatchQuery&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;搜索词&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;fields&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;词汇1&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;，&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;词汇2&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;冷启动数据&lt;/p&gt;

    &lt;p&gt;未获取到搜索结果时处理如下:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;如果是搜索 es 未找到对应的数据结果， 则使用 人工配置的 推荐数据&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;搜索词数据统计&lt;/p&gt;

    &lt;p&gt;logstash 收集搜索相关的词， 下面的 &lt;code class=&quot;highlighter-rouge&quot;&gt;searchQ&lt;/code&gt; 为搜索的词汇&lt;/p&gt;

    &lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;grok&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;message&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'%{TIMESTAMP_ISO8601:reqTime}  %{GREEDYDATA} params =[{&quot;q&quot;:%{searchQ}}] %{GREEDYDATA}time cost = %{NUMBER:reqCostMs} ms'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;mutate&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;convert&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;reqCostMs&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;integer&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;date&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;reqTime&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;，&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;ISO8601&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;，&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;YYYY-MM-dd HH:mm:ss&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;，&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;YYYY-MM-dd HH:mm:ss.ZZZ&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;reqTime&quot;&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;locale&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;en&quot;&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;数据全量索引&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;数据统计&lt;/p&gt;

    &lt;p&gt;对于数据而言，常见的是 哪些词被经常搜索？搜索的结果的相关度怎么样？搜索的结果有多少人进行了点击？(CTR 是多少)&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;assets/images/search_result_example.png&quot; alt=&quot;search_result_example&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;其他的优化&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;分词优化，考虑使用不同的分词引擎(如 ik， ngram 等)&lt;/li&gt;
      &lt;li&gt;同义词优化，配置对应的同义词进行检索优化&lt;/li&gt;
      &lt;li&gt;拼音，错别字纠正&lt;/li&gt;
      &lt;li&gt;搜索词补全&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;演进计划&quot;&gt;演进计划&lt;/h3&gt;

&lt;div class=&quot;mermaid&quot;&gt;
graph LR;
  input1([原始数据1 &lt;br /&gt; 亿/千万])
  input2([原始数据2 &lt;br /&gt; 亿/千万])
  input3([原始数据... &lt;br /&gt; 亿/千万])
  callback(召回 &lt;br /&gt;万/千);
  sort(归并排序 &lt;br /&gt;千/百);
  filter(调整 &lt;br /&gt;百/十);
  output([结果 &lt;br /&gt; 十])
  input1 &amp;amp; input2 &amp;amp; input3--&amp;gt;callback--&amp;gt;sort--&amp;gt;filter--&amp;gt;output
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/netflix_framework.png&quot; alt=&quot;framework&quot; /&gt;&lt;/p&gt;

&lt;p&gt;更多内容见 &lt;a href=&quot;/recommend-sys.html#技术架构&quot;&gt;推荐系统探索&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;检索基础理论&quot;&gt;检索基础理论&lt;/h2&gt;
&lt;p&gt;需要关注下面几点&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;快速的缩小检索范围
    &lt;ul&gt;
      &lt;li&gt;二分查找法， 缩小一半&lt;/li&gt;
      &lt;li&gt;跳表， 跳动步长 &amp;gt; 1&lt;/li&gt;
      &lt;li&gt;B/B+树， 以磁盘片为步长，一次过滤掉一个(4K)或者多个快&lt;/li&gt;
      &lt;li&gt;位图/Hash/布隆过滤器， 利用概率/数组下标 快速寻找或者判断元素&lt;/li&gt;
      &lt;li&gt;Roaring Bitmap， 高位存储 bucket 信息，低位存储位图信息&lt;/li&gt;
      &lt;li&gt;TopK &amp;amp; 非精准 TopK&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;利用存储、访问特性进行检索优化， 估算内存和磁盘的空间占比， 减少磁盘IO(磁盘)， 利用磁盘的顺序读， 避免随机读
    &lt;ul&gt;
      &lt;li&gt;B+ 树&lt;/li&gt;
      &lt;li&gt;日志记录使用 LSM 树&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;空间冗余换取时间
    &lt;ul&gt;
      &lt;li&gt;跳表， 冗余步长&lt;/li&gt;
      &lt;li&gt;AVL， 冗余叶子高度信息&lt;/li&gt;
      &lt;li&gt;倒排索引&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;缓存
    &lt;ul&gt;
      &lt;li&gt;热点数据使用 LRU 缓存&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在工业界中，往往会几个算法组合起来进行使用，如使用跳表来实现 posting-list， 两个 posting-list 求交集的时候，直接将小的那个变成 Hash 等&lt;/p&gt;

&lt;p&gt;另外，要注意两点&lt;/p&gt;

&lt;blockquote&gt;

  &lt;ol&gt;
    &lt;li&gt;内存的检索效率比磁盘高许多，因此，能加载到内存中的数据，我们要尽可能加载到内存中。&lt;/li&gt;
    &lt;li&gt;大数据集合拆成小数据集合处理(快速缩小检索范围)&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/speed-in-2020.png&quot; alt=&quot;speed-in-2020.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;参考: &lt;a href=&quot;https://colin-scott.github.io/personal_website/research/interactive_latency.html&quot;&gt;数字&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;更新策略&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Double Buffer， 利用冗余减少更新频率&lt;/li&gt;
  &lt;li&gt;全量(只读) + 增量更新(可读可写)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;指导思想&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;索引和数据分离&lt;/li&gt;
  &lt;li&gt;减少磁盘IO&lt;/li&gt;
  &lt;li&gt;读写分离， 避免锁&lt;/li&gt;
  &lt;li&gt;分层处理 (非精准 TopK -&amp;gt; TopK)， 搜索降级&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;es-实战&quot;&gt;ES 实战&lt;/h2&gt;
&lt;h3 id=&quot;基本概念&quot;&gt;基本概念&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Document Metadata
    &lt;ul&gt;
      &lt;li&gt;_index 索引名称&lt;/li&gt;
      &lt;li&gt;_type 索引类型 7.0版本中只对应一个 type， 为 _doc&lt;/li&gt;
      &lt;li&gt;_score 相关性打分&lt;/li&gt;
      &lt;li&gt;_source 数据， 为 JSON 格式&lt;/li&gt;
      &lt;li&gt;_version 更新的版本&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Mapping 字段类型定义&lt;/li&gt;
  &lt;li&gt;Setting 部署方式定义&lt;/li&gt;
  &lt;li&gt;Data node 存储数据的 node&lt;/li&gt;
  &lt;li&gt;Coordinating node 分发节点， 并发将请求拆分到不同的节点进行查询&lt;/li&gt;
  &lt;li&gt;Primary/Replica Shard 主/副本分片&lt;/li&gt;
  &lt;li&gt;green， yellow &amp;amp; red 绿色代表主/副本分片均正常， 黄色代表副本分片不正常， 红色代表主分片不正常&lt;/li&gt;
  &lt;li&gt;put 文档&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;devtools&quot;&gt;DevTools&lt;/h3&gt;
&lt;p&gt;假设索引名称为 es_media&lt;/p&gt;

&lt;p&gt;索引信息查询&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 查看 mapping 和 setting 信息&lt;/span&gt;
GET /es_media
&lt;span class=&quot;c&quot;&gt;# 查询总数&lt;/span&gt;
GET /es_media/_count
&lt;span class=&quot;c&quot;&gt;# 搜索内容 并查看分数&lt;/span&gt;
POST /es_media/_search
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;cat 查询&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 查看所有的索引信息&lt;/span&gt;
GET /_cat/indices
&lt;span class=&quot;c&quot;&gt;# 查看所有的分片信息&lt;/span&gt;
GET /_cat/shards
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;集群信息&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;GET /_cluster/health
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;增删查改操作&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 创建记录&lt;/span&gt;
POST /es_media/_doc
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;1&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 更新或者创建 id=1024的记录， 该部分删除原有的索引进行重建&lt;/span&gt;
PUT /es_media/_doc/1024
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;1&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 更新索引&lt;/span&gt;
POST /es_media/_update/1024
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;doc&quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;internalName&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;this is new&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

GET /es_media/_doc/1024

&lt;span class=&quot;c&quot;&gt;# 批量操作&lt;/span&gt;
POST /_bulk
&lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 批量获取操作&lt;/span&gt;
GET /_mget
&lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 批量查询&lt;/span&gt;
GET /_msearch
&lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;分词器&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;GET /_analyze
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;analyzer&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;standard&quot;&lt;/span&gt;，
  &lt;span class=&quot;s2&quot;&gt;&quot;text&quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;今天是个好的日志&quot;&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;&quot;我吃了一顿烧烤&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;GET /es_media/_analyze
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;field&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;name&quot;&lt;/span&gt;,
  &lt;span class=&quot;s2&quot;&gt;&quot;text&quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;nice&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;profile 和 制定字段查询&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 查询字段为 title， 并查看 profile 其中 df 代表的是 default_field&lt;/span&gt;
GET /es_media/_search?q&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;测试&amp;amp;df&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;title
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;profile&quot;&lt;/span&gt;: &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;termQuery 和 phaseQuery&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# phaseQuery&lt;/span&gt;
GET /es_media/_search?q&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;title:&lt;span class=&quot;s2&quot;&gt;&quot;测试 一下&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;profile&quot;&lt;/span&gt;: &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# termQuery&lt;/span&gt;
GET /es_media/_search?q&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;title:&lt;span class=&quot;s2&quot;&gt;&quot;测试 一下&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;profile&quot;&lt;/span&gt;: &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# boolQuery， 必须要包括 测试 或者 一下&lt;/span&gt;
GET /es_media/_search?q&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;title:&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;测试 一下&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;profile&quot;&lt;/span&gt;: &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 默认是 OR 的查询&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 制定 AND&lt;/span&gt;
GET /es_media/_search?q&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;title:&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;测试 AND 一下&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;profile&quot;&lt;/span&gt;: &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 测试的查询方式&lt;/span&gt;
POST /es_media/_search?q&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;:10
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;explain&quot;&lt;/span&gt;: &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# 重建索引，将一个索引导入到另一个索引
POST _reindex
{
  &quot;source&quot;: { &quot;index&quot;: &quot;source_index&quot; },
  &quot;dest&quot;: { &quot;index&quot;: &quot;new_index&quot; }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;倒排索引&quot;&gt;倒排索引&lt;/h3&gt;
&lt;p&gt;正排索引&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;document id&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;content&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;elasticsearch server&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;server devops good&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;3&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;elasticsearch very good&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;倒排索引&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;term&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;count&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;document position in content&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;elasticsearch&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1:0 3:0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;server&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1:1 2:0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;good&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2:0 3:0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;very&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;3:1&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;ul&gt;
  &lt;li&gt;单词词典(Term Dictionary)
    &lt;ul&gt;
      &lt;li&gt;B+ 树&lt;/li&gt;
      &lt;li&gt;Hash&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;倒排列表(Posting List)
    &lt;ul&gt;
      &lt;li&gt;Doc ID&lt;/li&gt;
      &lt;li&gt;TF (term frequency) 词频， 用于计算相关性&lt;/li&gt;
      &lt;li&gt;Position 词出现的位置， 用于语句搜索&lt;/li&gt;
      &lt;li&gt;Offset 位置， 用于高亮&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;analyer-分词器&quot;&gt;Analyer 分词器&lt;/h3&gt;
&lt;p&gt;关键的&lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/reference/current/analyzer-anatomy.html&quot;&gt;三个部分&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;mermaid&quot;&gt;
graph LR
    cf([Character ilters]);
    t([Tokenizer]);
    tf([Tokenizer Filter]);
    cf--&amp;gt;t--&amp;gt;tf
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Character Filters 过滤器，过滤掉一些如 &amp;lt; &amp;amp; 标签， 该部分会影响到倒排索引的 position 等信息&lt;/li&gt;
  &lt;li&gt;Tokenizer 切分单词，比如按照空格，逗号切分 [“good better best”] 切分为 good， better， best&lt;/li&gt;
  &lt;li&gt;Token Filter 加工单词，如删除 stopwords(a the 等)， 将大写改为小写， 删除违禁词等&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;GET /_analyze
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;analyzer&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;standard&quot;&lt;/span&gt;，
  &lt;span class=&quot;s2&quot;&gt;&quot;text&quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;今天是个好的日子&quot;&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;&quot;我吃了一顿烧烤&quot;&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;&quot;I feel good&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;GET /es_media/_analyze
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;field&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;name&quot;&lt;/span&gt;,
  &lt;span class=&quot;s2&quot;&gt;&quot;text&quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;nice&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;常见的 Analyzer&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;standard ES 的&lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/reference/current/search-analyzer.html&quot;&gt;默认&lt;/a&gt;的分词器&lt;/li&gt;
  &lt;li&gt;simple&lt;/li&gt;
  &lt;li&gt;whitespace，将空格去掉&lt;/li&gt;
  &lt;li&gt;stop 将 a，the 去掉&lt;/li&gt;
  &lt;li&gt;keyword 不进行分词， 则使用 keyword&lt;/li&gt;
  &lt;li&gt;pattern 正则分词&lt;/li&gt;
  &lt;li&gt;language 不同语言的分词 (running 会变成 run，foxes 变成 fox 等)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;中文分词&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;难点：词语在不同地方的语境不同，假如 &lt;strong&gt;这个瓜不大好吃&lt;/strong&gt; 分词为了 瓜，不大，好吃，则完全跟原来的意思相反了&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;常用的中文分词器&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;icu_analyzer&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/medcl/elasticsearch-analysis-ik&quot;&gt;ik_smart&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/hankcs/HanLP&quot;&gt;HanLP&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/medcl/elasticsearch-analysis-pinyin&quot;&gt;Pinyin&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;注：可自定义 analyzer， 也可以定义 search_analyzer， 可参考 两者的&lt;a href=&quot;https://stackoverflow.com/a/15932838&quot;&gt;区别&lt;/a&gt;，以及官方的&lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/reference/current/specify-analyzer.html&quot;&gt;建议&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;relevance-相关性&quot;&gt;Relevance 相关性&lt;/h3&gt;
&lt;p&gt;评估标准 Information Retrieval 通过下面三个结果来看相关性的结果好坏&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Percision 精确度。除了返回精确结果，还包含了哪些非精确的结果&lt;/li&gt;
  &lt;li&gt;Recall 查全率/召回率，还缺少了哪些数据未返回&lt;/li&gt;
  &lt;li&gt;Ranking 排序&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;该部分和机器学习里面的评估标准类似，有 True/False Positive 的概念&lt;/p&gt;

&lt;h3 id=&quot;mapping&quot;&gt;Mapping&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Dynamic Mapping， 自动创建 Mapping 和 字段
    &lt;ul&gt;
      &lt;li&gt;true 可以加字段，可以被索引&lt;/li&gt;
      &lt;li&gt;false 可以加字段，不可以被索引&lt;/li&gt;
      &lt;li&gt;strict 不可以加字段，不可以被索引&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;数组的类型依然是 text&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;keyword， 精确值类型， 认为是一个不可分割的词语， 如 App Store， 其他的精确值还包括 数字，日期 等， 该部分没有必要做分词的处理&lt;/li&gt;
  &lt;li&gt;text， 全文本类型。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;aggregation&quot;&gt;Aggregation&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Bucket，类似于 MySQL 的 group&lt;/li&gt;
  &lt;li&gt;Metric，类似于 MySQL 的 count，min，max 等等&lt;/li&gt;
  &lt;li&gt;Pipeline&lt;/li&gt;
  &lt;li&gt;Matrix&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;term-和-text&quot;&gt;Term 和 Text&lt;/h3&gt;
&lt;p&gt;查询的分类可参考 &lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/client/java-rest/current/java-rest-high-query-builders.html&quot;&gt;Building Queries&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;term 不会做分词处理，类似于 client 中的 keyword
    &lt;ul&gt;
      &lt;li&gt;注意，一些 analyzer 会做大小写转换，所以如果你的输入值为 iPHONE， 索引类型为 term， 存储到 ES 中 的 是 &lt;code class=&quot;highlighter-rouge&quot;&gt;iphone&lt;/code&gt;， 此时拿 iPHONE 是无法查询到数据的&lt;/li&gt;
      &lt;li&gt;可以使用 constant score 将查询转化，避免计算 score，提升性能&lt;/li&gt;
      &lt;li&gt;可以用 es 的多字段属性，添加一个 &lt;a href=&quot;https://stackoverflow.com/questions/48869795/difference-between-a-field-and-the-field-keyword&quot;&gt;keyword&lt;/a&gt; 字段&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;全文查询， 即 text， 查询的时候，会先将 text 分成 term，再进行不同的算分&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;下面是一个 text: &lt;strong&gt;Fox Chicken Nice&lt;/strong&gt; 被查询的例子&lt;/p&gt;

&lt;div class=&quot;mermaid&quot;&gt;
graph LR
    fcn([Text &lt;br /&gt;Fox Chicken Nice]);
    f([Term1 &lt;br /&gt;Fox]);
    f1([计算分数]);
    c([Term2 &lt;br /&gt;Chicken]);
    c1([计算分数]);
    n([Term3 &lt;br /&gt;Nice]);
    n1([计算分数]);
    e([汇总得分并排序输出]);
    fcn --&amp;gt; f &amp;amp; c &amp;amp; n
    f --&amp;gt; f1
    c --&amp;gt; c1
    n --&amp;gt; n1
    f1 &amp;amp; c1 &amp;amp; n1 --&amp;gt; e
&lt;/div&gt;

&lt;h3 id=&quot;bool-数字类型的查询&quot;&gt;bool， 数字类型的查询&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;对于这种不需要分词的类型，可以考虑直接使用 termQuery 查询， 如果不需要计算排序，则使用 constant score 方式，转化为 filter&lt;/li&gt;
  &lt;li&gt;多值字段，如 labels: [label1， label2] 则为包含关系， 如果需要精确查询则需要增加 labels_count 的字段， 结合起来做精确匹配&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;相关度计算&quot;&gt;相关度计算&lt;/h3&gt;
&lt;p&gt;TF-IDF 和 BM-25&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;TF term frequency，一个词在全文中所有词中出现的次数&lt;/li&gt;
  &lt;li&gt;StopWord 类似于 ‘的， 我’ 这样的词，计算 TF 是没有意义的&lt;/li&gt;
  &lt;li&gt;DF document frequency， 出现过该词的文档，在总文档中的次数， 也就是说该值越大，说明该词就越常见， 值越小，就越稀缺和重要。&lt;/li&gt;
  &lt;li&gt;IDF inverse DF&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;简单来说一个词的 TF 越高，DF 越低，文档越短，而认为相关度越高&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Boosting， boost 的意思是放大的意思，通过这个值可以控制算分结果&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.elastic.co/guide/en/app-search/current/relevance-tuning-guide.html#relevance-tuning-guide&quot;&gt;Boosting Query&lt;/a&gt; 在查询的时候指定字段的 weight&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-function-score-query.html#function-field-value-factor&quot;&gt;Function Score Query&lt;/a&gt; 自定义字段/值的分数计算&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;query-和-filter&quot;&gt;Query 和 Filter&lt;/h3&gt;
&lt;p&gt;Query 会进行相关性算分，Filter 只是过滤，不进行算分，性能相对更好&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Bool Query
    &lt;ul&gt;
      &lt;li&gt;must QueryContext 会算分&lt;/li&gt;
      &lt;li&gt;should QueryContext 会算分&lt;/li&gt;
      &lt;li&gt;must_not FilterContext 不会算分&lt;/li&gt;
      &lt;li&gt;filter FilterContext 必须匹配，不会算分&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;function-score-query&quot;&gt;Function Score Query&lt;/h3&gt;
&lt;p&gt;可以自定义算分结果&lt;/p&gt;

&lt;h3 id=&quot;serach-template&quot;&gt;Serach Template&lt;/h3&gt;
&lt;p&gt;搜索的定义 和 搜索的逻辑解耦&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;POST _scripts/media_serach_template
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;script&quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;搜索推荐-search-as-you-type-autocomplete-contextcomplete&quot;&gt;搜索推荐 search as you type， AutoComplete， ContextComplete&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Term Suggestion，比如你搜索 go， 自动补全为 good god 等&lt;/li&gt;
  &lt;li&gt;Phase Suggestion， 比如搜索 I love， 自动建议 I love you， I love dog， I love cat 等等&lt;/li&gt;
  &lt;li&gt;AutoComplete， ES 在内存中建一个 &lt;a href=&quot;https://en.wikipedia.org/wiki/Finite-state_transducer&quot;&gt;fst(finate state transducer)&lt;/a&gt; 进行检索，该结构类似于 tire， 对比可参考这篇&lt;a href=&quot;https://blog.burntsushi.net/transducers/&quot;&gt;文章&lt;/a&gt; 该部分需要提前在索引中做定义&lt;/li&gt;
  &lt;li&gt;ContextComplete，根据上下文进行推荐&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;es-分布式&quot;&gt;ES 分布式&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;故障转移
    &lt;ul&gt;
      &lt;li&gt;当前 shard 存放的副本，是其他的 shard 的副本&lt;/li&gt;
      &lt;li&gt;当前 shard 挂掉之后，其他的 shard 会自动同步副本数据&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;&lt;img src=&quot;assets/images/es_shard_example.png&quot; alt=&quot;es_shard_example&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;文档分布存储
    &lt;ul&gt;
      &lt;li&gt;路由算法 Hash(_routing) % primary_shards, 这里的 primary_shards 一旦更改，则需要重建索引&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;倒排索引是不可变的
    &lt;ul&gt;
      &lt;li&gt;好处: 不需要考虑并发，很好地利用文件系统的缓存，易于压缩&lt;/li&gt;
      &lt;li&gt;坏处: 重建索引的成本比较高&lt;/li&gt;
      &lt;li&gt;删除的索引单独存储，搜索的时候，先搜索全部，再过滤掉删除的文档&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Refresh
    &lt;ul&gt;
      &lt;li&gt;单个倒排索引为多个 segment (不可变) 多个 segments + .del = 所有的数据集合&lt;/li&gt;
      &lt;li&gt;index buffer 为 索引的内存空间, 索引的时候会先写入 index buffer&lt;/li&gt;
      &lt;li&gt;index buffer 写入 segment 的过程为 refresh&lt;/li&gt;
      &lt;li&gt;默认是 1s 进行一次 refresh，由于只有进入了 segment 才会被搜索，所以 es 是近实时的搜索引擎(延迟&amp;lt;=1s)&lt;/li&gt;
      &lt;li&gt;index buffer 占用内存过多(JVM的 10%) 也会触发 refresh&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Transaction Log
    &lt;ul&gt;
      &lt;li&gt;在写入 index buffer 时候，同步地写入了 transaction log&lt;/li&gt;
      &lt;li&gt;Transaction Log 在 ES 断电的时候，依然能够进行数据的恢复&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Flush
    &lt;ul&gt;
      &lt;li&gt;refresh&lt;/li&gt;
      &lt;li&gt;将缓存中的 segment 落到磁盘 (fsync)&lt;/li&gt;
      &lt;li&gt;清空 transaction log&lt;/li&gt;
      &lt;li&gt;默认 30分钟 调用一次 或者 transaction log 写满(512M)时 调用&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Merge
    &lt;ul&gt;
      &lt;li&gt;merge 磁盘的 segment&lt;/li&gt;
      &lt;li&gt;真正的删除&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Search Type
    &lt;ul&gt;
      &lt;li&gt;DFS Query &amp;amp;/then Fetch&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;分片的生命周期&quot;&gt;分片的生命周期&lt;/h3&gt;
&lt;p&gt;TODO: 增删改查的步骤是什么样的，如何使用 内存，磁盘 等来做到 高性能 和 高可用的？&lt;/p&gt;

&lt;p&gt;分片数目 和 相关性分数的关系&lt;/p&gt;

&lt;h3 id=&quot;深度分页-并发更新&quot;&gt;深度分页, 并发更新&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;深度分页会导致非常大的性能问题，ES 默认的限制是 10000 条，可以考虑 &lt;code class=&quot;highlighter-rouge&quot;&gt;search after&lt;/code&gt; 或者 &lt;code class=&quot;highlighter-rouge&quot;&gt;scroll&lt;/code&gt; API 来解决深度分页问题&lt;/li&gt;
  &lt;li&gt;
    &lt;table&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td&gt;乐观锁, version = f(seq_no, primary_term)&lt;/td&gt;
          &lt;td&gt; &lt;/td&gt;
          &lt;td&gt;external_version&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;聚合查询&quot;&gt;聚合查询&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;metric, 如 max, mix, avg, sum 等&lt;/li&gt;
  &lt;li&gt;bucket, 类似于 groupBy&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;关联查询&quot;&gt;关联查询&lt;/h3&gt;
&lt;p&gt;类似于 JOIN&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;object, user 对应的 name 字段，变为 user.name 字段, 会分别进行索引&lt;/li&gt;
  &lt;li&gt;nested, 支持多个字段在一条记录中的查找&lt;/li&gt;
  &lt;li&gt;children, 需要将父子文档存储在同一个分片上，此时子文档在创建索引的时候，需要加上父文档的 id&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;重建索引&quot;&gt;重建索引&lt;/h3&gt;
&lt;p&gt;什么需要重建索引&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;索引相关的 Mapping 变更, 如 分析器，字段类型&lt;/li&gt;
  &lt;li&gt;主分片数变更&lt;/li&gt;
  &lt;li&gt;数据迁移等&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;相关 API&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;update by query 在改变所以之前的字段, 也可以被索引到&lt;/li&gt;
  &lt;li&gt;reindex&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;数据建模&quot;&gt;数据建模&lt;/h3&gt;
&lt;p&gt;考虑以下的几个维度&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;使用的字段&lt;/li&gt;
  &lt;li&gt;是否需要全文索引&lt;/li&gt;
  &lt;li&gt;是否需要进行聚合和排序&lt;/li&gt;
  &lt;li&gt;存储大小&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;字段类型&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Text(全文检索) 还是 Keyword(精确匹配, 排序, 聚合)，ES 默认会给 text 类型的字段 设置一个 keyword 字段, 平时考虑可以添加 英文/拼音 的字段，提高用户体验&lt;/li&gt;
  &lt;li&gt;枚举类型尽量设置为 keyword&lt;/li&gt;
  &lt;li&gt;不需要检索的字段设置 index 为 false&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;其他&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;如果确认字段和字段类型，建议索引的 dynamic 设置为 strict&lt;/li&gt;
  &lt;li&gt;避免正则匹配查询，而是通过字段冗余来解决(空间换时间)&lt;/li&gt;
  &lt;li&gt;Mapping文件放入版本库中进行管理&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;reference&quot;&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://time.geekbang.org/column/intro/298&quot;&gt;检索技术核心20讲-极客时间&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://time.geekbang.org/course/detail/100030501-102662&quot;&gt;Elasticsearch核心技术与实战-极客时间&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/142833556&quot;&gt;H2 全文检索&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://dev.mysql.com/doc/refman/8.0/en/fulltext-search.html&quot;&gt;MySQL Full-Text Search Functions&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.elastic.co/guide/en/app-search/current/relevance-tuning-guide.html#relevance-tuning-guide&quot;&gt;Relevance Tuning Guide，Weights and Boosts&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/client/java-rest/current/java-rest-high-query-builders.html&quot;&gt;QueryBuilders&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.infoq.com/articles/similarity-scoring-elasticsearch/&quot;&gt;similarity-scoring-elasticsearch&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>dengqinghua</name></author><summary type="html">方案设计 可选的搜索方案</summary></entry><entry><title type="html">Folsom Blues</title><link href="https://dengqinghua.github.io/folsom-blues.html" rel="alternate" type="text/html" title="Folsom Blues" /><published>2021-08-29T00:00:00+08:00</published><updated>2021-08-29T00:00:00+08:00</updated><id>https://dengqinghua.github.io/folsom-blues</id><content type="html" xml:base="https://dengqinghua.github.io/folsom-blues.html">&lt;hr data-content=&quot; 曲谱 &quot; /&gt;

&lt;ul&gt;
  &lt;li&gt;曲谱: &lt;a href=&quot;https://pan.baidu.com/disk/pdfview?path=%2F42%2F%E9%9F%B3%E4%B9%90%2F%E6%95%99%E6%9D%90%2FProGuitar%2FfolsomPrisonBlues%2Femil-ernebro-folsom-prison-blues.pdf&amp;amp;size=128339&amp;amp;fsid=427847537413829&quot;&gt;PDF&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;来源: &lt;a href=&quot;https://www.proguitar.com/academy/lessons/folsom-prison-blues&quot;&gt;Folsom Blues Guitar&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;我的翻弹: &lt;a href=&quot;https://b23.tv/GhUk2V&quot;&gt;美式指弹 folsom prison blues - emil ernebro-哔哩哔哩&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr data-content=&quot; 律动 &quot; /&gt;

&lt;ol&gt;
  &lt;li&gt;boom-chick&lt;/li&gt;
  &lt;li&gt;制音，一些时值需要突然制音，会更有感觉&lt;/li&gt;
  &lt;li&gt;不完全制音，需要在单个根音的时候，单独弹响，再闷掉&lt;/li&gt;
  &lt;li&gt;不要过渡揉弦，一点儿都不好听&lt;/li&gt;
  &lt;li&gt;节奏稳定性 &amp;gt; 自以为是的律动感 &amp;gt; 完全没有律动的稳定弹奏&lt;/li&gt;
&lt;/ol&gt;

&lt;hr data-content=&quot; 需要加强的 &quot; /&gt;

&lt;ol&gt;
  &lt;li&gt;节奏有很大的问题，一定要带着节拍器弹琴&lt;/li&gt;
  &lt;li&gt;无论是换和弦，还是速弹，一定要慢速，很 &lt;strong&gt;轻松&lt;/strong&gt; 地弹出来才可&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;在练习地不是很熟练的情况下，不要对一次录制成功抱有太大的期望(侥幸心理太重只会带来焦虑感)&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;30分钟内的录制才是录制，多余 30分钟的部分只能是练习，越到后面，录制效率越差，已经完全是机械化的肌肉记忆了&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;对吉他上的指板不太熟，一些 属七和弦 的基本按法不是很熟悉&lt;/li&gt;
  &lt;li&gt;加强对击弦勾弦的练习，才能真正地掌握 Emil 的真正技巧&lt;/li&gt;
  &lt;li&gt;尝试改变一下曲子的一些音，节奏，加上自己的一些想法&lt;/li&gt;
&lt;/ol&gt;

&lt;hr data-content=&quot; 做的不错的 &quot; /&gt;

&lt;ol&gt;
  &lt;li&gt;带着节拍器进行录音，节奏感觉还比较稳&lt;/li&gt;
  &lt;li&gt;有了前面的失败的录制经验之后，之后录制的时候还比较放松&lt;/li&gt;
&lt;/ol&gt;

&lt;hr data-content=&quot; 下次录音我会尝试的 &quot; /&gt;

&lt;ol&gt;
  &lt;li&gt;尝试分段录制&lt;/li&gt;
  &lt;li&gt;尝试不同的速度练习，对应有问题的部分着重练习&lt;/li&gt;
&lt;/ol&gt;

&lt;hr data-content=&quot; 思考 &quot; /&gt;

&lt;ol&gt;
  &lt;li&gt;其实 emil 的曲子练习多了之后，发现他其实很强调曲子的整体的律动感觉，会让你觉得曲子比较简单，但是在一些细节上处理不好之后，整个曲子就会变了味道&lt;/li&gt;
  &lt;li&gt;对于和弦，乐理，速度，花里胡哨的技巧而言，没有什么比 &lt;strong&gt;稳定的节拍，干净的演奏，合适的律动&lt;/strong&gt; 更重要了，要多注重自己的节拍的稳定性 和 音符的稳定性 上面&lt;/li&gt;
&lt;/ol&gt;</content><author><name>dengqinghua</name></author><category term="music" /><summary type="html"></summary></entry><entry><title type="html">pulsar 队列实践</title><link href="https://dengqinghua.github.io/queue.html" rel="alternate" type="text/html" title="pulsar 队列实践" /><published>2021-08-16T00:00:00+08:00</published><updated>2021-08-16T00:00:00+08:00</updated><id>https://dengqinghua.github.io/queue</id><content type="html" xml:base="https://dengqinghua.github.io/queue.html">&lt;h2 id=&quot;architecture&quot;&gt;Architecture&lt;/h2&gt;
&lt;h3 id=&quot;架构&quot;&gt;架构&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/pul-system-architecture.png&quot; alt=&quot;pul-system-architecture.png&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;消息订阅方式&quot;&gt;消息订阅方式&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/pul-subscription-modes.png&quot; alt=&quot;pul-subscribe&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;消息的生命周期&quot;&gt;消息的生命周期&lt;/h3&gt;

&lt;div class=&quot;mermaid&quot;&gt;
graph LR;
  produce(生产数据)
  consumer(被不同的消费者, 并进行 ACK);
  expire(过期 和 清理);
  produce--&amp;gt;consumer--&amp;gt;expire
&lt;/div&gt;

&lt;p&gt;更多消息相关, 见 &lt;a href=&quot;http://pulsar.apache.org/docs/en/concepts-messaging&quot;&gt;这里&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;event-和-元数据&quot;&gt;Event 和 元数据&lt;/h2&gt;
&lt;h3 id=&quot;event-治理&quot;&gt;Event 治理&lt;/h3&gt;
&lt;p&gt;在 Ease 的后端服务中, 我们是通过 &lt;a href=&quot;https://gitlab.easeprime.com/ease/lib-box/-/tree/master/common-lib/src/main/java/com/easeprime/bfs/common/event&quot;&gt;common-lib&lt;/a&gt; 包进行封装和处理的&lt;/p&gt;

&lt;p&gt;该部分的组织形式如下&lt;/p&gt;

&lt;div class=&quot;mermaid&quot;&gt;
graph LR;
  subgraph 消费者
  eventConsumer(eventConsumer);
  h1(handler1);
  h2(handler2);
  event2(&quot;onEvent(event)&quot;)
  eventConsumer--&amp;gt;h1 &amp;amp; h2 --&amp;gt; event2
  end

  subgraph 生产者
  eventProducer(eventProducer);
  pulsar1(Topic: pulsar-media);
  event1(SendEvent)
  eventProducer--&amp;gt;pulsar1--&amp;gt;event1
  end

  subgraph 事件定义
  event(event)
  payload(payload)
  eventType(eventType);
  eventCode(eventCode);
  desc(desc);
  event--&amp;gt;eventType &amp;amp; payload
  eventType--&amp;gt;eventCode &amp;amp; desc;
  end
&lt;/div&gt;

&lt;p&gt;当用户完成一个音频的播放时候的操作&lt;/p&gt;

&lt;div class=&quot;mermaid&quot;&gt;
graph LR;
  subgraph 消费者
  eventConsumer(eventConsumer);
  h1(DE完播计算 handler);
  h2(用户播放数据缓存刷新 handler);
  h3(XXX Handler);
  eventConsumer--&amp;gt;h1 &amp;amp; h2 &amp;amp; h3
  end

  subgraph 生产者
  eventProducer(eventProducer);
  pulsar1(Topic: media);
  event1(发送事件: MEDIA_LOG_FINISH)
  eventProducer--&amp;gt;pulsar1--&amp;gt;event1
  end

  subgraph 音频播放完成事件
  event(event)
  payload(MediaLogFinishPayload)
  payload1(mediaId)
  payload2(memberId)
  payload3(playTo)
  eventType(MEDIA_LOG_FINISH);
  event--&amp;gt;eventType &amp;amp; payload
  payload --&amp;gt; payload1 &amp;amp; payload2 &amp;amp; payload3
  end
&lt;/div&gt;

&lt;h3 id=&quot;元数据&quot;&gt;元数据&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;orderingKey&lt;/p&gt;

    &lt;p&gt;这里支持传 orderingKey, 用来作为 有序消费。我们经常的场景是: 同一个用户id 的某种类型数据，希望可以有序地消费&lt;/p&gt;

    &lt;p&gt;比如用户的统计数据, 如果是队列本身可以保证有序, 则大概率是有序的, 可以避免过多的数据库的锁竞争问题&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;消费次数和消息丢失的问题&lt;/p&gt;

    &lt;p&gt;pulsar 理论上是 &lt;code class=&quot;highlighter-rouge&quot;&gt;at-least-once semantics&lt;/code&gt;, 一些重要的业务需要自己能保证是可重复执行的&lt;/p&gt;

    &lt;p&gt;更多内容见 &lt;a href=&quot;https://pulsar.apache.org/docs/en/2.7.1/concepts-messaging/&quot;&gt;concepts-messaging&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;事件和事务的问题&lt;/p&gt;

    &lt;p&gt;有时候会因为业务本身的复杂性, 在很多个业务逻辑的 上下文，都会发送对应的事件&lt;/p&gt;

    &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;nd&quot;&gt;@Transactional&lt;/span&gt;
 &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;doSth&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;c1&quot;&gt;// ① 更新用户信息&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;updateMember&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;sendMemberUpdateEvent&lt;/span&gt;

   &lt;span class=&quot;c1&quot;&gt;// ② 更新Vip状态&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;updateMemberVip&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;sendMemberVipUpdateEvent&lt;/span&gt;

   &lt;span class=&quot;c1&quot;&gt;// ③ 记录日志&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;updateMemberVipLog&lt;/span&gt;
 &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;如果上面在 ③  记录日志的时候报错了，那么会导致 ①  和 ②  回滚, 此时事件理论上被发出去了, 会导致其他的业务逻辑的问题。&lt;/p&gt;

    &lt;p&gt;故这里发送事件的逻辑专门进行了处理。注意&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;所有的事件，都是在 事务提交 之后，才会进行发送。&lt;/p&gt;
    &lt;/blockquote&gt;

    &lt;p&gt;代码实现逻辑见&lt;a href=&quot;https://gitlab.easeprime.com/ease/lib-box/-/blob/master/common-lib/src/main/java/com/easeprime/bfs/common/event/AbstractEventProducer.java#L61&quot;&gt;这里&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;部署方式&quot;&gt;部署方式&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/pul-deploy1.png&quot; alt=&quot;deploy1&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;如何跟踪和查询&quot;&gt;如何跟踪和查询&lt;/h2&gt;
&lt;p&gt;方式1: 根据用户id 或者 deviceId 进行&lt;a href=&quot;https://es-ras1ax3s.kibana.tencentelasticsearch.com:5601/goto/71238f43bd59b8022e7ee9f67238eb45&quot;&gt;查询&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/pul-example1.png&quot; alt=&quot;example1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;方式2: 查看用户的消费 &lt;a href=&quot;https://es-ras1ax3s.kibana.tencentelasticsearch.com:5601/app/discover#/context/5a116e80-b931-11eb-83c7-d711353ac049/toW5UnsBQlxvtLDU4s7e?_g=(filters:!())&amp;amp;_a=(columns:!(message,container.name),filters:!(('$state':(store:appState),meta:(alias:!n,disabled:!t,index:'5a116e80-b931-11eb-83c7-d711353ac049',key:container.name,negate:!t,params:(query:dev_backend_service_8881),type:phrase),query:(match_phrase:(container.name:dev_backend_service_8881))),('$state':(store:appState),meta:(alias:!n,disabled:!t,index:'5a116e80-b931-11eb-83c7-d711353ac049',key:container.name,negate:!t,params:(query:dev_backend_service_8880),type:phrase),query:(match_phrase:(container.name:dev_backend_service_8880)))))&quot;&gt;上下文&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/pul-example2.png&quot; alt=&quot;example2&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;reference&quot;&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://pulsar.apache.org/docs/en/2.3.2/concepts-messaging/&quot;&gt;Pulsar Messaging&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.confluent.io/kafka-vs-pulsar/&quot;&gt;Kafka vs. Pulsar vs. RabbitMQ: Performance, Architecture, and Features Compared&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.confluent.io/blog/kafka-fastest-messaging-system/&quot;&gt;Benchmarking Apache Kafka, Apache Pulsar, and RabbitMQ: Which is the Fastest?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/182573701&quot;&gt;Pulsar 与 Kafka 全方位对比（上篇）：功能、性能、用例&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/61525447/apache-pulsar-message-delivery-semantics&quot;&gt;Apache Pulsar Message Delivery Semantics&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>dengqinghua</name></author><summary type="html">Architecture 架构</summary></entry><entry><title type="html">录音相关的思考</title><link href="https://dengqinghua.github.io/r1.html" rel="alternate" type="text/html" title="录音相关的思考" /><published>2021-07-30T00:00:00+08:00</published><updated>2021-07-30T00:00:00+08:00</updated><id>https://dengqinghua.github.io/r1</id><content type="html" xml:base="https://dengqinghua.github.io/r1.html">&lt;blockquote&gt;
  &lt;p&gt;如何提高录音的效率？多练习基本功，提高专注度，多听，多感受…&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;录音&quot;&gt;录音&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;一定要跟着节拍器慢速练习，无任何呲音和其他的问题时，再进行录音&lt;/li&gt;
  &lt;li&gt;如果在 &lt;strong&gt;30分钟&lt;/strong&gt; 内未完成一次完整的录音，则放弃录音并再进行练习&lt;/li&gt;
  &lt;li&gt;一次的录音时间控制在 &lt;strong&gt;60分钟&lt;/strong&gt; 内&lt;/li&gt;
  &lt;li&gt;在录音之前，不能持续弹奏时间超过 &lt;strong&gt;30分钟&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;练习&quot;&gt;练习&lt;/h2&gt;
&lt;h3 id=&quot;基本功&quot;&gt;基本功&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;爬格子, 保留指 慢速&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;./boxed-penatonic&quot;&gt;音阶, box penatonic&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;./chord-inversion&quot;&gt;和弦, chord inversion&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://pan.baidu.com/disk/home#/all?vmode=list&amp;amp;path=%2F42%2F%E9%9F%B3%E4%B9%90%2F%E6%95%99%E6%9D%90%2FProGuitar%2FopenStringLick&quot;&gt;open string licks&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://pan.baidu.com/disk/home#/all?vmode=list&amp;amp;path=%2F42%2F%E9%9F%B3%E4%B9%90%2F%E6%95%99%E6%9D%90%2FProGuitar%2FbanjoRolls&quot;&gt;banjo rolls&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://pan.baidu.com/disk/home#/all?vmode=list&amp;amp;path=%2F42%2F%E9%9F%B3%E4%B9%90%2F%E6%95%99%E6%9D%90%2FProGuitar%2Fharmonic&quot;&gt;harp harmonics&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://pan.baidu.com/disk/home#/all?vmode=list&amp;amp;path=%2F42%2F%E9%9F%B3%E4%B9%90%2F%E6%95%99%E6%9D%90%2FProGuitar%2FArp&quot;&gt;arppeggio&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;曲子&quot;&gt;曲子&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;多听原曲，在练习的时候一定要多听原曲，感受原曲的律动&lt;/li&gt;
  &lt;li&gt;节拍器是必须的，要尝试多种不同的速度进行演奏, 看自己的极限在哪里&lt;/li&gt;
  &lt;li&gt;练习的时候就进行录音，不是整块的录音而是录片段（不需要视频，只是录音）&lt;/li&gt;
  &lt;li&gt;不熟练的地方一定要反复练习, 现阶段主要包括
    &lt;ul&gt;
      &lt;li&gt;和弦转换, 不能太快也不能太慢，保留音要做好&lt;/li&gt;
      &lt;li&gt;切音的时值, 控制好对应的时值&lt;/li&gt;
      &lt;li&gt;勾弦问题，勾弦一定要有力而且均匀，需要经常练习&lt;/li&gt;
      &lt;li&gt;速度问题，需要每个音都弹得很清晰&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;将自己已经录音过的曲子也放入到练习中, 并且尝试改变其中的音，节奏, 和弦, key 和 速度&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;混音&quot;&gt;混音&lt;/h2&gt;
&lt;p&gt;LogicPro&lt;/p&gt;</content><author><name>dengqinghua</name></author><summary type="html">如何提高录音的效率？多练习基本功，提高专注度，多听，多感受…</summary></entry><entry><title type="html">推荐系统学习笔记</title><link href="https://dengqinghua.github.io/recommend-sys.html" rel="alternate" type="text/html" title="推荐系统学习笔记" /><published>2021-07-29T00:00:00+08:00</published><updated>2021-07-29T00:00:00+08:00</updated><id>https://dengqinghua.github.io/recommend-sys</id><content type="html" xml:base="https://dengqinghua.github.io/recommend-sys.html">&lt;h2 id=&quot;基本方式&quot;&gt;基本方式&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;基于行为的协同过滤&lt;/p&gt;

    &lt;p&gt;你选择了A, 跟 A 相似的东西会推荐给你&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;基于内容相似推荐&lt;/p&gt;

    &lt;p&gt;你选择了A, 跟 A 属于相同类别的东西会推荐给你&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;解决的问题&quot;&gt;解决的问题&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;信息过载。是帮用户从非常多的数据中(比如上千万的商品)选择&lt;/li&gt;
  &lt;li&gt;挖掘长尾。长尾一般是冷门数据，冷门数据的总和往往比热门数据要多，冷门数据也具有非常大的价值&lt;/li&gt;
  &lt;li&gt;用户体验。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;环节&quot;&gt;环节&lt;/h2&gt;
&lt;p&gt;问题: 从海量数据中，提取和用户相关的十几条数据，并且在 XXX ms 内返回&lt;/p&gt;

&lt;div class=&quot;mermaid&quot;&gt;
graph LR;
  input([原始数据 &lt;br /&gt; 亿/千万])
  callback(召回 &lt;br /&gt;万/千);
  sort(排序 &lt;br /&gt;千/百);
  filter(调整 &lt;br /&gt;百/十);
  output([结果 &lt;br /&gt; 十])
  input--&amp;gt;callback--&amp;gt;sort--&amp;gt;filter--&amp;gt;output
&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;召回解决了信息过载的问题，将数量级极大地降低&lt;/li&gt;
  &lt;li&gt;排序可以使用二分算法, 得出用户是否喜欢(喜欢1 不喜欢为0) 和 喜欢的概率, 这样就能得到权重
    &lt;blockquote&gt;
      &lt;p&gt;如果数量不大, 则可以绕过召回阶段, 直接进行排序&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;调整做到了 去重, 已读过滤/在线过滤, 热门补足, 分页 和 合并内容信息等&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;召回路劲&quot;&gt;召回路劲&lt;/h3&gt;
&lt;p&gt;名词解释&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;u: user, 用户&lt;/li&gt;
  &lt;li&gt;i: item&lt;/li&gt;
  &lt;li&gt;2: to, 代表的是边&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;u2i 代表的是 user to item&lt;/p&gt;

&lt;div class=&quot;mermaid&quot;&gt;
graph LR;
  user(用户)
  item(item);
  user--&amp;gt;item
&lt;/div&gt;

&lt;p&gt;推荐系统解决的是 用户如何找到 item&lt;/p&gt;

&lt;div class=&quot;mermaid&quot;&gt;
graph LR;
  user(用户)
  unkown(...);
  item(item);
  user--&amp;gt;unkown--&amp;gt;item
&lt;/div&gt;

&lt;p&gt;这里提出了召回方式&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;路劲&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;解释&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;例子&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;方法&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;i2i&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;你看了itemA,推荐给你itemB&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;头条的相似文章推荐&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;item相似度, 协同过滤 和 关联规则(比如人工标注)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;u2i&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;用户的直接行为&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;点击过的内容但是未购买的商品, 很容易产生购买行为&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;用户行为数据&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;u2i2i&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;将 u2i 得到的结果, 推荐给新的用户&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;N/A&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;u2u2i&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;用户聚类，获得相似的用户，再根据用户的推荐给当前用户&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;相同年龄/性别的用户, 相同点击行为的用户推荐相似的内容&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;用户聚类, 用户行为，来进行 u2u 部分&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;u2tag2i&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;先算出用户的tag, 在匹配 tag 和 item 的关系&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;豆瓣, B站的 tag, tag效果比较好, 内容不会扩展&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;u2***2i&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;基于图的算法&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;netflix推荐架构&quot;&gt;Netflix推荐架构&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;assets/images/netflix_framework.png&quot; alt=&quot;framework&quot; width=&quot;80%&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Offline, 计算离线数据, 一般提供 小时/天/月 级别的数据
    &lt;ul&gt;
      &lt;li&gt;海量数据存储和计算&lt;/li&gt;
      &lt;li&gt;离线计算&lt;/li&gt;
      &lt;li&gt;机器学习和模型训练&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Nearline, 利用离线数据和当前的实时数据, 计算当前的热数据和 TopN 数据等，存储到缓存中
    &lt;ul&gt;
      &lt;li&gt;接收实时事件&lt;/li&gt;
      &lt;li&gt;计算实时数据并写入缓存&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Online, 直接面向外部提供接口, 一般是直接从 Nearline 的缓存存储中拿到数据返回, 有时延要求
    &lt;ul&gt;
      &lt;li&gt;分发用户事件&lt;/li&gt;
      &lt;li&gt;组装缓存中的数据&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;如果是数据不大的话，可以考虑只有两层, Online 和 Offline, Offline 直接将结果写入告诉缓存即可&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;技术架构&quot;&gt;技术架构&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Offline&lt;/li&gt;
  &lt;li&gt;Nearline&lt;/li&gt;
  &lt;li&gt;Online&lt;/li&gt;
  &lt;li&gt;存储
    &lt;ul&gt;
      &lt;li&gt;redis&lt;/li&gt;
      &lt;li&gt;memcache&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;超时处理, 兜底补足&lt;/li&gt;
  &lt;li&gt;本地LRU缓存&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;基于内容的推荐content-based&quot;&gt;基于内容的推荐(content-based)&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;给用户推荐 之前喜欢过的物品, 以及相似的物品。 即 u2i2i 和 u2Tag2i, 仅分析单用户本身, 用户和用户之间的行为互不干涉和影响&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;mermaid&quot;&gt;
graph TB
    subgraph 用户
    action(偏好);
    action1(点赞 &lt;br /&gt;权重 2);
    action2(收藏 &lt;br /&gt;权重 3);
    action3(播放 &lt;br /&gt;权重 1);
    aa(偏好向量 &lt;br /&gt;故事3 白噪声2 ... );
    action --&amp;gt; action1 &amp;amp; action2 &amp;amp; action3--&amp;gt;aa
    end
    subgraph 内容
    taged(特征 &lt;br /&gt;故事/白噪音/仙侠);
    t1(故事 &lt;br /&gt;权重 2);
    t2(音乐 &lt;br /&gt;权重 3);
    t3(白噪声 &lt;br /&gt;权重 1);
    bb(特征向量 &lt;br /&gt;故事3 白噪声4 ... );
    taged --&amp;gt; t1 &amp;amp; t2 &amp;amp; t3--&amp;gt;bb
    end
    subgraph 推荐
    cc(推荐的内容列表 &lt;br /&gt; 利用余弦相似度算法计算TopN物品)
    end
    aa --&amp;gt; cc
    bb --&amp;gt; cc
&lt;/div&gt;

&lt;p&gt;余弦相似度计算, 计算向量和向量之间的距离&lt;/p&gt;

&lt;p&gt;优点：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;只需要单个用户的信息，用户和用户之间没有关联&lt;/li&gt;
  &lt;li&gt;可以推荐最新的或者冷门的物品&lt;/li&gt;
  &lt;li&gt;容易做解释&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;缺点&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;内容标签需要人工打&lt;/li&gt;
  &lt;li&gt;用户的潜在兴趣无法挖掘&lt;/li&gt;
  &lt;li&gt;全新用户没法推荐(冷启动问题)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;落地方案&quot;&gt;落地方案&lt;/h3&gt;

&lt;div class=&quot;mermaid&quot;&gt;
graph TB
    subgraph Offline
      storage1(存储1 &lt;br /&gt; MySQL);
      storage2(存储2 &lt;br /&gt; ES ?);
      storage3(存储3 &lt;br /&gt; ...);
      cal(计算用户和内容的匹配度 &lt;br /&gt;余弦相似度, 皮尔逊相关系数 和 Jaccard);
      cache(缓存 &lt;br /&gt;Redis);
    end
    subgraph Nearline
      EventHandler(事件收集 &lt;br /&gt; EventListener 或者 Redis);
    end
    subgraph Online
      event1(用户行为事件 &lt;br /&gt; 收藏 播放 分享 ...);
      event2(新内容发布);
      fetch(获取推荐的内容TopN数据);
      do(聚合和处理);
    end

    event1 &amp;amp; event2--&amp;gt;EventHandler--&amp;gt;storage1 &amp;amp; storage2 &amp;amp; storage3--&amp;gt;cal--&amp;gt;cache--&amp;gt;fetch--&amp;gt;do
&lt;/div&gt;

&lt;p&gt;考虑点&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;基于当前的业务量和数据, 尽量使用简单的方式, 不引入新的中间件和非常重的框架(所以这里不会考虑引入 kafka, Spark 等工具)&lt;/li&gt;
  &lt;li&gt;计算路劲足够快和有效, 但是需要有超时设计&lt;/li&gt;
  &lt;li&gt;需要考虑是否应该有数据补足和兜底方案，在新用户进入的时候，提供一批系统预设的数据(解决冷启动问题)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;备选方案&quot;&gt;备选方案&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;直接按照需求直接读库实时计算&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;基于协同的推荐cf-collaborative-filtering&quot;&gt;基于协同的推荐(CF, Collaborative Filtering)&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;使用行为数据，利用集体智慧，即 用户和用户的行为，物品和物品之间相互交叉和干涉，主要包括 u2u2i 和 u2i2i&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;u2u2i: user1喜欢 x1, user2也喜欢 x1; 那么user1喜欢的 x2 可以推荐给 user2&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;u2i2i: user1喜欢 x1, x1 和 x2 很相似; 那么 可以推荐 x2 给 user1.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;下面的例子: 用户A，B，C 已经对部分 item 进行了打分, 现在要给 用户A 的 item 进行排序 和 推荐&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;用户/item的评分&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;item1&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;item2&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;item3&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;item4&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;item5&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;item6&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;item7&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;用户A&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;8分&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;3分&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;?&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;?&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;?&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;?&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2分&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;用户B&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;7分&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;10分&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;3分&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;?&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;8分&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;9分&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;?&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;用户C&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;8分&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1分&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;8分&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;10分&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2分&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;?&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;8分&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;通过协同过滤的方式如下&lt;/p&gt;

&lt;div class=&quot;mermaid&quot;&gt;
graph TB
    uu(搜索和用户A和用户B, C的 相似度);
    ii(根据相似度, 估算用户A 在新item3和item4的分数);
    uu --&amp;gt; ii
&lt;/div&gt;

&lt;p&gt;相似度计算&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Jaccard相似度&lt;/li&gt;
  &lt;li&gt;余弦相似度&lt;/li&gt;
  &lt;li&gt;皮尔逊相关系数, Pearson’s r&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;ref&quot;&gt;Ref&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.bilibili.com/video/BV1Dz411B7wd&quot;&gt;推荐系统学习视频&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://netflixtechblog.com/system-architectures-for-personalization-and-recommendation-e081aa94b5d8&quot;&gt;Netflix 推荐系统架构&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/fxsjy/jieba&quot;&gt;中文分词&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://ai.tencent.com/ailab/nlp/en/embedding.html&quot;&gt;Tencent Word2Vec&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://spark.apache.org/docs/2.2.3/ml-features.html&quot;&gt;Spark ML features&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>dengqinghua</name></author><summary type="html">基本方式</summary></entry><entry><title type="html">Apple Pay</title><link href="https://dengqinghua.github.io/apple-pay.html" rel="alternate" type="text/html" title="Apple Pay" /><published>2021-07-28T00:00:00+08:00</published><updated>2021-07-28T00:00:00+08:00</updated><id>https://dengqinghua.github.io/apple-pay</id><content type="html" xml:base="https://dengqinghua.github.io/apple-pay.html">&lt;div class=&quot;mermaid&quot;&gt;
sequenceDiagram
    autonumber
    participant sdk as iOS SDK
    participant b as Backend
    participant as as Apple Service
    sdk-&amp;gt;&amp;gt;b: 获取商品列表
    b--&amp;gt;&amp;gt;sdk: 从后台获取商品id和对应展示的图片文案信息
    sdk-&amp;gt;&amp;gt;b: 根据商品id 生成/获取预订单
    Note right of sdk: 需要先去查一下这个用户在商品id下之前是不是有未完成的订单
    b--&amp;gt;&amp;gt;sdk: 返回 订单sid
    sdk-&amp;gt;&amp;gt;as: 发起真实的支付
    as--&amp;gt;&amp;gt;sdk: 用户支付, 苹果返回票据信息(receipt-data)&lt;br /&gt;如果苹果未返回, 则在 App 启动的时候返回
    sdk-&amp;gt;&amp;gt;b: 提交票据信息和 订单sid 到服务端
    Note right of sdk: 这一步容易丢单, 如何解决? &lt;br /&gt;因为苹果容易丢失掉订单sid &lt;br /&gt;需要取未完成的一条
    b-&amp;gt;&amp;gt;as: 验证票据信息
    as--&amp;gt;&amp;gt;b: 验证成功/失败
    b--&amp;gt;&amp;gt;sdk: 修改订单状态, 并通知SDK支付成功或失败
    sdk--&amp;gt;&amp;gt;as: 成功则将订单进行关闭
&lt;/div&gt;

&lt;p&gt;连续订阅&lt;/p&gt;

&lt;div class=&quot;mermaid&quot;&gt;
graph LR;
    pay([用户签订协议, 获取 receipt]);
    receipt([记录 订单 和 receipt]);
    verify([建议每天都拿receipt去苹果那边验证]);
    getNotDelay([发现有未过期的订单信息])
    success([扣款成功])
    pay--&amp;gt;receipt--&amp;gt;verify--&amp;gt;getNotDelay--&amp;gt;success--&amp;gt;verify
&lt;/div&gt;

&lt;p&gt;需提供的接口:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;商品列表接口&lt;/li&gt;
  &lt;li&gt;创建订单接口&lt;/li&gt;
  &lt;li&gt;提交票据信息接口&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;关键点:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;记录收据信息, 校验收据是否完成&lt;/li&gt;
  &lt;li&gt;订单号没有给的情况，需要自己去找对应的订单&lt;/li&gt;
  &lt;li&gt;收据成功获取之后，需要服务端告诉 收据 的验签结果
    &lt;ul&gt;
      &lt;li&gt;成功, 客户端关单&lt;/li&gt;
      &lt;li&gt;失败, 提供客户端信息&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;参考:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://medium.com/@tyy.sh/in-app-purchase-%E6%80%BB%E7%BB%93-e8a88a54d8d9&quot;&gt;IAP&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://ifumei.cc/2019/12/24/iospay/&quot;&gt;springboot接入苹果内购&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.apple.com/documentation/storekit/original_api_for_in-app_purchase/validating_receipts_with_the_app_store&quot;&gt;苹果校验流程&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.apple.com/videos/play/tech-talks/10887/&quot;&gt;苹果服务端通知&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>dengqinghua</name></author><summary type="html">sequenceDiagram autonumber participant sdk as iOS SDK participant b as Backend participant as as Apple Service sdk-&amp;gt;&amp;gt;b: 获取商品列表 b--&amp;gt;&amp;gt;sdk: 从后台获取商品id和对应展示的图片文案信息 sdk-&amp;gt;&amp;gt;b: 根据商品id 生成/获取预订单 Note right of sdk: 需要先去查一下这个用户在商品id下之前是不是有未完成的订单 b--&amp;gt;&amp;gt;sdk: 返回 订单sid sdk-&amp;gt;&amp;gt;as: 发起真实的支付 as--&amp;gt;&amp;gt;sdk: 用户支付, 苹果返回票据信息(receipt-data)如果苹果未返回, 则在 App 启动的时候返回 sdk-&amp;gt;&amp;gt;b: 提交票据信息和 订单sid 到服务端 Note right of sdk: 这一步容易丢单, 如何解决? 因为苹果容易丢失掉订单sid 需要取未完成的一条 b-&amp;gt;&amp;gt;as: 验证票据信息 as--&amp;gt;&amp;gt;b: 验证成功/失败 b--&amp;gt;&amp;gt;sdk: 修改订单状态, 并通知SDK支付成功或失败 sdk--&amp;gt;&amp;gt;as: 成功则将订单进行关闭</summary></entry></feed>