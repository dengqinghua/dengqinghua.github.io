<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.7">Jekyll</generator><link href="https://dengqinghua.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://dengqinghua.github.io/" rel="alternate" type="text/html" /><updated>2021-11-05T09:18:31+08:00</updated><id>https://dengqinghua.github.io/feed.xml</id><title type="html">Dengqinghua.42</title><subtitle>Everything I think
</subtitle><author><name>dengqinghua</name></author><entry><title type="html">检索技术探索</title><link href="https://dengqinghua.github.io/all-for-search.html" rel="alternate" type="text/html" title="检索技术探索" /><published>2021-09-01T00:00:00+08:00</published><updated>2021-09-01T00:00:00+08:00</updated><id>https://dengqinghua.github.io/all-for-search</id><content type="html" xml:base="https://dengqinghua.github.io/all-for-search.html">&lt;h2 id=&quot;方案设计&quot;&gt;方案设计&lt;/h2&gt;
&lt;h3 id=&quot;可选的搜索方案&quot;&gt;可选的搜索方案&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;方案&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;优点&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;缺点&lt;/th&gt;
      &lt;th&gt;扩展性&lt;/th&gt;
      &lt;th&gt;难度&lt;/th&gt;
      &lt;th&gt;实现方式&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;MySQL&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;接入成本小， 原生的 MySQL 支持简单的全文索引 和 ngram 分词&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;功能&lt;a href=&quot;https://dev.mysql.com/doc/refman/5.7/en/fulltext-restrictions.html&quot;&gt;有限&lt;/a&gt;， 不支持复杂的分词逻辑， 不支持预先设置字段权重&lt;/td&gt;
      &lt;td&gt;⭐️&lt;/td&gt;
      &lt;td&gt;⭐️&lt;/td&gt;
      &lt;td&gt;直接接入并使用 MyBatisPlus 进行查询即可&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;内存(H2)&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;速度快，可使用 &lt;a href=&quot;https://www.h2database.com/html/main.html&quot;&gt;H2&lt;/a&gt; 和 &lt;a href=&quot;http://www.h2database.com/javadoc/index.html&quot;&gt;Lucene&lt;/a&gt; 结合进行检索， 当前数据量大概为 500K， 可考虑全部导入&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;数据量变大之后容易导致 OOM， 需要处理多实例的数据同步问题&lt;/td&gt;
      &lt;td&gt;⭐️⭐️&lt;/td&gt;
      &lt;td&gt;⭐️⭐️⭐️&lt;/td&gt;
      &lt;td&gt;1. 接入 H2&lt;br /&gt; 2. 提供同步更新机制 &lt;br /&gt;3. OOM 优化 &lt;br /&gt;4. 分词优化方案和调试方案&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;ES&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;主流， 满足基本的搜索需求， 丰富的 API， 分词功能支持较好&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;引入第三方组件， 容易造成单点， 服务可靠性无法保证&lt;/td&gt;
      &lt;td&gt;⭐️⭐️⭐️⭐️⭐️&lt;/td&gt;
      &lt;td&gt;⭐️⭐️&lt;/td&gt;
      &lt;td&gt;1. 接入 ES&lt;br /&gt; 2. 实现 ES Wrapper &lt;br /&gt;3. 提供统一的搜索接口&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;例子&quot;&gt;例子&lt;/h3&gt;
&lt;h4 id=&quot;mysql&quot;&gt;MySQL&lt;/h4&gt;
&lt;p&gt;给 media 表的 content 字段 添加全文索引， 这里使用了 &lt;a href=&quot;https://dev.mysql.com/doc/refman/5.7/en/fulltext-search-ngram.html&quot;&gt;ngram&lt;/a&gt; 作为分词器&lt;/p&gt;

&lt;p&gt;分词的字数由 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ngram_token_size&lt;/code&gt; 参数进行控制&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;ALTER&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TABLE&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;`media`&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ADD&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FULLTEXT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;`content`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;WITH&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PARSER&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ngram&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;，&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;content&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;media&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;230&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;，&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;231&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;G&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;***************************&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;row&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;***************************&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;230&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;&quot;description&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;&quot;【为什么失眠】&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n\n\n&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;【专注练习】&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; 为了避免大脑走神，&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;***************************&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;row&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;***************************&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;231&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;&quot;description&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;&quot;描述文案&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;，&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;&quot;title&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;&quot;播放器标题&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;查看匹配的分数， 这里拿了两个 id 作为例子&lt;/p&gt;
&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;，&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AGAINST&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'为什么失眠'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;score&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;media&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;230&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;，&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;231&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;-----+--------------------+&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;score&lt;/span&gt;              &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;-----+--------------------+&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;230&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3379950523376465&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;231&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;                  &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;-----+--------------------+&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rows&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;05&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;mysql&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;，&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AGAINST&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'失眠'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;score&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;media&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;230&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;，&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;231&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;-----+-------------------+&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;score&lt;/span&gt;             &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;-----+-------------------+&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;230&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;675990104675293&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;231&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;                 &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;-----+-------------------+&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;mysql&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;，&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AGAINST&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'眠'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;score&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;media&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;230&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;，&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;231&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;-----+-------+&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;score&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;-----+-------+&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;230&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;     &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;231&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;     &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;-----+-------+&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rows&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;04&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;h2&quot;&gt;H2&lt;/h4&gt;
&lt;p&gt;例子见 &lt;a href=&quot;https://zhuanlan.zhihu.com/p/142833556&quot;&gt;H2 的全文检索功能&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;H2 可以结合 Lucene 一起进行使用， 但是从 API 的设计和扩展性来说，都有比较大的限制，可以作为测试使用，不适合用在生产环境中&lt;/p&gt;

&lt;h4 id=&quot;es&quot;&gt;ES&lt;/h4&gt;
&lt;p&gt;ES 作为专业的搜索引擎，有丰富的功能和 API，在&lt;a href=&quot;./3-month-sharing#elk&quot;&gt;之前&lt;/a&gt;我们便使用了 ELK 做日志相关的收集和查询，
在稳定性和查询速度上面都要对应的保证。&lt;/p&gt;

&lt;p&gt;相比于 MySQL，ES 提供更细粒度的相关度控制(&lt;a href=&quot;https://www.elastic.co/guide/en/app-search/current/relevance-tuning-guide.html&quot;&gt;Relevance Tuning&lt;/a&gt;)， 即可以指定每个字段的搜索权重，例子&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl &lt;span class=&quot;nt&quot;&gt;-X&lt;/span&gt; GET &lt;span class=&quot;s1&quot;&gt;'https://es/search'&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-H&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Content-Type: application/json'&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'{
  &quot;search_fields&quot;: {
    &quot;title&quot;: {
      &quot;weight&quot;: 10
    },
    &quot;description&quot;: {
      &quot;weight&quot;: 1
    },
    &quot;states&quot;: {
      &quot;weight&quot;: 2
    }
  },
  &quot;query&quot;: &quot;mountains&quot;
}'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;对比于 MySQL， 更提供了全套的管理后台，可在 Kibana 进行对应的索引管理和监控等操作&lt;/p&gt;

&lt;p&gt;另外，除了 weight/boost 设置之外， ES 还支持前缀匹配，同义词检索，分词插件等功能，其中 同义词，分词插件 可直接在腾讯云后台中更新&lt;/p&gt;

&lt;h2 id=&quot;落地方案&quot;&gt;落地方案&lt;/h2&gt;
&lt;h3 id=&quot;搜索&quot;&gt;搜索&lt;/h3&gt;

&lt;div class=&quot;mermaid&quot;&gt;
flowchart TD;
    onMemeroy([缓存 获取搜索结果&lt;br /&gt;热词检索/TopK 等]);
    es([es 检索]);
    E([返回搜索结果]);
    E1([返回推荐数据]);
    onMemeroy--&amp;gt;|有结果| E
    onMemeroy--&amp;gt;|无结果| es
    es--&amp;gt;|有结果| E
    es--&amp;gt;|无结果| E1
&lt;/div&gt;

&lt;h3 id=&quot;索引&quot;&gt;索引&lt;/h3&gt;
&lt;p&gt;采用 ES 作为主要的搜索引擎， 通过事件维护索引的更新&lt;/p&gt;

&lt;div class=&quot;mermaid&quot;&gt;
graph LR
    subgraph 查询
      cache(内存);
      es(ES API);
    end
    subgraph 索引更新
      EventHandler(Pulsa队列);
      storage1(存储1 &lt;br /&gt; ES-主查询引擎);
      storage2(存储2 &lt;br /&gt; 内存-热词,TopK 等信息);
    end
    subgraph 源数据事件
      event1(单曲/合集/QE/DE 更新);
      event2(老师更新);
      event3(标签更新);
    end
    subgraph 宽表 Schema
      field(索引字段);
      weight(搜索权重值);
    end

    event1 &amp;amp; event2 &amp;amp; field &amp;amp; weight--&amp;gt;EventHandler--&amp;gt;storage1 &amp;amp; storage2;
    cache--&amp;gt;storage1;
    es--&amp;gt;storage2;
&lt;/div&gt;

&lt;h3 id=&quot;部署&quot;&gt;部署&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;如果采用 H2 作为搜索引擎， 为了服务的简单行来说，需要考虑 &lt;strong&gt;新建项目&lt;/strong&gt;， 而且需要维护好数据更新的问题&lt;/li&gt;
  &lt;li&gt;如果使用 ES 或者 MySQL 作为搜索引擎， 则可不需要考虑单独起项目，在原有项目上开发即可&lt;/li&gt;
  &lt;li&gt;无论使用哪一种方案，都需要将搜索服务部署到单独的服务器中，通过 Nginx 的二级域名进行流量转发和分流处理， 该部分在 Nginx 层控制即可&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;任务分析&quot;&gt;任务分析&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;热词维护&lt;/p&gt;

    &lt;p&gt;后台配置，存储 MySQL，使用 guava cache，全量缓存 热词对应的id 至 内存中&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;索引维护&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;确定可供搜索的字段来源&lt;/li&gt;
      &lt;li&gt;字段更新之后，需要发送对应的事件，使得 ES 进行索引的更新&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;搜索&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;优先匹配 热词， 该部分直接从缓存中获取&lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;热词中不存在时， 则使用 ES 进行查询&lt;/p&gt;

        &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;QueryBuilders&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;multiMatchQuery&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;搜索词&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;fields&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;词汇1&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;，&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;词汇2&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;冷启动数据&lt;/p&gt;

    &lt;p&gt;未获取到搜索结果时处理如下:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;如果是搜索 es 未找到对应的数据结果， 则使用 人工配置的 推荐数据&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;搜索词数据统计&lt;/p&gt;

    &lt;p&gt;logstash 收集搜索相关的词， 下面的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;searchQ&lt;/code&gt; 为搜索的词汇&lt;/p&gt;

    &lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;grok&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;message&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'%{TIMESTAMP_ISO8601:reqTime}  %{GREEDYDATA} params =[{&quot;q&quot;:%{searchQ}}] %{GREEDYDATA}time cost = %{NUMBER:reqCostMs} ms'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;mutate&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;convert&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;reqCostMs&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;integer&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;date&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;reqTime&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;，&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;ISO8601&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;，&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;YYYY-MM-dd HH:mm:ss&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;，&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;YYYY-MM-dd HH:mm:ss.ZZZ&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;reqTime&quot;&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;locale&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;en&quot;&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;数据全量索引&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;数据统计&lt;/p&gt;

    &lt;p&gt;对于数据而言，常见的是 哪些词被经常搜索？搜索的结果的相关度怎么样？搜索的结果有多少人进行了点击？(CTR 是多少)&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;assets/images/search_result_example.png&quot; alt=&quot;search_result_example&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;其他的优化&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;分词优化，考虑使用不同的分词引擎(如 ik， ngram 等)&lt;/li&gt;
      &lt;li&gt;同义词优化，配置对应的同义词进行检索优化&lt;/li&gt;
      &lt;li&gt;拼音，错别字纠正&lt;/li&gt;
      &lt;li&gt;搜索词补全&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;演进计划&quot;&gt;演进计划&lt;/h3&gt;

&lt;div class=&quot;mermaid&quot;&gt;
graph LR;
  input1([原始数据1 &lt;br /&gt; 亿/千万])
  input2([原始数据2 &lt;br /&gt; 亿/千万])
  input3([原始数据... &lt;br /&gt; 亿/千万])
  callback(召回 &lt;br /&gt;万/千);
  sort(归并排序 &lt;br /&gt;千/百);
  filter(调整 &lt;br /&gt;百/十);
  output([结果 &lt;br /&gt; 十])
  input1 &amp;amp; input2 &amp;amp; input3--&amp;gt;callback--&amp;gt;sort--&amp;gt;filter--&amp;gt;output
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/netflix_framework.png&quot; alt=&quot;framework&quot; /&gt;&lt;/p&gt;

&lt;p&gt;更多内容见 &lt;a href=&quot;/recommend-sys.html#技术架构&quot;&gt;推荐系统探索&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;检索基础理论&quot;&gt;检索基础理论&lt;/h2&gt;
&lt;p&gt;需要关注下面几点&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;快速的缩小检索范围
    &lt;ul&gt;
      &lt;li&gt;二分查找法， 缩小一半&lt;/li&gt;
      &lt;li&gt;跳表， 跳动步长 &amp;gt; 1&lt;/li&gt;
      &lt;li&gt;B/B+树， 以磁盘片为步长，一次过滤掉一个(4K)或者多个快&lt;/li&gt;
      &lt;li&gt;位图/Hash/布隆过滤器， 利用概率/数组下标 快速寻找或者判断元素&lt;/li&gt;
      &lt;li&gt;Roaring Bitmap， 高位存储 bucket 信息，低位存储位图信息&lt;/li&gt;
      &lt;li&gt;TopK &amp;amp; 非精准 TopK&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;利用存储、访问特性进行检索优化， 估算内存和磁盘的空间占比， 减少磁盘IO(磁盘)， 利用磁盘的顺序读， 避免随机读
    &lt;ul&gt;
      &lt;li&gt;B+ 树&lt;/li&gt;
      &lt;li&gt;日志记录使用 LSM 树&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;空间冗余换取时间
    &lt;ul&gt;
      &lt;li&gt;跳表， 冗余步长&lt;/li&gt;
      &lt;li&gt;AVL， 冗余叶子高度信息&lt;/li&gt;
      &lt;li&gt;倒排索引&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;缓存
    &lt;ul&gt;
      &lt;li&gt;热点数据使用 LRU 缓存&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在工业界中，往往会几个算法组合起来进行使用，如使用跳表来实现 posting-list， 两个 posting-list 求交集的时候，直接将小的那个变成 Hash 等&lt;/p&gt;

&lt;p&gt;另外，要注意两点&lt;/p&gt;

&lt;blockquote&gt;

  &lt;ol&gt;
    &lt;li&gt;内存的检索效率比磁盘高许多，因此，能加载到内存中的数据，我们要尽可能加载到内存中。&lt;/li&gt;
    &lt;li&gt;大数据集合拆成小数据集合处理(快速缩小检索范围)&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/speed-in-2020.png&quot; alt=&quot;speed-in-2020.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;参考: &lt;a href=&quot;https://colin-scott.github.io/personal_website/research/interactive_latency.html&quot;&gt;数字&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;更新策略&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Double Buffer， 利用冗余减少更新频率&lt;/li&gt;
  &lt;li&gt;全量(只读) + 增量更新(可读可写)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;指导思想&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;索引和数据分离&lt;/li&gt;
  &lt;li&gt;减少磁盘IO&lt;/li&gt;
  &lt;li&gt;读写分离， 避免锁&lt;/li&gt;
  &lt;li&gt;分层处理 (非精准 TopK -&amp;gt; TopK)， 搜索降级&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;es-实战&quot;&gt;ES 实战&lt;/h2&gt;
&lt;h3 id=&quot;基本概念&quot;&gt;基本概念&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Document Metadata
    &lt;ul&gt;
      &lt;li&gt;_index 索引名称&lt;/li&gt;
      &lt;li&gt;_type 索引类型 7.0版本中只对应一个 type， 为 _doc&lt;/li&gt;
      &lt;li&gt;_score 相关性打分&lt;/li&gt;
      &lt;li&gt;_source 数据， 为 JSON 格式&lt;/li&gt;
      &lt;li&gt;_version 更新的版本&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Mapping 字段类型定义&lt;/li&gt;
  &lt;li&gt;Setting 部署方式定义&lt;/li&gt;
  &lt;li&gt;Data node 存储数据的 node&lt;/li&gt;
  &lt;li&gt;Coordinating node 分发节点， 并发将请求拆分到不同的节点进行查询&lt;/li&gt;
  &lt;li&gt;Primary/Replica Shard 主/副本分片&lt;/li&gt;
  &lt;li&gt;green， yellow &amp;amp; red 绿色代表主/副本分片均正常， 黄色代表副本分片不正常， 红色代表主分片不正常&lt;/li&gt;
  &lt;li&gt;put 文档&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;devtools&quot;&gt;DevTools&lt;/h3&gt;
&lt;p&gt;假设索引名称为 es_media&lt;/p&gt;

&lt;p&gt;索引信息查询&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 查看 mapping 和 setting 信息&lt;/span&gt;
GET /es_media
&lt;span class=&quot;c&quot;&gt;# 查询总数&lt;/span&gt;
GET /es_media/_count
&lt;span class=&quot;c&quot;&gt;# 搜索内容 并查看分数&lt;/span&gt;
POST /es_media/_search
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;cat 查询&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 查看所有的索引信息&lt;/span&gt;
GET /_cat/indices
&lt;span class=&quot;c&quot;&gt;# 查看所有的分片信息&lt;/span&gt;
GET /_cat/shards
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;集群信息&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;GET /_cluster/health
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;增删查改操作&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 创建记录&lt;/span&gt;
POST /es_media/_doc
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;1&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 更新或者创建 id=1024的记录， 该部分删除原有的索引进行重建&lt;/span&gt;
PUT /es_media/_doc/1024
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;1&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 更新索引&lt;/span&gt;
POST /es_media/_update/1024
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;doc&quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;internalName&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;this is new&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

GET /es_media/_doc/1024

&lt;span class=&quot;c&quot;&gt;# 批量操作&lt;/span&gt;
POST /_bulk
&lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 批量获取操作&lt;/span&gt;
GET /_mget
&lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 批量查询&lt;/span&gt;
GET /_msearch
&lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;分词器&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;GET /_analyze
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;analyzer&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;standard&quot;&lt;/span&gt;，
  &lt;span class=&quot;s2&quot;&gt;&quot;text&quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;今天是个好的日志&quot;&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;&quot;我吃了一顿烧烤&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;GET /es_media/_analyze
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;field&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;name&quot;&lt;/span&gt;,
  &lt;span class=&quot;s2&quot;&gt;&quot;text&quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;nice&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;profile 和 制定字段查询&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 查询字段为 title， 并查看 profile 其中 df 代表的是 default_field&lt;/span&gt;
GET /es_media/_search?q&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;测试&amp;amp;df&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;title
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;profile&quot;&lt;/span&gt;: &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;termQuery 和 phaseQuery&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# phaseQuery&lt;/span&gt;
GET /es_media/_search?q&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;title:&lt;span class=&quot;s2&quot;&gt;&quot;测试 一下&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;profile&quot;&lt;/span&gt;: &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# termQuery&lt;/span&gt;
GET /es_media/_search?q&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;title:&lt;span class=&quot;s2&quot;&gt;&quot;测试 一下&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;profile&quot;&lt;/span&gt;: &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# boolQuery， 必须要包括 测试 或者 一下&lt;/span&gt;
GET /es_media/_search?q&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;title:&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;测试 一下&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;profile&quot;&lt;/span&gt;: &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 默认是 OR 的查询&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 制定 AND&lt;/span&gt;
GET /es_media/_search?q&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;title:&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;测试 AND 一下&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;profile&quot;&lt;/span&gt;: &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 测试的查询方式&lt;/span&gt;
POST /es_media/_search?q&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;:10
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;explain&quot;&lt;/span&gt;: &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# 重建索引，将一个索引导入到另一个索引
POST _reindex
{
  &quot;source&quot;: { &quot;index&quot;: &quot;source_index&quot; },
  &quot;dest&quot;: { &quot;index&quot;: &quot;new_index&quot; }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;倒排索引&quot;&gt;倒排索引&lt;/h3&gt;
&lt;p&gt;正排索引&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;document id&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;content&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;elasticsearch server&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;server devops good&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;3&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;elasticsearch very good&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;倒排索引&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;term&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;count&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;document position in content&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;elasticsearch&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1:0 3:0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;server&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1:1 2:0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;good&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2:0 3:0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;very&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;3:1&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;ul&gt;
  &lt;li&gt;单词词典(Term Dictionary)
    &lt;ul&gt;
      &lt;li&gt;B+ 树&lt;/li&gt;
      &lt;li&gt;Hash&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;倒排列表(Posting List)
    &lt;ul&gt;
      &lt;li&gt;Doc ID&lt;/li&gt;
      &lt;li&gt;TF (term frequency) 词频， 用于计算相关性&lt;/li&gt;
      &lt;li&gt;Position 词出现的位置， 用于语句搜索&lt;/li&gt;
      &lt;li&gt;Offset 位置， 用于高亮&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;analyer-分词器&quot;&gt;Analyer 分词器&lt;/h3&gt;
&lt;p&gt;关键的&lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/reference/current/analyzer-anatomy.html&quot;&gt;三个部分&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;mermaid&quot;&gt;
graph LR
    cf([Character ilters]);
    t([Tokenizer]);
    tf([Tokenizer Filter]);
    cf--&amp;gt;t--&amp;gt;tf
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Character Filters 过滤器，过滤掉一些如 &amp;lt; &amp;amp; 标签， 该部分会影响到倒排索引的 position 等信息&lt;/li&gt;
  &lt;li&gt;Tokenizer 切分单词，比如按照空格，逗号切分 [“good better best”] 切分为 good， better， best&lt;/li&gt;
  &lt;li&gt;Token Filter 加工单词，如删除 stopwords(a the 等)， 将大写改为小写， 删除违禁词等&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;GET /_analyze
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;analyzer&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;standard&quot;&lt;/span&gt;，
  &lt;span class=&quot;s2&quot;&gt;&quot;text&quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;今天是个好的日子&quot;&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;&quot;我吃了一顿烧烤&quot;&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;&quot;I feel good&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;GET /es_media/_analyze
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;field&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;name&quot;&lt;/span&gt;,
  &lt;span class=&quot;s2&quot;&gt;&quot;text&quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;nice&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;常见的 Analyzer&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;standard ES 的&lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/reference/current/search-analyzer.html&quot;&gt;默认&lt;/a&gt;的分词器&lt;/li&gt;
  &lt;li&gt;simple&lt;/li&gt;
  &lt;li&gt;whitespace，将空格去掉&lt;/li&gt;
  &lt;li&gt;stop 将 a，the 去掉&lt;/li&gt;
  &lt;li&gt;keyword 不进行分词， 则使用 keyword&lt;/li&gt;
  &lt;li&gt;pattern 正则分词&lt;/li&gt;
  &lt;li&gt;language 不同语言的分词 (running 会变成 run，foxes 变成 fox 等)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;中文分词&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;难点：词语在不同地方的语境不同，假如 &lt;strong&gt;这个瓜不大好吃&lt;/strong&gt; 分词为了 瓜，不大，好吃，则完全跟原来的意思相反了&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;常用的中文分词器&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;icu_analyzer&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/medcl/elasticsearch-analysis-ik&quot;&gt;ik_smart&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/hankcs/HanLP&quot;&gt;HanLP&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/medcl/elasticsearch-analysis-pinyin&quot;&gt;Pinyin&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;注：可自定义 analyzer， 也可以定义 search_analyzer， 可参考 两者的&lt;a href=&quot;https://stackoverflow.com/a/15932838&quot;&gt;区别&lt;/a&gt;，以及官方的&lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/reference/current/specify-analyzer.html&quot;&gt;建议&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;relevance-相关性&quot;&gt;Relevance 相关性&lt;/h3&gt;
&lt;p&gt;评估标准 Information Retrieval 通过下面三个结果来看相关性的结果好坏&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Percision 精确度。除了返回精确结果，还包含了哪些非精确的结果&lt;/li&gt;
  &lt;li&gt;Recall 查全率/召回率，还缺少了哪些数据未返回&lt;/li&gt;
  &lt;li&gt;Ranking 排序&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;该部分和机器学习里面的评估标准类似，有 True/False Positive 的概念&lt;/p&gt;

&lt;h3 id=&quot;mapping&quot;&gt;Mapping&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Dynamic Mapping， 自动创建 Mapping 和 字段
    &lt;ul&gt;
      &lt;li&gt;true 可以加字段，可以被索引&lt;/li&gt;
      &lt;li&gt;false 可以加字段，不可以被索引&lt;/li&gt;
      &lt;li&gt;strict 不可以加字段，不可以被索引&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;数组的类型依然是 text&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;keyword， 精确值类型， 认为是一个不可分割的词语， 如 App Store， 其他的精确值还包括 数字，日期 等， 该部分没有必要做分词的处理&lt;/li&gt;
  &lt;li&gt;text， 全文本类型。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;aggregation&quot;&gt;Aggregation&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Bucket，类似于 MySQL 的 group&lt;/li&gt;
  &lt;li&gt;Metric，类似于 MySQL 的 count，min，max 等等&lt;/li&gt;
  &lt;li&gt;Pipeline&lt;/li&gt;
  &lt;li&gt;Matrix&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;term-和-text&quot;&gt;Term 和 Text&lt;/h3&gt;
&lt;p&gt;查询的分类可参考 &lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/client/java-rest/current/java-rest-high-query-builders.html&quot;&gt;Building Queries&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;term 不会做分词处理，类似于 client 中的 keyword
    &lt;ul&gt;
      &lt;li&gt;注意，一些 analyzer 会做大小写转换，所以如果你的输入值为 iPHONE， 索引类型为 term， 存储到 ES 中 的 是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;iphone&lt;/code&gt;， 此时拿 iPHONE 是无法查询到数据的&lt;/li&gt;
      &lt;li&gt;可以使用 constant score 将查询转化，避免计算 score，提升性能&lt;/li&gt;
      &lt;li&gt;可以用 es 的多字段属性，添加一个 &lt;a href=&quot;https://stackoverflow.com/questions/48869795/difference-between-a-field-and-the-field-keyword&quot;&gt;keyword&lt;/a&gt; 字段&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;全文查询， 即 text， 查询的时候，会先将 text 分成 term，再进行不同的算分&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;下面是一个 text: &lt;strong&gt;Fox Chicken Nice&lt;/strong&gt; 被查询的例子&lt;/p&gt;

&lt;div class=&quot;mermaid&quot;&gt;
graph LR
    fcn([Text &lt;br /&gt;Fox Chicken Nice]);
    f([Term1 &lt;br /&gt;Fox]);
    f1([计算分数]);
    c([Term2 &lt;br /&gt;Chicken]);
    c1([计算分数]);
    n([Term3 &lt;br /&gt;Nice]);
    n1([计算分数]);
    e([汇总得分并排序输出]);
    fcn --&amp;gt; f &amp;amp; c &amp;amp; n
    f --&amp;gt; f1
    c --&amp;gt; c1
    n --&amp;gt; n1
    f1 &amp;amp; c1 &amp;amp; n1 --&amp;gt; e
&lt;/div&gt;

&lt;h3 id=&quot;bool-数字类型的查询&quot;&gt;bool， 数字类型的查询&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;对于这种不需要分词的类型，可以考虑直接使用 termQuery 查询， 如果不需要计算排序，则使用 constant score 方式，转化为 filter&lt;/li&gt;
  &lt;li&gt;多值字段，如 labels: [label1， label2] 则为包含关系， 如果需要精确查询则需要增加 labels_count 的字段， 结合起来做精确匹配&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;相关度计算&quot;&gt;相关度计算&lt;/h3&gt;
&lt;p&gt;TF-IDF 和 BM-25&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;TF term frequency，一个词在全文中所有词中出现的次数&lt;/li&gt;
  &lt;li&gt;StopWord 类似于 ‘的， 我’ 这样的词，计算 TF 是没有意义的&lt;/li&gt;
  &lt;li&gt;DF document frequency， 出现过该词的文档，在总文档中的次数， 也就是说该值越大，说明该词就越常见， 值越小，就越稀缺和重要。&lt;/li&gt;
  &lt;li&gt;IDF inverse DF&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;简单来说一个词的 TF 越高，DF 越低，文档越短，而认为相关度越高&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Boosting， boost 的意思是放大的意思，通过这个值可以控制算分结果&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.elastic.co/guide/en/app-search/current/relevance-tuning-guide.html#relevance-tuning-guide&quot;&gt;Boosting Query&lt;/a&gt; 在查询的时候指定字段的 weight&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-function-score-query.html#function-field-value-factor&quot;&gt;Function Score Query&lt;/a&gt; 自定义字段/值的分数计算&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;query-和-filter&quot;&gt;Query 和 Filter&lt;/h3&gt;
&lt;p&gt;Query 会进行相关性算分，Filter 只是过滤，不进行算分，性能相对更好&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Bool Query
    &lt;ul&gt;
      &lt;li&gt;must QueryContext 会算分&lt;/li&gt;
      &lt;li&gt;should QueryContext 会算分&lt;/li&gt;
      &lt;li&gt;must_not FilterContext 不会算分&lt;/li&gt;
      &lt;li&gt;filter FilterContext 必须匹配，不会算分&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;function-score-query&quot;&gt;Function Score Query&lt;/h3&gt;
&lt;p&gt;可以自定义算分结果&lt;/p&gt;

&lt;h3 id=&quot;serach-template&quot;&gt;Serach Template&lt;/h3&gt;
&lt;p&gt;搜索的定义 和 搜索的逻辑解耦&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;POST _scripts/media_serach_template
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;script&quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;搜索推荐-search-as-you-type-autocomplete-contextcomplete&quot;&gt;搜索推荐 search as you type， AutoComplete， ContextComplete&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Term Suggestion，比如你搜索 go， 自动补全为 good god 等&lt;/li&gt;
  &lt;li&gt;Phase Suggestion， 比如搜索 I love， 自动建议 I love you， I love dog， I love cat 等等&lt;/li&gt;
  &lt;li&gt;AutoComplete， ES 在内存中建一个 &lt;a href=&quot;https://en.wikipedia.org/wiki/Finite-state_transducer&quot;&gt;fst(finate state transducer)&lt;/a&gt; 进行检索，该结构类似于 tire， 对比可参考这篇&lt;a href=&quot;https://blog.burntsushi.net/transducers/&quot;&gt;文章&lt;/a&gt; 该部分需要提前在索引中做定义&lt;/li&gt;
  &lt;li&gt;ContextComplete，根据上下文进行推荐&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;es-分布式&quot;&gt;ES 分布式&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;故障转移
    &lt;ul&gt;
      &lt;li&gt;当前 shard 存放的副本，是其他的 shard 的副本&lt;/li&gt;
      &lt;li&gt;当前 shard 挂掉之后，其他的 shard 会自动同步副本数据&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;&lt;img src=&quot;assets/images/es_shard_example.png&quot; alt=&quot;es_shard_example&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;文档分布存储
    &lt;ul&gt;
      &lt;li&gt;路由算法 Hash(_routing) % primary_shards, 这里的 primary_shards 一旦更改，则需要重建索引&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;倒排索引是不可变的
    &lt;ul&gt;
      &lt;li&gt;好处: 不需要考虑并发，很好地利用文件系统的缓存，易于压缩&lt;/li&gt;
      &lt;li&gt;坏处: 重建索引的成本比较高&lt;/li&gt;
      &lt;li&gt;删除的索引单独存储，搜索的时候，先搜索全部，再过滤掉删除的文档&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Refresh
    &lt;ul&gt;
      &lt;li&gt;单个倒排索引为多个 segment (不可变) 多个 segments + .del = 所有的数据集合&lt;/li&gt;
      &lt;li&gt;index buffer 为 索引的内存空间, 索引的时候会先写入 index buffer&lt;/li&gt;
      &lt;li&gt;index buffer 写入 segment 的过程为 refresh&lt;/li&gt;
      &lt;li&gt;默认是 1s 进行一次 refresh，由于只有进入了 segment 才会被搜索，所以 es 是近实时的搜索引擎(延迟&amp;lt;=1s)&lt;/li&gt;
      &lt;li&gt;index buffer 占用内存过多(JVM的 10%) 也会触发 refresh&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Transaction Log
    &lt;ul&gt;
      &lt;li&gt;在写入 index buffer 时候，同步地写入了 transaction log&lt;/li&gt;
      &lt;li&gt;Transaction Log 在 ES 断电的时候，依然能够进行数据的恢复&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Flush
    &lt;ul&gt;
      &lt;li&gt;refresh&lt;/li&gt;
      &lt;li&gt;将缓存中的 segment 落到磁盘 (fsync)&lt;/li&gt;
      &lt;li&gt;清空 transaction log&lt;/li&gt;
      &lt;li&gt;默认 30分钟 调用一次 或者 transaction log 写满(512M)时 调用&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Merge
    &lt;ul&gt;
      &lt;li&gt;merge 磁盘的 segment&lt;/li&gt;
      &lt;li&gt;真正的删除&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Search Type
    &lt;ul&gt;
      &lt;li&gt;DFS Query &amp;amp;/then Fetch&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;分片的生命周期&quot;&gt;分片的生命周期&lt;/h3&gt;
&lt;p&gt;TODO: 增删改查的步骤是什么样的，如何使用 内存，磁盘 等来做到 高性能 和 高可用的？&lt;/p&gt;

&lt;p&gt;分片数目 和 相关性分数的关系&lt;/p&gt;

&lt;h3 id=&quot;深度分页-并发更新&quot;&gt;深度分页, 并发更新&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;深度分页会导致非常大的性能问题，ES 默认的限制是 10000 条，可以考虑 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;search after&lt;/code&gt; 或者 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;scroll&lt;/code&gt; API 来解决深度分页问题&lt;/li&gt;
  &lt;li&gt;
    &lt;table&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td&gt;乐观锁, version = f(seq_no, primary_term)&lt;/td&gt;
          &lt;td&gt; &lt;/td&gt;
          &lt;td&gt;external_version&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;聚合查询&quot;&gt;聚合查询&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;metric, 如 max, mix, avg, sum 等&lt;/li&gt;
  &lt;li&gt;bucket, 类似于 groupBy&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;关联查询&quot;&gt;关联查询&lt;/h3&gt;
&lt;p&gt;类似于 JOIN&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;object, user 对应的 name 字段，变为 user.name 字段, 会分别进行索引&lt;/li&gt;
  &lt;li&gt;nested, 支持多个字段在一条记录中的查找&lt;/li&gt;
  &lt;li&gt;children, 需要将父子文档存储在同一个分片上，此时子文档在创建索引的时候，需要加上父文档的 id&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;重建索引&quot;&gt;重建索引&lt;/h3&gt;
&lt;p&gt;什么需要重建索引&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;索引相关的 Mapping 变更, 如 分析器，字段类型&lt;/li&gt;
  &lt;li&gt;主分片数变更&lt;/li&gt;
  &lt;li&gt;数据迁移等&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;相关 API&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;update by query 在改变所以之前的字段, 也可以被索引到&lt;/li&gt;
  &lt;li&gt;reindex&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;数据建模&quot;&gt;数据建模&lt;/h3&gt;
&lt;p&gt;考虑以下的几个维度&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;使用的字段&lt;/li&gt;
  &lt;li&gt;是否需要全文索引&lt;/li&gt;
  &lt;li&gt;是否需要进行聚合和排序&lt;/li&gt;
  &lt;li&gt;存储大小&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;字段类型&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Text(全文检索) 还是 Keyword(精确匹配, 排序, 聚合)，ES 默认会给 text 类型的字段 设置一个 keyword 字段, 平时考虑可以添加 英文/拼音 的字段，提高用户体验&lt;/li&gt;
  &lt;li&gt;枚举类型尽量设置为 keyword&lt;/li&gt;
  &lt;li&gt;不需要检索的字段设置 index 为 false&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;其他&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;如果确认字段和字段类型，建议索引的 dynamic 设置为 strict&lt;/li&gt;
  &lt;li&gt;避免正则匹配查询，而是通过字段冗余来解决(空间换时间)&lt;/li&gt;
  &lt;li&gt;Mapping文件放入版本库中进行管理&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;reference&quot;&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://time.geekbang.org/column/intro/298&quot;&gt;检索技术核心20讲-极客时间&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://time.geekbang.org/course/detail/100030501-102662&quot;&gt;Elasticsearch核心技术与实战-极客时间&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/142833556&quot;&gt;H2 全文检索&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://dev.mysql.com/doc/refman/8.0/en/fulltext-search.html&quot;&gt;MySQL Full-Text Search Functions&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.elastic.co/guide/en/app-search/current/relevance-tuning-guide.html#relevance-tuning-guide&quot;&gt;Relevance Tuning Guide，Weights and Boosts&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/client/java-rest/current/java-rest-high-query-builders.html&quot;&gt;QueryBuilders&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.infoq.com/articles/similarity-scoring-elasticsearch/&quot;&gt;similarity-scoring-elasticsearch&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>dengqinghua</name></author><summary type="html">方案设计 可选的搜索方案</summary></entry><entry><title type="html">Folsom Blues</title><link href="https://dengqinghua.github.io/folsom-blues.html" rel="alternate" type="text/html" title="Folsom Blues" /><published>2021-08-29T00:00:00+08:00</published><updated>2021-08-29T00:00:00+08:00</updated><id>https://dengqinghua.github.io/folsom-blues</id><content type="html" xml:base="https://dengqinghua.github.io/folsom-blues.html">&lt;hr data-content=&quot; 曲谱 &quot; /&gt;

&lt;ul&gt;
  &lt;li&gt;曲谱: &lt;a href=&quot;https://pan.baidu.com/disk/pdfview?path=%2F42%2F%E9%9F%B3%E4%B9%90%2F%E6%95%99%E6%9D%90%2FProGuitar%2FfolsomPrisonBlues%2Femil-ernebro-folsom-prison-blues.pdf&amp;amp;size=128339&amp;amp;fsid=427847537413829&quot;&gt;PDF&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;来源: &lt;a href=&quot;https://www.proguitar.com/academy/lessons/folsom-prison-blues&quot;&gt;Folsom Blues Guitar&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;我的翻弹: &lt;a href=&quot;https://b23.tv/GhUk2V&quot;&gt;美式指弹 folsom prison blues - emil ernebro-哔哩哔哩&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr data-content=&quot; 律动 &quot; /&gt;

&lt;ol&gt;
  &lt;li&gt;boom-chick&lt;/li&gt;
  &lt;li&gt;制音，一些时值需要突然制音，会更有感觉&lt;/li&gt;
  &lt;li&gt;不完全制音，需要在单个根音的时候，单独弹响，再闷掉&lt;/li&gt;
  &lt;li&gt;不要过渡揉弦，一点儿都不好听&lt;/li&gt;
  &lt;li&gt;节奏稳定性 &amp;gt; 自以为是的律动感 &amp;gt; 完全没有律动的稳定弹奏&lt;/li&gt;
&lt;/ol&gt;

&lt;hr data-content=&quot; 需要加强的 &quot; /&gt;

&lt;ol&gt;
  &lt;li&gt;节奏有很大的问题，一定要带着节拍器弹琴&lt;/li&gt;
  &lt;li&gt;无论是换和弦，还是速弹，一定要慢速，很 &lt;strong&gt;轻松&lt;/strong&gt; 地弹出来才可&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;在练习地不是很熟练的情况下，不要对一次录制成功抱有太大的期望(侥幸心理太重只会带来焦虑感)&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;30分钟内的录制才是录制，多余 30分钟的部分只能是练习，越到后面，录制效率越差，已经完全是机械化的肌肉记忆了&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;对吉他上的指板不太熟，一些 属七和弦 的基本按法不是很熟悉&lt;/li&gt;
  &lt;li&gt;加强对击弦勾弦的练习，才能真正地掌握 Emil 的真正技巧&lt;/li&gt;
  &lt;li&gt;尝试改变一下曲子的一些音，节奏，加上自己的一些想法&lt;/li&gt;
&lt;/ol&gt;

&lt;hr data-content=&quot; 做的不错的 &quot; /&gt;

&lt;ol&gt;
  &lt;li&gt;带着节拍器进行录音，节奏感觉还比较稳&lt;/li&gt;
  &lt;li&gt;有了前面的失败的录制经验之后，之后录制的时候还比较放松&lt;/li&gt;
&lt;/ol&gt;

&lt;hr data-content=&quot; 下次录音我会尝试的 &quot; /&gt;

&lt;ol&gt;
  &lt;li&gt;尝试分段录制&lt;/li&gt;
  &lt;li&gt;尝试不同的速度练习，对应有问题的部分着重练习&lt;/li&gt;
&lt;/ol&gt;

&lt;hr data-content=&quot; 思考 &quot; /&gt;

&lt;ol&gt;
  &lt;li&gt;其实 emil 的曲子练习多了之后，发现他其实很强调曲子的整体的律动感觉，会让你觉得曲子比较简单，但是在一些细节上处理不好之后，整个曲子就会变了味道&lt;/li&gt;
  &lt;li&gt;对于和弦，乐理，速度，花里胡哨的技巧而言，没有什么比 &lt;strong&gt;稳定的节拍，干净的演奏，合适的律动&lt;/strong&gt; 更重要了，要多注重自己的节拍的稳定性 和 音符的稳定性 上面&lt;/li&gt;
&lt;/ol&gt;</content><author><name>dengqinghua</name></author><category term="music" /><summary type="html"></summary></entry><entry><title type="html">pulsar 队列实践</title><link href="https://dengqinghua.github.io/queue.html" rel="alternate" type="text/html" title="pulsar 队列实践" /><published>2021-08-16T00:00:00+08:00</published><updated>2021-08-16T00:00:00+08:00</updated><id>https://dengqinghua.github.io/queue</id><content type="html" xml:base="https://dengqinghua.github.io/queue.html">&lt;h2 id=&quot;architecture&quot;&gt;Architecture&lt;/h2&gt;
&lt;h3 id=&quot;架构&quot;&gt;架构&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/pul-system-architecture.png&quot; alt=&quot;pul-system-architecture.png&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;消息订阅方式&quot;&gt;消息订阅方式&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/pul-subscription-modes.png&quot; alt=&quot;pul-subscribe&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;消息的生命周期&quot;&gt;消息的生命周期&lt;/h3&gt;

&lt;div class=&quot;mermaid&quot;&gt;
graph LR;
  produce(生产数据)
  consumer(被不同的消费者, 并进行 ACK);
  expire(过期 和 清理);
  produce--&amp;gt;consumer--&amp;gt;expire
&lt;/div&gt;

&lt;p&gt;更多消息相关, 见 &lt;a href=&quot;http://pulsar.apache.org/docs/en/concepts-messaging&quot;&gt;这里&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;event-和-元数据&quot;&gt;Event 和 元数据&lt;/h2&gt;
&lt;h3 id=&quot;event-治理&quot;&gt;Event 治理&lt;/h3&gt;
&lt;p&gt;在 Ease 的后端服务中, 我们是通过 &lt;a href=&quot;https://gitlab.easeprime.com/ease/lib-box/-/tree/master/common-lib/src/main/java/com/easeprime/bfs/common/event&quot;&gt;common-lib&lt;/a&gt; 包进行封装和处理的&lt;/p&gt;

&lt;p&gt;该部分的组织形式如下&lt;/p&gt;

&lt;div class=&quot;mermaid&quot;&gt;
graph LR;
  subgraph 消费者
  eventConsumer(eventConsumer);
  h1(handler1);
  h2(handler2);
  event2(&quot;onEvent(event)&quot;)
  eventConsumer--&amp;gt;h1 &amp;amp; h2 --&amp;gt; event2
  end

  subgraph 生产者
  eventProducer(eventProducer);
  pulsar1(Topic: pulsar-media);
  event1(SendEvent)
  eventProducer--&amp;gt;pulsar1--&amp;gt;event1
  end

  subgraph 事件定义
  event(event)
  payload(payload)
  eventType(eventType);
  eventCode(eventCode);
  desc(desc);
  event--&amp;gt;eventType &amp;amp; payload
  eventType--&amp;gt;eventCode &amp;amp; desc;
  end
&lt;/div&gt;

&lt;p&gt;当用户完成一个音频的播放时候的操作&lt;/p&gt;

&lt;div class=&quot;mermaid&quot;&gt;
graph LR;
  subgraph 消费者
  eventConsumer(eventConsumer);
  h1(DE完播计算 handler);
  h2(用户播放数据缓存刷新 handler);
  h3(XXX Handler);
  eventConsumer--&amp;gt;h1 &amp;amp; h2 &amp;amp; h3
  end

  subgraph 生产者
  eventProducer(eventProducer);
  pulsar1(Topic: media);
  event1(发送事件: MEDIA_LOG_FINISH)
  eventProducer--&amp;gt;pulsar1--&amp;gt;event1
  end

  subgraph 音频播放完成事件
  event(event)
  payload(MediaLogFinishPayload)
  payload1(mediaId)
  payload2(memberId)
  payload3(playTo)
  eventType(MEDIA_LOG_FINISH);
  event--&amp;gt;eventType &amp;amp; payload
  payload --&amp;gt; payload1 &amp;amp; payload2 &amp;amp; payload3
  end
&lt;/div&gt;

&lt;h3 id=&quot;元数据&quot;&gt;元数据&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;orderingKey&lt;/p&gt;

    &lt;p&gt;这里支持传 orderingKey, 用来作为 有序消费。我们经常的场景是: 同一个用户id 的某种类型数据，希望可以有序地消费&lt;/p&gt;

    &lt;p&gt;比如用户的统计数据, 如果是队列本身可以保证有序, 则大概率是有序的, 可以避免过多的数据库的锁竞争问题&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;消费次数和消息丢失的问题&lt;/p&gt;

    &lt;p&gt;pulsar 理论上是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;at-least-once semantics&lt;/code&gt;, 一些重要的业务需要自己能保证是可重复执行的&lt;/p&gt;

    &lt;p&gt;更多内容见 &lt;a href=&quot;https://pulsar.apache.org/docs/en/2.7.1/concepts-messaging/&quot;&gt;concepts-messaging&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;事件和事务的问题&lt;/p&gt;

    &lt;p&gt;有时候会因为业务本身的复杂性, 在很多个业务逻辑的 上下文，都会发送对应的事件&lt;/p&gt;

    &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;nd&quot;&gt;@Transactional&lt;/span&gt;
 &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;doSth&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;c1&quot;&gt;// ① 更新用户信息&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;updateMember&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;sendMemberUpdateEvent&lt;/span&gt;

   &lt;span class=&quot;c1&quot;&gt;// ② 更新Vip状态&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;updateMemberVip&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;sendMemberVipUpdateEvent&lt;/span&gt;

   &lt;span class=&quot;c1&quot;&gt;// ③ 记录日志&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;updateMemberVipLog&lt;/span&gt;
 &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;如果上面在 ③  记录日志的时候报错了，那么会导致 ①  和 ②  回滚, 此时事件理论上被发出去了, 会导致其他的业务逻辑的问题。&lt;/p&gt;

    &lt;p&gt;故这里发送事件的逻辑专门进行了处理。注意&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;所有的事件，都是在 事务提交 之后，才会进行发送。&lt;/p&gt;
    &lt;/blockquote&gt;

    &lt;p&gt;代码实现逻辑见&lt;a href=&quot;https://gitlab.easeprime.com/ease/lib-box/-/blob/master/common-lib/src/main/java/com/easeprime/bfs/common/event/AbstractEventProducer.java#L61&quot;&gt;这里&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;部署方式&quot;&gt;部署方式&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/pul-deploy1.png&quot; alt=&quot;deploy1&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;如何跟踪和查询&quot;&gt;如何跟踪和查询&lt;/h2&gt;
&lt;p&gt;方式1: 根据用户id 或者 deviceId 进行&lt;a href=&quot;https://es-ras1ax3s.kibana.tencentelasticsearch.com:5601/goto/71238f43bd59b8022e7ee9f67238eb45&quot;&gt;查询&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/pul-example1.png&quot; alt=&quot;example1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;方式2: 查看用户的消费 &lt;a href=&quot;https://es-ras1ax3s.kibana.tencentelasticsearch.com:5601/app/discover#/context/5a116e80-b931-11eb-83c7-d711353ac049/toW5UnsBQlxvtLDU4s7e?_g=(filters:!())&amp;amp;_a=(columns:!(message,container.name),filters:!(('$state':(store:appState),meta:(alias:!n,disabled:!t,index:'5a116e80-b931-11eb-83c7-d711353ac049',key:container.name,negate:!t,params:(query:dev_backend_service_8881),type:phrase),query:(match_phrase:(container.name:dev_backend_service_8881))),('$state':(store:appState),meta:(alias:!n,disabled:!t,index:'5a116e80-b931-11eb-83c7-d711353ac049',key:container.name,negate:!t,params:(query:dev_backend_service_8880),type:phrase),query:(match_phrase:(container.name:dev_backend_service_8880)))))&quot;&gt;上下文&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/pul-example2.png&quot; alt=&quot;example2&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;reference&quot;&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://pulsar.apache.org/docs/en/2.3.2/concepts-messaging/&quot;&gt;Pulsar Messaging&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.confluent.io/kafka-vs-pulsar/&quot;&gt;Kafka vs. Pulsar vs. RabbitMQ: Performance, Architecture, and Features Compared&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.confluent.io/blog/kafka-fastest-messaging-system/&quot;&gt;Benchmarking Apache Kafka, Apache Pulsar, and RabbitMQ: Which is the Fastest?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/182573701&quot;&gt;Pulsar 与 Kafka 全方位对比（上篇）：功能、性能、用例&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/61525447/apache-pulsar-message-delivery-semantics&quot;&gt;Apache Pulsar Message Delivery Semantics&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>dengqinghua</name></author><summary type="html">Architecture 架构</summary></entry><entry><title type="html">录音相关的思考</title><link href="https://dengqinghua.github.io/r1.html" rel="alternate" type="text/html" title="录音相关的思考" /><published>2021-07-30T00:00:00+08:00</published><updated>2021-07-30T00:00:00+08:00</updated><id>https://dengqinghua.github.io/r1</id><content type="html" xml:base="https://dengqinghua.github.io/r1.html">&lt;blockquote&gt;
  &lt;p&gt;如何提高录音的效率？多练习基本功，提高专注度，多听，多感受…&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;录音&quot;&gt;录音&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;一定要跟着节拍器慢速练习，无任何呲音和其他的问题时，再进行录音&lt;/li&gt;
  &lt;li&gt;如果在 &lt;strong&gt;30分钟&lt;/strong&gt; 内未完成一次完整的录音，则放弃录音并再进行练习&lt;/li&gt;
  &lt;li&gt;一次的录音时间控制在 &lt;strong&gt;60分钟&lt;/strong&gt; 内&lt;/li&gt;
  &lt;li&gt;在录音之前，不能持续弹奏时间超过 &lt;strong&gt;30分钟&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;练习&quot;&gt;练习&lt;/h2&gt;
&lt;h3 id=&quot;基本功&quot;&gt;基本功&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;爬格子, 保留指 慢速&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;./boxed-penatonic&quot;&gt;音阶, box penatonic&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;./chord-inversion&quot;&gt;和弦, chord inversion&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://pan.baidu.com/disk/home#/all?vmode=list&amp;amp;path=%2F42%2F%E9%9F%B3%E4%B9%90%2F%E6%95%99%E6%9D%90%2FProGuitar%2FopenStringLick&quot;&gt;open string licks&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://pan.baidu.com/disk/home#/all?vmode=list&amp;amp;path=%2F42%2F%E9%9F%B3%E4%B9%90%2F%E6%95%99%E6%9D%90%2FProGuitar%2FbanjoRolls&quot;&gt;banjo rolls&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://pan.baidu.com/disk/home#/all?vmode=list&amp;amp;path=%2F42%2F%E9%9F%B3%E4%B9%90%2F%E6%95%99%E6%9D%90%2FProGuitar%2Fharmonic&quot;&gt;harp harmonics&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://pan.baidu.com/disk/home#/all?vmode=list&amp;amp;path=%2F42%2F%E9%9F%B3%E4%B9%90%2F%E6%95%99%E6%9D%90%2FProGuitar%2FArp&quot;&gt;arppeggio&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;曲子&quot;&gt;曲子&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;多听原曲，在练习的时候一定要多听原曲，感受原曲的律动&lt;/li&gt;
  &lt;li&gt;节拍器是必须的，要尝试多种不同的速度进行演奏, 看自己的极限在哪里&lt;/li&gt;
  &lt;li&gt;练习的时候就进行录音，不是整块的录音而是录片段（不需要视频，只是录音）&lt;/li&gt;
  &lt;li&gt;不熟练的地方一定要反复练习, 现阶段主要包括
    &lt;ul&gt;
      &lt;li&gt;和弦转换, 不能太快也不能太慢，保留音要做好&lt;/li&gt;
      &lt;li&gt;切音的时值, 控制好对应的时值&lt;/li&gt;
      &lt;li&gt;勾弦问题，勾弦一定要有力而且均匀，需要经常练习&lt;/li&gt;
      &lt;li&gt;速度问题，需要每个音都弹得很清晰&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;将自己已经录音过的曲子也放入到练习中, 并且尝试改变其中的音，节奏, 和弦, key 和 速度&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;混音&quot;&gt;混音&lt;/h2&gt;
&lt;p&gt;LogicPro&lt;/p&gt;</content><author><name>dengqinghua</name></author><summary type="html">如何提高录音的效率？多练习基本功，提高专注度，多听，多感受…</summary></entry><entry><title type="html">推荐系统学习笔记</title><link href="https://dengqinghua.github.io/recommend-sys.html" rel="alternate" type="text/html" title="推荐系统学习笔记" /><published>2021-07-29T00:00:00+08:00</published><updated>2021-07-29T00:00:00+08:00</updated><id>https://dengqinghua.github.io/recommend-sys</id><content type="html" xml:base="https://dengqinghua.github.io/recommend-sys.html">&lt;h2 id=&quot;基本方式&quot;&gt;基本方式&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;基于行为的协同过滤&lt;/p&gt;

    &lt;p&gt;你选择了A, 跟 A 相似的东西会推荐给你&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;基于内容相似推荐&lt;/p&gt;

    &lt;p&gt;你选择了A, 跟 A 属于相同类别的东西会推荐给你&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;解决的问题&quot;&gt;解决的问题&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;信息过载。是帮用户从非常多的数据中(比如上千万的商品)选择&lt;/li&gt;
  &lt;li&gt;挖掘长尾。长尾一般是冷门数据，冷门数据的总和往往比热门数据要多，冷门数据也具有非常大的价值&lt;/li&gt;
  &lt;li&gt;用户体验。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;环节&quot;&gt;环节&lt;/h2&gt;
&lt;p&gt;问题: 从海量数据中，提取和用户相关的十几条数据，并且在 XXX ms 内返回&lt;/p&gt;

&lt;div class=&quot;mermaid&quot;&gt;
graph LR;
  input([原始数据 &lt;br /&gt; 亿/千万])
  callback(召回 &lt;br /&gt;万/千);
  sort(排序 &lt;br /&gt;千/百);
  filter(调整 &lt;br /&gt;百/十);
  output([结果 &lt;br /&gt; 十])
  input--&amp;gt;callback--&amp;gt;sort--&amp;gt;filter--&amp;gt;output
&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;召回解决了信息过载的问题，将数量级极大地降低&lt;/li&gt;
  &lt;li&gt;排序可以使用二分算法, 得出用户是否喜欢(喜欢1 不喜欢为0) 和 喜欢的概率, 这样就能得到权重
    &lt;blockquote&gt;
      &lt;p&gt;如果数量不大, 则可以绕过召回阶段, 直接进行排序&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;调整做到了 去重, 已读过滤/在线过滤, 热门补足, 分页 和 合并内容信息等&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;召回路劲&quot;&gt;召回路劲&lt;/h3&gt;
&lt;p&gt;名词解释&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;u: user, 用户&lt;/li&gt;
  &lt;li&gt;i: item&lt;/li&gt;
  &lt;li&gt;2: to, 代表的是边&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;u2i 代表的是 user to item&lt;/p&gt;

&lt;div class=&quot;mermaid&quot;&gt;
graph LR;
  user(用户)
  item(item);
  user--&amp;gt;item
&lt;/div&gt;

&lt;p&gt;推荐系统解决的是 用户如何找到 item&lt;/p&gt;

&lt;div class=&quot;mermaid&quot;&gt;
graph LR;
  user(用户)
  unkown(...);
  item(item);
  user--&amp;gt;unkown--&amp;gt;item
&lt;/div&gt;

&lt;p&gt;这里提出了召回方式&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;路劲&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;解释&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;例子&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;方法&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;i2i&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;你看了itemA,推荐给你itemB&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;头条的相似文章推荐&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;item相似度, 协同过滤 和 关联规则(比如人工标注)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;u2i&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;用户的直接行为&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;点击过的内容但是未购买的商品, 很容易产生购买行为&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;用户行为数据&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;u2i2i&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;将 u2i 得到的结果, 推荐给新的用户&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;N/A&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;u2u2i&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;用户聚类，获得相似的用户，再根据用户的推荐给当前用户&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;相同年龄/性别的用户, 相同点击行为的用户推荐相似的内容&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;用户聚类, 用户行为，来进行 u2u 部分&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;u2tag2i&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;先算出用户的tag, 在匹配 tag 和 item 的关系&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;豆瓣, B站的 tag, tag效果比较好, 内容不会扩展&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;u2***2i&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;基于图的算法&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;netflix推荐架构&quot;&gt;Netflix推荐架构&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;assets/images/netflix_framework.png&quot; alt=&quot;framework&quot; width=&quot;80%&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Offline, 计算离线数据, 一般提供 小时/天/月 级别的数据
    &lt;ul&gt;
      &lt;li&gt;海量数据存储和计算&lt;/li&gt;
      &lt;li&gt;离线计算&lt;/li&gt;
      &lt;li&gt;机器学习和模型训练&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Nearline, 利用离线数据和当前的实时数据, 计算当前的热数据和 TopN 数据等，存储到缓存中
    &lt;ul&gt;
      &lt;li&gt;接收实时事件&lt;/li&gt;
      &lt;li&gt;计算实时数据并写入缓存&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Online, 直接面向外部提供接口, 一般是直接从 Nearline 的缓存存储中拿到数据返回, 有时延要求
    &lt;ul&gt;
      &lt;li&gt;分发用户事件&lt;/li&gt;
      &lt;li&gt;组装缓存中的数据&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;如果是数据不大的话，可以考虑只有两层, Online 和 Offline, Offline 直接将结果写入告诉缓存即可&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;技术架构&quot;&gt;技术架构&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Offline&lt;/li&gt;
  &lt;li&gt;Nearline&lt;/li&gt;
  &lt;li&gt;Online&lt;/li&gt;
  &lt;li&gt;存储
    &lt;ul&gt;
      &lt;li&gt;redis&lt;/li&gt;
      &lt;li&gt;memcache&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;超时处理, 兜底补足&lt;/li&gt;
  &lt;li&gt;本地LRU缓存&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;基于内容的推荐content-based&quot;&gt;基于内容的推荐(content-based)&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;给用户推荐 之前喜欢过的物品, 以及相似的物品。 即 u2i2i 和 u2Tag2i, 仅分析单用户本身, 用户和用户之间的行为互不干涉和影响&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;mermaid&quot;&gt;
graph TB
    subgraph 用户
    action(偏好);
    action1(点赞 &lt;br /&gt;权重 2);
    action2(收藏 &lt;br /&gt;权重 3);
    action3(播放 &lt;br /&gt;权重 1);
    aa(偏好向量 &lt;br /&gt;故事3 白噪声2 ... );
    action --&amp;gt; action1 &amp;amp; action2 &amp;amp; action3--&amp;gt;aa
    end
    subgraph 内容
    taged(特征 &lt;br /&gt;故事/白噪音/仙侠);
    t1(故事 &lt;br /&gt;权重 2);
    t2(音乐 &lt;br /&gt;权重 3);
    t3(白噪声 &lt;br /&gt;权重 1);
    bb(特征向量 &lt;br /&gt;故事3 白噪声4 ... );
    taged --&amp;gt; t1 &amp;amp; t2 &amp;amp; t3--&amp;gt;bb
    end
    subgraph 推荐
    cc(推荐的内容列表 &lt;br /&gt; 利用余弦相似度算法计算TopN物品)
    end
    aa --&amp;gt; cc
    bb --&amp;gt; cc
&lt;/div&gt;

&lt;p&gt;余弦相似度计算, 计算向量和向量之间的距离&lt;/p&gt;

&lt;p&gt;优点：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;只需要单个用户的信息，用户和用户之间没有关联&lt;/li&gt;
  &lt;li&gt;可以推荐最新的或者冷门的物品&lt;/li&gt;
  &lt;li&gt;容易做解释&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;缺点&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;内容标签需要人工打&lt;/li&gt;
  &lt;li&gt;用户的潜在兴趣无法挖掘&lt;/li&gt;
  &lt;li&gt;全新用户没法推荐(冷启动问题)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;落地方案&quot;&gt;落地方案&lt;/h3&gt;

&lt;div class=&quot;mermaid&quot;&gt;
graph TB
    subgraph Offline
      storage1(存储1 &lt;br /&gt; MySQL);
      storage2(存储2 &lt;br /&gt; ES ?);
      storage3(存储3 &lt;br /&gt; ...);
      cal(计算用户和内容的匹配度 &lt;br /&gt;余弦相似度, 皮尔逊相关系数 和 Jaccard);
      cache(缓存 &lt;br /&gt;Redis);
    end
    subgraph Nearline
      EventHandler(事件收集 &lt;br /&gt; EventListener 或者 Redis);
    end
    subgraph Online
      event1(用户行为事件 &lt;br /&gt; 收藏 播放 分享 ...);
      event2(新内容发布);
      fetch(获取推荐的内容TopN数据);
      do(聚合和处理);
    end

    event1 &amp;amp; event2--&amp;gt;EventHandler--&amp;gt;storage1 &amp;amp; storage2 &amp;amp; storage3--&amp;gt;cal--&amp;gt;cache--&amp;gt;fetch--&amp;gt;do
&lt;/div&gt;

&lt;p&gt;考虑点&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;基于当前的业务量和数据, 尽量使用简单的方式, 不引入新的中间件和非常重的框架(所以这里不会考虑引入 kafka, Spark 等工具)&lt;/li&gt;
  &lt;li&gt;计算路劲足够快和有效, 但是需要有超时设计&lt;/li&gt;
  &lt;li&gt;需要考虑是否应该有数据补足和兜底方案，在新用户进入的时候，提供一批系统预设的数据(解决冷启动问题)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;备选方案&quot;&gt;备选方案&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;直接按照需求直接读库实时计算&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;基于协同的推荐cf-collaborative-filtering&quot;&gt;基于协同的推荐(CF, Collaborative Filtering)&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;使用行为数据，利用集体智慧，即 用户和用户的行为，物品和物品之间相互交叉和干涉，主要包括 u2u2i 和 u2i2i&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;u2u2i: user1喜欢 x1, user2也喜欢 x1; 那么user1喜欢的 x2 可以推荐给 user2&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;u2i2i: user1喜欢 x1, x1 和 x2 很相似; 那么 可以推荐 x2 给 user1.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;下面的例子: 用户A，B，C 已经对部分 item 进行了打分, 现在要给 用户A 的 item 进行排序 和 推荐&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;用户/item的评分&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;item1&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;item2&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;item3&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;item4&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;item5&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;item6&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;item7&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;用户A&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;8分&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;3分&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;?&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;?&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;?&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;?&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2分&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;用户B&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;7分&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;10分&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;3分&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;?&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;8分&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;9分&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;?&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;用户C&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;8分&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1分&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;8分&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;10分&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2分&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;?&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;8分&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;通过协同过滤的方式如下&lt;/p&gt;

&lt;div class=&quot;mermaid&quot;&gt;
graph TB
    uu(搜索和用户A和用户B, C的 相似度);
    ii(根据相似度, 估算用户A 在新item3和item4的分数);
    uu --&amp;gt; ii
&lt;/div&gt;

&lt;p&gt;相似度计算&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Jaccard相似度&lt;/li&gt;
  &lt;li&gt;余弦相似度&lt;/li&gt;
  &lt;li&gt;皮尔逊相关系数, Pearson’s r&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;ref&quot;&gt;Ref&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.bilibili.com/video/BV1Dz411B7wd&quot;&gt;推荐系统学习视频&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://netflixtechblog.com/system-architectures-for-personalization-and-recommendation-e081aa94b5d8&quot;&gt;Netflix 推荐系统架构&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/fxsjy/jieba&quot;&gt;中文分词&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://ai.tencent.com/ailab/nlp/en/embedding.html&quot;&gt;Tencent Word2Vec&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://spark.apache.org/docs/2.2.3/ml-features.html&quot;&gt;Spark ML features&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>dengqinghua</name></author><summary type="html">基本方式</summary></entry><entry><title type="html">Apple Pay</title><link href="https://dengqinghua.github.io/apple-pay.html" rel="alternate" type="text/html" title="Apple Pay" /><published>2021-07-28T00:00:00+08:00</published><updated>2021-07-28T00:00:00+08:00</updated><id>https://dengqinghua.github.io/apple-pay</id><content type="html" xml:base="https://dengqinghua.github.io/apple-pay.html">&lt;div class=&quot;mermaid&quot;&gt;
sequenceDiagram
    autonumber
    participant sdk as iOS SDK
    participant b as Backend
    participant as as Apple Service
    sdk-&amp;gt;&amp;gt;b: 获取商品列表
    b--&amp;gt;&amp;gt;sdk: 从后台获取商品id和对应展示的图片文案信息
    sdk-&amp;gt;&amp;gt;b: 根据商品id 生成/获取预订单
    Note right of sdk: 需要先去查一下这个用户在商品id下之前是不是有未完成的订单
    b--&amp;gt;&amp;gt;sdk: 返回 订单sid
    sdk-&amp;gt;&amp;gt;as: 发起真实的支付
    as--&amp;gt;&amp;gt;sdk: 用户支付, 苹果返回票据信息(receipt-data)&lt;br /&gt;如果苹果未返回, 则在 App 启动的时候返回
    sdk-&amp;gt;&amp;gt;b: 提交票据信息和 订单sid 到服务端
    Note right of sdk: 这一步容易丢单, 如何解决? &lt;br /&gt;因为苹果容易丢失掉订单sid &lt;br /&gt;需要取未完成的一条
    b-&amp;gt;&amp;gt;as: 验证票据信息
    as--&amp;gt;&amp;gt;b: 验证成功/失败
    b--&amp;gt;&amp;gt;sdk: 修改订单状态, 并通知SDK支付成功或失败
    sdk--&amp;gt;&amp;gt;as: 成功则将订单进行关闭
&lt;/div&gt;

&lt;p&gt;连续订阅&lt;/p&gt;

&lt;div class=&quot;mermaid&quot;&gt;
graph LR;
    pay([用户签订协议, 获取 receipt]);
    receipt([记录 订单 和 receipt]);
    verify([建议每天都拿receipt去苹果那边验证]);
    getNotDelay([发现有未过期的订单信息])
    success([扣款成功])
    pay--&amp;gt;receipt--&amp;gt;verify--&amp;gt;getNotDelay--&amp;gt;success--&amp;gt;verify
&lt;/div&gt;

&lt;p&gt;需提供的接口:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;商品列表接口&lt;/li&gt;
  &lt;li&gt;创建订单接口&lt;/li&gt;
  &lt;li&gt;提交票据信息接口&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;关键点:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;记录收据信息, 校验收据是否完成&lt;/li&gt;
  &lt;li&gt;订单号没有给的情况，需要自己去找对应的订单&lt;/li&gt;
  &lt;li&gt;收据成功获取之后，需要服务端告诉 收据 的验签结果
    &lt;ul&gt;
      &lt;li&gt;成功, 客户端关单&lt;/li&gt;
      &lt;li&gt;失败, 提供客户端信息&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;参考:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://medium.com/@tyy.sh/in-app-purchase-%E6%80%BB%E7%BB%93-e8a88a54d8d9&quot;&gt;IAP&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://ifumei.cc/2019/12/24/iospay/&quot;&gt;springboot接入苹果内购&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.apple.com/documentation/storekit/original_api_for_in-app_purchase/validating_receipts_with_the_app_store&quot;&gt;苹果校验流程&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>dengqinghua</name></author><summary type="html">sequenceDiagram autonumber participant sdk as iOS SDK participant b as Backend participant as as Apple Service sdk-&amp;gt;&amp;gt;b: 获取商品列表 b--&amp;gt;&amp;gt;sdk: 从后台获取商品id和对应展示的图片文案信息 sdk-&amp;gt;&amp;gt;b: 根据商品id 生成/获取预订单 Note right of sdk: 需要先去查一下这个用户在商品id下之前是不是有未完成的订单 b--&amp;gt;&amp;gt;sdk: 返回 订单sid sdk-&amp;gt;&amp;gt;as: 发起真实的支付 as--&amp;gt;&amp;gt;sdk: 用户支付, 苹果返回票据信息(receipt-data)如果苹果未返回, 则在 App 启动的时候返回 sdk-&amp;gt;&amp;gt;b: 提交票据信息和 订单sid 到服务端 Note right of sdk: 这一步容易丢单, 如何解决? 因为苹果容易丢失掉订单sid 需要取未完成的一条 b-&amp;gt;&amp;gt;as: 验证票据信息 as--&amp;gt;&amp;gt;b: 验证成功/失败 b--&amp;gt;&amp;gt;sdk: 修改订单状态, 并通知SDK支付成功或失败 sdk--&amp;gt;&amp;gt;as: 成功则将订单进行关闭</summary></entry><entry><title type="html">从 0 到 1 搭建 ease 后端服务</title><link href="https://dengqinghua.github.io/3-month-sharing.html" rel="alternate" type="text/html" title="从 0 到 1 搭建 ease 后端服务" /><published>2021-07-26T00:00:00+08:00</published><updated>2021-07-26T00:00:00+08:00</updated><id>https://dengqinghua.github.io/3-month-sharing</id><content type="html" xml:base="https://dengqinghua.github.io/3-month-sharing.html">&lt;p&gt;该部分为后端团队 (2人) 从0 到 1 搭建的一套架构体系。&lt;/p&gt;

&lt;blockquote&gt;

  &lt;p&gt;由于公司和团队的整体规模不大，从业务的发展和业务的复杂度来说，
应选择 &lt;strong&gt;快速部署，成本(机器/运维和部署)低，依赖少，稳定性高&lt;/strong&gt; 的架构。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这里的架构主要由三部分构成&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Devops 基于 gitlab CI/CD 轻量级 Devops, 可实现完整的自动部署，扩容的操作&lt;/li&gt;
  &lt;li&gt;业务 前后端分离，后端使用 BFF + Microservice 的架构，前端使用 React 技术栈&lt;/li&gt;
  &lt;li&gt;中间件 选择比较稳定的中间件，如 MySQL，Redis 和 ES 等。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;从成本问题上考虑，大多数的中间件都是购买的，会根据现有的业务情况选择不同类型的中间件&lt;/p&gt;

&lt;h1 id=&quot;架构&quot;&gt;架构&lt;/h1&gt;
&lt;div class=&quot;mermaid&quot;&gt;
graph TB;
    arch([Ease]);
    op([Devops]);
    op1(gitlab CI/CD)
    op2(数据采集&lt;br /&gt; BizLog MetricLog SystemLog)
    op3(网关)
    op4(报警)
    biz([业务]);
    biz1(Java);
    biz2(H5,APP,WEB);
    sys([中间件]);
    sys0(Nginx);
    sys1(ELK);
    sys2(MySQL);
    sys3(Redis);
    sys4(Pulsa队列);
    sys5(BI);
    arch--&amp;gt;op &amp;amp; biz &amp;amp; sys;
    op--&amp;gt;op1 &amp;amp; op2 &amp;amp; op3 &amp;amp; op4;
    biz--&amp;gt;biz1 &amp;amp; biz2;
    sys--&amp;gt;sys0 &amp;amp; sys1 &amp;amp; sys2 &amp;amp; sys3 &amp;amp; sys4 &amp;amp; sys5;
&lt;/div&gt;

&lt;h2 id=&quot;devops&quot;&gt;Devops&lt;/h2&gt;
&lt;div class=&quot;mermaid&quot;&gt;
graph TB;
    op([Devops]);
    op1(gitlab CI/CD)
    op11(自动部署)
    op12(快速扩容)
    op13(权限控制)
    op2(数据采集)
    op20(日志数据 &lt;br /&gt; ELK)
    op21(SLO/SLI &lt;br /&gt; Kibana看板)
    op22(系统数据 &lt;br /&gt; Netdata)
    op23(业务数据 &lt;br /&gt; BI看板)
    op24(SBA &lt;br /&gt; Spring Metrics)
    op25(服务质量 &lt;br /&gt; TPS)
    op3(报警)
    op31(业务数据)
    op32(错误率)
    op33(服务器指标)
    op--&amp;gt;op1 &amp;amp; op2 &amp;amp; op3;
    op1--&amp;gt;op11 &amp;amp; op12 &amp;amp; op13;
    op2--&amp;gt;op20 &amp;amp; op21 &amp;amp; op22 &amp;amp; op23 &amp;amp; op24 &amp;amp; op25;
    op3--&amp;gt;op31 &amp;amp; op32 &amp;amp; op33;
    click op11 &quot;https://gitlab.easeprime.com/ease/backend_service/-/blob/dev/.gitlab-ci.yml#L17&quot; _blank
    click op12 &quot;https://gitlab.easeprime.com/ease/nginx-prod-conf/-/blob/master/sites-enabled-erb/java&quot; _blank
    click op13 &quot;https://gitlab.easeprime.com/ease/backend_service/-/settings/ci_cd&quot; _blank
    click op1 &quot;https://docs.gitlab.com/ee/ci/introduction/img/gitlab_workflow_example_11_9.png&quot; _blank
    click op20 &quot;https://es-ras1ax3s.kibana.tencentelasticsearch.com:5601/app/discover#/?_g=(filters:!(),query:(language:kuery,query:''),refreshInterval:(pause:!f,value:900000),time:(from:now-24h,to:now))&amp;amp;_a=(columns:!(message,container.name),filters:!(),index:'16ad3800-cf56-11eb-83c7-d711353ac049',interval:auto,query:(language:kuery,query:''),sort:!())&quot; _blank
    click op21 &quot;http://bi.easeprime.com/question/9?type=STORY&amp;amp;percent=0.99&amp;amp;day=30&amp;amp;playCount=10&amp;amp;dayCreatedAt=30&quot; _blank
    click op22 &quot;http://metrics.easeprime.com&quot; _blank
    click op23 &quot;http://bi.easeprime.com/question/9?type=STORY&amp;amp;percent=0.99&amp;amp;day=30&amp;amp;playCount=10&amp;amp;dayCreatedAt=30&quot; _blank
    click op24 &quot;http://sba.easeprime.com&quot; _blank
    style op3 fill:#f96f,stroke-dasharray: 5 5
&lt;/div&gt;

&lt;h3 id=&quot;gitlab&quot;&gt;Gitlab&lt;/h3&gt;
&lt;p&gt;Gitlab 作为我们内部代码托管的工具，在权限控制，CodeReview, CI/CD 上都有非常完善的流程。&lt;/p&gt;

&lt;p&gt;但 Gitlab 在部署上，对机器的性能有&lt;a href=&quot;https://docs.gitlab.com/ee/install/requirements.html&quot;&gt;相对较高的要求&lt;/a&gt;, 建议的配置为 4C/4G&lt;/p&gt;

&lt;h4 id=&quot;部署经验&quot;&gt;部署经验&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;使用 &lt;a href=&quot;https://github.com/sameersbn/docker-gitlab&quot;&gt;docker-compose&lt;/a&gt; 进行配置, 并将配置文件使用 git 管理&lt;/li&gt;
  &lt;li&gt;部署在 4C8G 的机器配置&lt;/li&gt;
  &lt;li&gt;配置定时重启 或者 &lt;a href=&quot;https://docs.gitlab.com/ee/administration/operations/puma.html&quot;&gt;PumaWorkerKiller&lt;/a&gt;，防止内存泄漏&lt;/li&gt;
  &lt;li&gt;开启定时备份&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;分支管理&quot;&gt;分支管理&lt;/h4&gt;
&lt;p&gt;分支的协作方式，我们参考的是 &lt;a href=&quot;https://docs.gitlab.com/ee/topics/gitlab_flow.html&quot;&gt;Gitlab-Flow&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;类似于 Gitlab-Flow 的模式，我们维护的分支只有四种&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;分支&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;存活时间&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;dev，主分支&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;永久&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;feature&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&amp;lt;3天，需要尽快 review，并合并到 dev 分支中&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;release_xxx&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;只保留最新版本，作为线上的发布分支&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;fix_xxx&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;bug-fix分支 &amp;lt;1天，需要尽快 review，并合并到 release 和 dev 分支中&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;一个开发人员的完整开发故事线如下:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;小明接到了一个需求 (feature)&lt;br /&gt;&lt;br /&gt;
他先设计好了表结构 (feat_1: design schema)，经过 codeReview 之后, 代码被 merge 到了 dev 分支上之后，他开始了实现基本的逻辑开发 (feat_2: implement services)，codeReview 之后，代码又被 merge 到 dev 分支了。&lt;br /&gt;&lt;br /&gt;
由于每次 merge 到 dev 都会触发部署操作，此时前端的APP开发同学就可以进行接口调试了。等整个功能都完善了，他们整理了要上线的功能，统一的 cherry-pick 到了一个 release_xxx 分支，这个分支一旦被 push 之后，就会自动进行 qa 环境的部署，并通知 qa 进行测试。&lt;br /&gt;&lt;br /&gt;
之后 qa 测试出了 bug，他直接基于 release 分支，修复了bug (fix_bug_1), 并将代码 merge 到 release 分支，同时 cherry-pick 到 dev 的分支。&lt;br /&gt;&lt;br /&gt;
qa 测试完成之后，就可以直接上线 这个分支了。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;mermaid&quot;&gt;
sequenceDiagram
    autonumber
    participant feat as feature
    participant dev as dev
    participant release as release
    participant fix as fix

    par 开发feat_1
    dev-&amp;gt;&amp;gt;feat: checkout feat_1
    feat--&amp;gt;&amp;gt;dev: merge feat_1
    end
    par 开发feat_2
    dev-&amp;gt;&amp;gt;feat: checkout feat_2
    feat--&amp;gt;&amp;gt;dev: merge feat_2
    end
    par 测试
    dev-&amp;gt;&amp;gt;release: cherry-pick feat_1, feat_2
    end
    par 解决 bug
    release-&amp;gt;&amp;gt;fix: checkout fix_bug_1
    fix--&amp;gt;&amp;gt;release: merge fix_bug_1
    fix--&amp;gt;&amp;gt;dev: cherry-pick fix_bug_1
    end
&lt;/div&gt;

&lt;h4 id=&quot;基于-cicd-的环境部署dev-qa-和-prod&quot;&gt;基于 CI/CD 的环境部署(dev, qa 和 prod)&lt;/h4&gt;
&lt;p&gt;为了简化整个研发流程，节省机器资源，最快地进行上线，我们只设置了三个环境&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;环境&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;分支&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;部署时机&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;自动/手动&lt;/th&gt;
      &lt;th&gt;例子&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;开发环境&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;dev&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;分支合并至 dev 时&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;自动&lt;/td&gt;
      &lt;td&gt;&lt;img src=&quot;assets/images/ci-dev.png&quot; alt=&quot;ci-dev&quot; /&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;测试环境&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;release_xxx&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;开头为 release  的分支 push 时&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;自动&lt;/td&gt;
      &lt;td&gt;&lt;img src=&quot;assets/images/ci-qa.png&quot; alt=&quot;ci-qa&quot; /&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;生产环境&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;release_xxx&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;手动点击部署操作&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;手动&lt;/td&gt;
      &lt;td&gt;&lt;img src=&quot;assets/images/ci-prod.png&quot; alt=&quot;ci-prod&quot; /&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&quot;核心配置数据维护至-gitlab-中&quot;&gt;核心配置数据维护至 gitlab 中&lt;/h4&gt;
&lt;p&gt;一些比较敏感的数据，如 token，密码等，可以统一放在 gitlab 中进行维护和管理，并在 CI 脚本中使用该变量。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/important-msgs.png&quot; alt=&quot;importtant-msgs&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;经验总结&quot;&gt;经验总结&lt;/h4&gt;
&lt;ol&gt;
  &lt;li&gt;feature 分支的生命周期，越短越好，所有的开发功能需要尽快合并到 dev 分支上，大的功能需要拆成不同的小的 commit 分步骤去合并。&lt;/li&gt;
  &lt;li&gt;每一个 commit 做的事情，尽量独立且简单，这样能够避免掉非常多的冲突。&lt;/li&gt;
  &lt;li&gt;关注开发环境/测试环境 的一些错误，他能让你提前思考生成环境可能出现的 历史数据处理，脏数据问题，NPE 问题等。提前做好预备和思考。&lt;/li&gt;
  &lt;li&gt;不需要提前关注性能（除非是有很明显的 N+1 查询这样的问题），尽量写简单的，可维护的代码。&lt;/li&gt;
  &lt;li&gt;不需要过于执着开发/测试环境和生产一致，因为 生产环境 的流量，访问路劲，数据量都可能是不一样的，与其花很大精力保持一致性，还不如聚焦在业务本身。&lt;/li&gt;
  &lt;li&gt;永远不要去自己上服务器进行修改配置，部署服务等，而是要交给 CI 进行处理。&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;数据采集&quot;&gt;数据采集&lt;/h3&gt;
&lt;p&gt;我们的数据来源非常多，可以采集的数据也很多。这里我们将数据分成了三类&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;BizLog 业务日志，所有接口请求的日志数据&lt;/li&gt;
  &lt;li&gt;SysLog 系统日志，包括服务器的各种指标监控&lt;/li&gt;
  &lt;li&gt;AppLog 服务日志，包括服务的 heartbeat，JVM 数据等日志监控&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;对于上述的日志，都可以采用 ELK 的技术栈进行收集。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/es-stack.png&quot; alt=&quot;es-stack&quot; /&gt;&lt;/p&gt;

&lt;p&gt;但是实际上 系统日志 和 服务日志，对我们的价值是比较有限的（出现问题的概率相对较小），而且当前的服务都是 Java 的，所以在 系统日志 和 服务日志中我们选择了其他的方式，业务日志使用 ELK 进行收集。&lt;/p&gt;

&lt;h4 id=&quot;bizlog-业务日志&quot;&gt;BizLog 业务日志&lt;/h4&gt;
&lt;p&gt;业务日志为用户访问接口的日志，使用用户接口日志进行分析，相比于直接引入 SDK 到服务的方式，会更加灵活，而且配合着强大的 Logstash 和 Kibana 的报表功能，可以很快地做出非常多的统计数据。&lt;/p&gt;

&lt;details&gt;
  &lt;summary&gt;
Source
&lt;/summary&gt;
  &lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;mermaid&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;markdown=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
stateDiagram-v2
    s1: BizLog to File
    s2: Filebeat to Logstash
    s3: format Log then to ES
    s4: Kibana Dashborad, Watchers and Alerts
    note left of s1
        2021-10-29 10:45:03.388&lt;span class=&quot;nt&quot;&gt;&amp;lt;br&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;  INFO : api log, url = /api/adv/detail,&lt;span class=&quot;nt&quot;&gt;&amp;lt;br&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt; params = [{&quot;code&quot;:&quot;forYou&quot;}],&lt;span class=&quot;nt&quot;&gt;&amp;lt;br&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt; result = {&quot;body&quot;:{&quot;id&quot;:1,&quot;img&quot;:&quot;aaa&quot;},&quot;code&quot;:&quot;200&quot;,&quot;status&quot;:200},&lt;span class=&quot;nt&quot;&gt;&amp;lt;br&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt; time cost = 0 ms
    end note
    s1 --&amp;gt; s2
    note left of s2
        message: &quot;2021-10-29 10:45:03.388  INFO : .. result = {...}, time cost = 0 ms&quot;
        host: 172.21.16.1
        metadata: ...
    end note
    s2 --&amp;gt; s3
    note left of s3
        source: ...
        requestTime: &quot;2021-10-29 10:45:03.388&quot;,
        requestUri: &quot;/api/adv/detail&quot;,
        timeCost: 0,
        logLevel: INFO,
        host: 172.21.16.1
    end note
    s3 --&amp;gt; s4
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/details&gt;
&lt;p&gt;&lt;img src=&quot;assets/images/logExample.png&quot; alt=&quot;logExample&quot; /&gt;&lt;/p&gt;

&lt;p&gt;通过 Kibana，我们主要建立了四种维度的数据视图&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;数据维度&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;目的&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;示例&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;日志源数据&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;日常查询问题&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;img src=&quot;assets/images/logQuery.png&quot; alt=&quot;logQuery&quot; /&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;接口统计&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;建立 SLI/SLO&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;img src=&quot;assets/images/SLI-SLO.png&quot; alt=&quot;SLI-SLO&quot; /&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;报警数据&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;ERROR/LATENCY/QPS 的报警&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;img src=&quot;assets/images/watcher_example.png&quot; alt=&quot;SLI-SLO&quot; /&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;业务数据&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;某类业务数据监控(如搜索统计等)&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;img src=&quot;assets/images/search_example.png&quot; alt=&quot;search_example&quot; /&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&quot;syslog-系统日志&quot;&gt;SysLog 系统日志&lt;/h4&gt;
&lt;p&gt;系统日志收集我们使用的是 &lt;a href=&quot;https://github.com/netdata/netdata&quot;&gt;netdata&lt;/a&gt;，如下所示(图片来自官网)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/netdata-example.gif&quot; alt=&quot;netdata-example&quot; /&gt;&lt;/p&gt;

&lt;p&gt;netdata 不仅包括对基本的 CPU，内存 等数据的图形化展示，更包括了 Applications 的资源占用数据统计。&lt;/p&gt;

&lt;h4 id=&quot;applog-服务日志&quot;&gt;AppLog 服务日志&lt;/h4&gt;
&lt;p&gt;考虑到我们的核心服务都是 Java 服务， 服务日志收集我们使用的是 &lt;a href=&quot;https://github.com/codecentric/spring-boot-admin&quot;&gt;Spring Boot Admin&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/sba-example.png&quot; alt=&quot;sba-example&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这里可以对最基本的 JVM 数据进行统计，并整合了 Spring 原生的很多特性，并可以支持 dump 线程数据等，对于日常的错误排查已经足够了。&lt;/p&gt;

&lt;h4 id=&quot;经验总结-1&quot;&gt;经验总结&lt;/h4&gt;
&lt;ol&gt;
  &lt;li&gt;大多数日志是无用的。正如你的代码大多数时候是看起来没有 Bug 的。&lt;/li&gt;
  &lt;li&gt;关注系统数据，比如系统的 QPS，平均时延，调用链路等。这些数据往往来代表你的业务的健康程度，以及系统是否需要进行改造的判断。&lt;/li&gt;
  &lt;li&gt;谨慎地引入第三方统计组件。统计本身并不复杂，应该将注意力放在核心数据上。&lt;/li&gt;
  &lt;li&gt;日志的处理可能比日志本身更重要。一些核心的字段应该考虑通过 logstash 抽离出来，作为统计需要的核心字段。&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;报警&quot;&gt;报警&lt;/h3&gt;
&lt;h4 id=&quot;业务报警errorlatencyqps&quot;&gt;业务报警(ERROR/LATENCY/QPS)&lt;/h4&gt;
&lt;p&gt;在对基础的数据进行了统计之后，结合 ES 的 watcher 功能，可以非常方便地实现报警功能，LATENCY 的例子如下&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/alert-example.png&quot; alt=&quot;alert-example&quot; /&gt;&lt;/p&gt;

&lt;p&gt;除了上面的基本配置之后，ES 还可以支持非常丰富的查询检索。ERROR 和 QPS 的报警，是通过自定义 input, transform, 并结合 painless 脚本进行报警的。&lt;/p&gt;

&lt;details&gt;
  &lt;summary&gt;
QPS 在1分钟的阈值检测
&lt;/summary&gt;
  &lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;trigger&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;schedule&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;s2&quot;&gt;&quot;interval&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;1m&quot;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;input&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;search&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;s2&quot;&gt;&quot;request&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;search_type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;query_then_fetch&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;indices&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
          &lt;span class=&quot;s2&quot;&gt;&quot;logstash&quot;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;rest_total_hits_as_int&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;body&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;s2&quot;&gt;&quot;aggs&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;s2&quot;&gt;&quot;urlCount&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
              &lt;span class=&quot;s2&quot;&gt;&quot;terms&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;s2&quot;&gt;&quot;field&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;reqUri&quot;&lt;/span&gt;
              &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
          &lt;span class=&quot;s2&quot;&gt;&quot;size&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;s2&quot;&gt;&quot;track_total_hits&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;s2&quot;&gt;&quot;query&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;s2&quot;&gt;&quot;bool&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
              &lt;span class=&quot;s2&quot;&gt;&quot;filter&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
              &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;s2&quot;&gt;&quot;range&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                  &lt;span class=&quot;s2&quot;&gt;&quot;reqTime&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;s2&quot;&gt;&quot;gte&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;||-1m&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                    &lt;span class=&quot;s2&quot;&gt;&quot;lte&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                    &lt;span class=&quot;s2&quot;&gt;&quot;format&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;strict_date_optional_time||epoch_millis&quot;&lt;/span&gt;
                  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
              &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
              &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;s2&quot;&gt;&quot;exists&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                  &lt;span class=&quot;s2&quot;&gt;&quot;field&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;reqUri&quot;&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
              &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
              &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;condition&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;script&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;s2&quot;&gt;&quot;source&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;if (ctx.payload.hits.total &amp;gt;= params.threshold) { return true; } return false;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;s2&quot;&gt;&quot;lang&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;painless&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;s2&quot;&gt;&quot;params&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;threshold&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3000&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;actions&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;webhook_1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;s2&quot;&gt;&quot;webhook&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;scheme&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;http&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;host&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;172.21.16.10&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;port&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;method&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;post&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;path&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;email/sender&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;params&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{},&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;headers&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;s2&quot;&gt;&quot;Accept&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;application/json&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;s2&quot;&gt;&quot;Content-Type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;application/json&quot;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;body&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;ctx.payload&quot;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;transform&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;script&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;s2&quot;&gt;&quot;source&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&quot;return
        ['subject': 'Ease QPS 异常统计',
      'cc': [],
      'to': ['qinghua.deng@email.com'],
      'msg_list': ctx.payload.aggregations.urlCount.buckets.stream().map(t -&amp;gt; t.key + ': ' + t.doc_count + '次').collect(Collectors.toList()),
      'msg_intro': '1分钟内的接口调用次数: ' + ctx.payload.hits.total + ', 高于阈值: 3000'
        ]&quot;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;lang&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;painless&quot;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/details&gt;

&lt;details&gt;
  &lt;summary&gt;
ERROR 在1分钟内的检测
&lt;/summary&gt;
  &lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;trigger&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;schedule&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;s2&quot;&gt;&quot;interval&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;1m&quot;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;input&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;search&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;s2&quot;&gt;&quot;request&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;search_type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;query_then_fetch&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;indices&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
          &lt;span class=&quot;s2&quot;&gt;&quot;logstash&quot;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;rest_total_hits_as_int&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;body&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;s2&quot;&gt;&quot;size&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;s2&quot;&gt;&quot;query&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;s2&quot;&gt;&quot;bool&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
              &lt;span class=&quot;s2&quot;&gt;&quot;filter&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
              &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;s2&quot;&gt;&quot;range&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                  &lt;span class=&quot;s2&quot;&gt;&quot;timestamp&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;s2&quot;&gt;&quot;gte&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;||-1m&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                    &lt;span class=&quot;s2&quot;&gt;&quot;lte&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                    &lt;span class=&quot;s2&quot;&gt;&quot;format&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;strict_date_optional_time||epoch_millis&quot;&lt;/span&gt;
                  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
              &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
              &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;s2&quot;&gt;&quot;term&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                  &lt;span class=&quot;s2&quot;&gt;&quot;logLevel&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;s2&quot;&gt;&quot;value&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;ERROR&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                    &lt;span class=&quot;s2&quot;&gt;&quot;boost&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
                  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
              &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
              &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;condition&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;script&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;s2&quot;&gt;&quot;source&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;if (ctx.payload.hits.total &amp;gt;= params.threshold) { return true; } return false;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;s2&quot;&gt;&quot;lang&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;painless&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;s2&quot;&gt;&quot;params&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;threshold&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;actions&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;webhook_1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;s2&quot;&gt;&quot;webhook&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;scheme&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;http&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;host&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;172.21.16.10&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;port&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;method&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;post&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;path&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;email/sender&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;params&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{},&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;headers&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;s2&quot;&gt;&quot;Accept&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;application/json&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;s2&quot;&gt;&quot;Content-Type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;application/json&quot;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;body&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;ctx.payload&quot;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;transform&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;script&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;s2&quot;&gt;&quot;source&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&quot;return ['subject': 'Ease ERROR 报警', 'cc': [], 'to': ['qinghua.deng@email.com'], 'msg_intro': '错误信息: ' + ctx.payload.hits.hits.0._source.message ]&quot;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;s2&quot;&gt;&quot;lang&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;painless&quot;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/details&gt;

&lt;h4 id=&quot;系统报警&quot;&gt;系统报警&lt;/h4&gt;
&lt;p&gt;这里未做系统报警，我们购买的云服务器，所以该部分的报警依赖于 云服务商(腾讯云) 的报警服务。&lt;/p&gt;

&lt;h4 id=&quot;服务报警&quot;&gt;服务报警&lt;/h4&gt;
&lt;p&gt;服务的报警是通过 SpringbootAdmin 来做的。SpringbootAdmin 会和 Spring 的应用进行心跳连接，在检测到服务 UP/DOWN 的时候会发出对应的事件。这里配置了简单的邮件报警。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/sba-event.png&quot; alt=&quot;sba-event.png&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;思考&quot;&gt;思考&lt;/h4&gt;
&lt;ol&gt;
  &lt;li&gt;报警本身没有业务本身重要，个人理解不需要花太多的时间在上面。&lt;/li&gt;
  &lt;li&gt;及时处理报错信息，不需要处理的报错信息，就应该让他不要报错，报错信息过多会掩盖掉真正的问题。&lt;/li&gt;
  &lt;li&gt;报错维度不在多，而应该是信息简单，仅给出必要的详细信息。&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;网关&quot;&gt;网关&lt;/h3&gt;
&lt;h4 id=&quot;核心功能&quot;&gt;核心功能&lt;/h4&gt;
&lt;p&gt;作为整个服务顶层的网关，他承载着流量的入口左右，在这一层，我们使用了 Nginx 作为系统的网关。&lt;/p&gt;

&lt;p&gt;通过网关，我们实现了下面的功能&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;反向代理&lt;/li&gt;
  &lt;li&gt;负载均衡&lt;/li&gt;
  &lt;li&gt;基础鉴权&lt;/li&gt;
  &lt;li&gt;HTTPS&lt;/li&gt;
  &lt;li&gt;压缩/解压&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;安全&quot;&gt;安全&lt;/h4&gt;
&lt;p&gt;当我们的业务量上升之后，先后遇到了 DDOS，短信接口攻击，挖矿脚本注入等。系统本身的安全变得非常重要，除了购买基础的 云安全服务 之外，我们使用 Nginx 作为网关维度的安全组件。主要包括下面的内容&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;黑白IP名单控制&lt;/li&gt;
  &lt;li&gt;流量控制&lt;/li&gt;
  &lt;li&gt;连接数控制&lt;/li&gt;
  &lt;li&gt;接口调用频次控制&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;思考-1&quot;&gt;思考&lt;/h4&gt;
&lt;ol&gt;
  &lt;li&gt;在选择网关时，我们遇到一个问题，是否需要引入比较重的中间件？如 Kong，Gravitee，Tyk 等。大多数的组件都做得非常重，比如 Kong 还需要依赖 PG，本身比较占用资源，使用上必须用 API 才可以操作(Admin 版本需要收费)。&lt;/li&gt;
  &lt;li&gt;而对于当前的业务场景，其实基础的 Nginx 已经满足我们的需求了。而且 Nginx 本身的配置文件可以分开配置，非常好维护和管理，对于小业务反而是一种优势。&lt;/li&gt;
  &lt;li&gt;安全 和 报警一样，是一样性价比不高的系统（但是很重要）尽量做到业务无感知，而且不能伤害到正常用户，这样才能最大地释放业务服务部分的能力，让业务更专注于业务。&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;业务&quot;&gt;业务&lt;/h2&gt;
&lt;p&gt;在业务架构层设计上，我们使用 BFF + Microservice 的方式，BFF 作为业务端的流量承接入口，Microservice 作为模块化的服务(并不是指业界的大而全微服务体系)&lt;/p&gt;

&lt;div class=&quot;mermaid&quot;&gt;
graph TB;
    biz1(业务);
    biz11(BFF-App);
    biz12(BFF-Admin);
    biz-m1(microservice&lt;br /&gt; 内容&lt;br /&gt;单曲 合集 Q&amp;amp;E 老师等)
    biz-m3(microservice&lt;br /&gt; 支付&lt;br /&gt; 微信 支付宝 华为支付 苹果支付)
    biz-m4(microservice&lt;br /&gt; 用户&lt;br /&gt;登录/注册 反馈 VIP信息)
    biz-m5(microservice&lt;br /&gt; 运营活动&lt;br /&gt; 广告 Banner 优惠活动)
    biz-m6(microservice&lt;br /&gt; 用户日志&lt;br /&gt;音频播放日志)
    biz-m7(microservice&lt;br /&gt; RBAC&lt;br /&gt;权限 角色)
    biz1--&amp;gt;biz11 &amp;amp; biz12;
    biz11 --&amp;gt; biz-m3 &amp;amp; biz-m4 &amp;amp; biz-m6
    biz11 &amp;amp; biz12 --&amp;gt; biz-m1 &amp;amp; biz-m5 &amp;amp; biz-m7
&lt;/div&gt;

&lt;h3 id=&quot;bffbackend-for-frontend&quot;&gt;BFF，Backend for Frontend&lt;/h3&gt;
&lt;p&gt;BFF 层为流量入口, 主要处理 鉴权，参数校验，拼装 microservice 接口中需要的参数，并聚合各个 microservice 的返回结果，我们的缓存也会放在 BFF 层&lt;/p&gt;

&lt;div class=&quot;mermaid&quot;&gt;
graph LR;
    biz1(首页为你接口 &lt;br /&gt;/tag/media/group/v2/forYou);
    check(校验参数 获取用户id);
    biz11(内容&lt;br /&gt;单曲 合集 Q&amp;amp;E 老师等);
    biz12(用户&lt;br /&gt; VIP信息);
    biz13(运营活动&lt;br /&gt; 广告 Banner 优惠活动);
    biz14(用户日志&lt;br /&gt;音频播放日志);
    final(聚合数据)
    biz1--&amp;gt;check--&amp;gt;biz11 &amp;amp; biz12 &amp;amp; biz13 &amp;amp; biz14--&amp;gt;final;
&lt;/div&gt;

&lt;h3 id=&quot;microservice&quot;&gt;Microservice&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;这里的微服务并不是业务的微服务，而是模块化的微服务。当前的组织架构，并不需要一个微服务去承接整个系统。此外，团队在微服务的经验和知识储备是不够的。&lt;/li&gt;
  &lt;li&gt;所以这里的微服务只是模块化的微服务，按照 DDD 的思路进行了模块拆分，控制好领域内模型的调用链路，为之后的服务拆分做准备。&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;mermaid&quot;&gt;
graph TB;
    m(Microservices);
    m1(内容&lt;br /&gt;单曲 合集 Q&amp;amp;E 老师等)
    m2(支付&lt;br /&gt; 微信 支付宝 华为支付 苹果支付)
    m3(用户&lt;br /&gt;登录/注册 反馈 VIP信息)
    m4(运营活动&lt;br /&gt; 广告 Banner 优惠活动)
    m5(用户日志&lt;br /&gt;音频播放日志)
    m6(RBAC&lt;br /&gt;权限 角色)
    m7(EventReach&lt;br /&gt;Push 短信 微信消息)
    m8(搜索)
    m--&amp;gt;m1 &amp;amp; m2 &amp;amp; m3 &amp;amp; m4 &amp;amp; m5 &amp;amp; m6 &amp;amp; m7 &amp;amp; m8
&lt;/div&gt;

&lt;h3 id=&quot;思考-2&quot;&gt;思考&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;大多数产品可能不需要所谓的微服务的架构。&lt;/li&gt;
  &lt;li&gt;但是微服务的一些概念和思考方式，很值得借鉴。&lt;/li&gt;
  &lt;li&gt;理论上让业务层越简单越好，让业务专注于业务，而不是过多地关注安全，流量，连接等。&lt;/li&gt;
  &lt;li&gt;多关注业务数据，思考业务数据是怎么产生的，并怎么回归到产品中去。&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;中间件&quot;&gt;中间件&lt;/h2&gt;
&lt;div class=&quot;mermaid&quot;&gt;
graph TB;
    sys([中间件]);
    sys0(Nginx);
    sys00(HTTPS);
    sys01(反向代理);
    sys02(负载均衡);
    sys03(HTTP Auth);
    sys1(ELK);
    sys11(日志收集);
    sys12(报表输出);
    sys2(BI/大数据);
    sys3(MySQL);
    sys4(Redis);
    sys5(Pulsa队列);
    sys--&amp;gt;sys0 &amp;amp; sys1 &amp;amp; sys2 &amp;amp; sys3 &amp;amp; sys4 &amp;amp; sys5;
    sys0--&amp;gt;sys00 &amp;amp; sys01 &amp;amp; sys02 &amp;amp; sys03;
    sys1--&amp;gt;sys11 &amp;amp; sys12;
&lt;/div&gt;

&lt;p&gt;中间件支撑着整个业务系统的运转，他们贯穿在整个系统中。&lt;/p&gt;

&lt;h3 id=&quot;选择中间件标准&quot;&gt;选择中间件标准&lt;/h3&gt;
&lt;p&gt;这里的选择标准包括&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;稳定性高。&lt;/li&gt;
  &lt;li&gt;符合团队的技术栈。&lt;/li&gt;
  &lt;li&gt;运维成本小。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;比如我们会选择 Nginx，则不是 Kong，选择 MySQL 而不是其他的数据库。&lt;/p&gt;

&lt;h3 id=&quot;购买还是自建&quot;&gt;购买还是自建&lt;/h3&gt;
&lt;p&gt;我们经常遇到一个问题，MySQL 自建还是购买？ES 可以直接一个命令搭建起来，要不要使用自建的服务？Redis 的部署很简单，要不要自己搭建？&lt;/p&gt;

&lt;p&gt;经过思考和讨论之后，有下面几个维度的考虑&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;内部人员使用的系统，不对外开放的，考虑自建，如 BI 系统。&lt;/li&gt;
  &lt;li&gt;面向用户的，涉及到用户数据的，购买。如 MySQL，Redis 等&lt;/li&gt;
  &lt;li&gt;部署和运维成本很高的，购买。如比较吃资源的 ES，部署组件非常多的 Pulsa 队列，我们都进行了购买，直接使用了云服务。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;当然，上面也考虑到了灵活性，比如 Nginx，团队内部比较有配置和部署的经验，所以也是使用的自建的 Nginx。&lt;/p&gt;

&lt;h3 id=&quot;思考-3&quot;&gt;思考&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;无论是引入哪一种组件，购买还是自建，都需要自己先进行一段时间的考察和试用，横纵向进行多维度的对比之后，再做一些考虑。&lt;/li&gt;
  &lt;li&gt;维护好重要的数据，并进行备份。&lt;/li&gt;
  &lt;li&gt;内部使用的中间件尽量要和用户使用的系统分开。比如 BI 使用的 MySQL，我们则购买了一个从库，专门给 BI 进行使用。&lt;/li&gt;
&lt;/ol&gt;</content><author><name>dengqinghua</name></author><summary type="html">该部分为后端团队 (2人) 从0 到 1 搭建的一套架构体系。</summary></entry><entry><title type="html">晋升指南笔记</title><link href="https://dengqinghua.github.io/learn-how-to-promote.html" rel="alternate" type="text/html" title="晋升指南笔记" /><published>2021-07-14T00:00:00+08:00</published><updated>2021-07-14T00:00:00+08:00</updated><id>https://dengqinghua.github.io/learn-how-to-promote</id><content type="html" xml:base="https://dengqinghua.github.io/learn-how-to-promote.html">&lt;h2 id=&quot;comd-能力模型&quot;&gt;COMD 能力模型&lt;/h2&gt;
&lt;p&gt;COMD, aka, Complexity-Oriented Multi-Dimension 多维度 + 复杂度&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;维度
    &lt;ul&gt;
      &lt;li&gt;业务&lt;/li&gt;
      &lt;li&gt;技术&lt;/li&gt;
      &lt;li&gt;管理&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;复杂度
    &lt;ul&gt;
      &lt;li&gt;规模, 多少人参与, 多少个系统, 多少个功能, 多少个业务&lt;/li&gt;
      &lt;li&gt;时间, 开发时间周期, 技术预测的周期(多长时间进行技术更替), 业务规划的时间(1年/3年的业务方向和战略)&lt;/li&gt;
      &lt;li&gt;环境, 稳定性(是否经常变化), 透明性(是否能及时获取到商业资讯) 和 可预见性(是否会发生无法预测的黑天鹅事件)&lt;/li&gt;
      &lt;li&gt;创新, 包括 理论创新(新理论 从0到1), 思想创新(新的思路思考问题) 和 技巧创新(非常规的细节和技巧)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;简单归纳如下:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;维度/复杂度&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;规模复杂度&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;时间复杂度&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;环境复杂度&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;创新复杂度&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;技术维度&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;代码量, 系统数量&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;预测x年内的技术发展&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;稳定性低，透明度高，可预见性高&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;N/A&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;管理维度&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;涉及到团队的个数, 团队的人数&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;项目的持续时间&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;稳定性高，透明度高，可预见性高&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;N/A&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;业务维度&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;功能点的个数, 业务方数量&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;x年的业务规划&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;稳定性低，透明度低，可预见性低&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;N/A&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;所以，如果以上面的 COMD 能力模型来思考 &lt;strong&gt;企业的职级评定&lt;/strong&gt; 和 &lt;strong&gt;个人的能力评定&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;企业维度&quot;&gt;企业维度&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;员工技术能力如何?(体现在之前做过的项目经历，工作时长，属于例行工作吗? 创新性如何?)&lt;/li&gt;
  &lt;li&gt;员工会管理吗? (管理了多少个团队, 或者管理了多少人? 主导什么样的项目?)&lt;/li&gt;
  &lt;li&gt;员工业务能力怎么样?(最复杂的业务是什么? 是否参与过业务规划? 对未来业务的定位和判断是什么)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;个人维度&quot;&gt;个人维度&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;我的技术能力如何体现? (如何参与复杂的系统, 预测技术发展 和 进行技术创新)&lt;/li&gt;
  &lt;li&gt;我如何参与管理? (管理规模, 自我定位 和 时间分配)&lt;/li&gt;
  &lt;li&gt;我如何参与业务? (关键业务落地, x年业务规划如何制定? 如何进行业务创新)&lt;/li&gt;
&lt;/ul&gt;

&lt;details&gt;
  &lt;summary&gt;
Me?
&lt;/summary&gt;
  &lt;blockquote&gt;

    &lt;ol&gt;
      &lt;li&gt;我的技术能力如何体现?
        &lt;ul&gt;
          &lt;li&gt;从 0 到 1 的能力, 快速搭建一套完整的前后端系统, 包括 基础设施&lt;/li&gt;
          &lt;li&gt;在公司首席架构师带领下, 参与并主导了公司最复杂的系统: 角标系统的重构和落地(耗时1个月, 涉及三个部分的改造, 进行了技巧创新)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;我如何参与管理?
        &lt;ul&gt;
          &lt;li&gt;管理过 13个人的团队, 在管理期间主导了招商的商家从 入驻 到 上架 商品的全流程的技术设计&lt;/li&gt;
          &lt;li&gt;数据中台服务, 涉及到 三个团队, 耗时两个月左右, 负责数据中心的整体建模, 方案设计和最终落地&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;我如何参与业务?
        &lt;ul&gt;
          &lt;li&gt;从 0 到 1 开启 西瓜AI 业务线, 推动力 西瓜AI 课 从 投放, 拉新, 课程涉及 和 课程续费 的完整落地&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ol&gt;

    &lt;p&gt;从上面的内容来看, 还是有很大的进步空间&lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/details&gt;

&lt;h2 id=&quot;p6p9&quot;&gt;P6~P9&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;职级&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;要求&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;技术-管理-业务比重&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;P6&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;完成业务功能&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;10-0-0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;P7&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;管理1个团队中3~10人&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;7-2-1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;P8&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;管理一条业务线, 包括多个团队&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;N/A&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;P9&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;管理一条事业部, 包括多个业务线&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;N/A&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;什么样的人事品质更容易晋升&quot;&gt;什么样的人/事/品质更容易晋升&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;主动做事
    &lt;ul&gt;
      &lt;li&gt;关注业务目标和业务数据&lt;/li&gt;
      &lt;li&gt;关注自己负责的系统的各种指标和数据(机房部署/QPS/SLI/SLO/LATENCY)&lt;/li&gt;
      &lt;li&gt;关注对外的时间承诺&lt;/li&gt;
      &lt;li&gt;关注主管的成长路径&lt;/li&gt;
      &lt;li&gt;主动找主管沟通&lt;/li&gt;
      &lt;li&gt;主动和业务沟通&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;这一块很多事情是偏沟通的, 主动找你的主管沟通, 主动了解所负责的业务的数据&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;成长原则
    &lt;ul&gt;
      &lt;li&gt;跳出舒适圈&lt;/li&gt;
      &lt;li&gt;定期复盘&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;复盘: 做的好的/不好的/不好的原因/改进的点/踩过的坑&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;价值原则
    &lt;ul&gt;
      &lt;li&gt;个人能力/影响力价值(主要在面试的时候展示)&lt;/li&gt;
      &lt;li&gt;业务价值(晋升时候展示)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;需要分配好自身的时间, 不要在 &lt;strong&gt;看起来很重要但是对工作看来没有长远价值的事情&lt;/strong&gt; 上花太多时间, 比如学习 编译原理, 算法导论, 每天刷 leecode 等等&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;绩效关注结果, 晋升关注能力的提升&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;通用步骤&quot;&gt;通用步骤&lt;/h2&gt;

&lt;div class=&quot;mermaid&quot;&gt;
graph TB;
    id1[当前级别获得好绩效]--&amp;gt;id2[按下一级别的要求提升自身能力]--&amp;gt;id3[争取下一级别的事情]--&amp;gt;id4[拿到下一个级别的工作结果]--&amp;gt;id5[参加职级晋升]--&amp;gt;id1;
&lt;/div&gt;

&lt;h2 id=&quot;ppt&quot;&gt;PPT&lt;/h2&gt;
&lt;h3 id=&quot;基本认知&quot;&gt;基本认知&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;晋升需要有战功, 有绩效, 但是更重要的是突出 &lt;strong&gt;能力的提升&lt;/strong&gt;, 即 能力已经到底 晋升的级别&lt;/li&gt;
  &lt;li&gt;内容需要丰富, 但是需要有重点, 不能过于累赘让别人抓不住重点&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;框架&quot;&gt;框架&lt;/h3&gt;
&lt;div class=&quot;mermaid&quot;&gt;
graph LR;
    ppt([框架])--&amp;gt;introduction[自我介绍];
    ppt--&amp;gt;main[自述材料];
    ppt--&amp;gt;other[辅助内容];
    introduction--&amp;gt;mainPart1[基本信息, 包括团队, 业务, 职级 和 晋升的级别];
    introduction--&amp;gt;mainPart2[当前职责, 包括 业务, 团队规模, 核心岗位等情况];
    introduction--&amp;gt;mainPart3[工作经历, 需要突出亮点内容];
    main--&amp;gt;main1[3到5个论据, 展示出能力提升到申请的职级的级别];
    other--&amp;gt;other1[自我总结];
    other--&amp;gt;other2[发展规划];
&lt;/div&gt;

&lt;h3 id=&quot;自述材料&quot;&gt;自述材料&lt;/h3&gt;

&lt;p&gt;利用 &lt;a href=&quot;https://zhuanlan.zhihu.com/p/46584109&quot;&gt;金字塔原理&lt;/a&gt; 来描述做了什么。&lt;/p&gt;

&lt;p&gt;技巧&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;将 PPT 当做 &lt;strong&gt;提词器&lt;/strong&gt; 而不是演讲稿&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;内容和 &lt;strong&gt;目标职级&lt;/strong&gt; 能力要求强相关&lt;/p&gt;

    &lt;details&gt;
      &lt;summary&gt;
  Me?
  &lt;/summary&gt;
      &lt;blockquote&gt;

        &lt;p&gt;这个是非常大的教训，上次述职答辩时，过多地时间花在介绍业务的问题
  和当前的现状上，而不是放在 &lt;strong&gt;我已经达到了XXX级别的要求&lt;/strong&gt; 这一点上面。
  最后获得的反馈是：&lt;/p&gt;
        &lt;ol&gt;
          &lt;li&gt;仿佛走错了片场，以为是产品的述职&lt;/li&gt;
          &lt;li&gt;你现在做的事情体现的能力，是你当前的职级的能力，你很棒，但是并未达到 XXX级别 的要求&lt;/li&gt;
        &lt;/ol&gt;
      &lt;/blockquote&gt;
    &lt;/details&gt;
  &lt;/li&gt;
  &lt;li&gt;STAR(situation, task, action, result) 来描述论剧
    &lt;ul&gt;
      &lt;li&gt;Task 和 Action 一定要注意原创性(也就是哪些是你做的, 项目的成功是否代表你本身非常厉害, 你在里面做了什么很重要)&lt;/li&gt;
      &lt;li&gt;注意业务质量的输出, 成果是什么(用绝对值, 用具体的金额)&lt;/li&gt;
      &lt;li&gt;Result 一定要写的很具体&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;时间控制
    &lt;ul&gt;
      &lt;li&gt;提前预演(自己单独讲一遍, 拉上组内评审一遍)&lt;/li&gt;
      &lt;li&gt;用图来简化自己描述背景的时间&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;学习方法&quot;&gt;学习方法&lt;/h2&gt;
&lt;h3 id=&quot;海绵学习法-10000小时理论&quot;&gt;海绵学习法-10000小时理论&lt;/h3&gt;
&lt;p&gt;每天一小时(早上半小时, 上班前半小时, 睡前半小时), 周末两小时&lt;/p&gt;

&lt;p&gt;关键是要 &lt;strong&gt;可以坚持下来的方式&lt;/strong&gt;, 其实就跟减肥健身差不多, 需要坚持, 以 5年, 10年的维度来看&lt;/p&gt;

&lt;h3 id=&quot;规划落地输出&quot;&gt;规划/落地/输出&lt;/h3&gt;
&lt;p&gt;学习规划, 这里是更多指的是指阅读的规划&lt;/p&gt;

&lt;div class=&quot;mermaid&quot;&gt;
graph LR;
    split[拆分];
    split1[能力拆分];
    time1[时间拆分];
    action[行为拆分];
    split--&amp;gt;split1 &amp;amp; time1 &amp;amp; action;
    split1--&amp;gt;split2[技能/原理];
    split1--&amp;gt;split21[业务];
    split1--&amp;gt;split22[管理];
    split2--&amp;gt;split3[Paper];
    split2--&amp;gt;split5[专业书籍];
    split2--&amp;gt;split4[实战技巧如 文档等];
    time1--&amp;gt;time2[2到3年的大目标];
    time1--&amp;gt;time3[小目标控制在半年内];
    action--&amp;gt;action1[通读书籍];
    action--&amp;gt;action2[挑选和自己工作相关的重点阅读];
    action--&amp;gt;action3[遇到问题后再回顾];
    action--&amp;gt;action4[实战];
&lt;/div&gt;

&lt;p&gt;输出&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;名词和概念输出&lt;/li&gt;
  &lt;li&gt;文档/思考输出&lt;/li&gt;
  &lt;li&gt;分享&lt;/li&gt;
  &lt;li&gt;业务/实战&lt;/li&gt;
&lt;/ul&gt;

&lt;details&gt;
  &lt;summary&gt;
Me?
&lt;/summary&gt;
  &lt;blockquote&gt;

    &lt;ol&gt;
      &lt;li&gt;之前会为自己设计 &lt;a href=&quot;https://blog.dengqinghua.net/ruby_knowledge_tree.html&quot;&gt;知识树&lt;/a&gt;，尝试去整理当前需要的知识技能&lt;/li&gt;
      &lt;li&gt;会尝试去根据自己的短处去阅读一些书&lt;/li&gt;
      &lt;li&gt;自己的习惯是快速地读完一本书，拖得越久越无法落地&lt;/li&gt;
      &lt;li&gt;总结和整理比较少，主要是因为懒，还有就是因为不感兴趣，比如 TCP 三次握手/X次挥手&lt;/li&gt;
      &lt;li&gt;和学习技术相比起来，反而觉得自己在练琴上面更有目标感一些，制定的计划比较容易落地，有规划 输出 和 复盘&lt;/li&gt;
      &lt;li&gt;更多的深度思考，从深度(同主题)，宽度(同领域不同主题) 和 广度(不同领域) 去思考相同的问题&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/blockquote&gt;
&lt;/details&gt;

&lt;h3 id=&quot;链式比较环式学习法&quot;&gt;链式/比较/环式学习法&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;链式&lt;/p&gt;

    &lt;p&gt;解决&lt;strong&gt;深度&lt;/strong&gt;问题, 问题往往是环环相扣的, 往往你看到的只是表象, 深层原因是更复杂的底层逻辑&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;领域维度(自顶向下)
        &lt;div class=&quot;mermaid&quot;&gt;
graph LR;
    framework[&quot;语言框架&quot;];
    lang[编程语言];
    sys[操作系统];
    network[计算机网络];
    tool[工具和配置];
    core[操作系统内核];
    framework--&amp;gt;lang--&amp;gt;sys--&amp;gt;network--&amp;gt;tool--&amp;gt;core;
&lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;细节维度(由表及里)
        &lt;div class=&quot;mermaid&quot;&gt;
graph LR;
    interface[API接口];
    theroy[&quot;设计原理(通用原理)&quot;];
    landing[设计方案];
    sourceCode[源码实现];
    interface--&amp;gt;theroy--&amp;gt;landing--&amp;gt;sourceCode;
&lt;/div&gt;

        &lt;details&gt;
          &lt;summary&gt;
Me?
&lt;/summary&gt;
          &lt;blockquote&gt;

            &lt;ol&gt;
              &lt;li&gt;个人喜欢的还是 &lt;strong&gt;细节维度&lt;/strong&gt;。 比如我想看看 guava 缓存 的实现，我会
                &lt;ul&gt;
                  &lt;li&gt;先去看有哪些接口&lt;/li&gt;
                  &lt;li&gt;再去思考缓存的通用设计原理是什么，有哪些算法&lt;/li&gt;
                  &lt;li&gt;再去看 guava 选择的设计方案 是什么&lt;/li&gt;
                  &lt;li&gt;最后再去看缓存的核心源码实现&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
              &lt;li&gt;领域维度的层次太高了，好处是不会太纠结细节，缺点是没有那么有感觉，不太会总结或者说总结了之后也还是想知道细节&lt;/li&gt;
              &lt;li&gt;不过之后在学习一个技术知识的时候，需要思考:
                &lt;ul&gt;
                  &lt;li&gt;自己是哪一种方式?&lt;/li&gt;
                  &lt;li&gt;学习到哪一个层级了?&lt;/li&gt;
                  &lt;li&gt;预期学到哪个层级?&lt;/li&gt;
                  &lt;li&gt;如何将不同层级的不同知识点串起来，并应用到其他的场景中?&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
            &lt;/ol&gt;
          &lt;/blockquote&gt;
        &lt;/details&gt;
      &lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;链式学习, 越上层越偏应用, 底层偏原理。个人喜欢应用为主, 抓住主要的理论点即可&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;比较&lt;/p&gt;

    &lt;p&gt;简单来说, 在学习的时候带着这样的问题: 解决问题XXX, 为什么用 A方案, 而不用 B方案 这个问题。通过横向对比来学习不同解决方案的背后原理和适用范围&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;总结一个技术主题的 &lt;strong&gt;关键技术点&lt;/strong&gt; 比如 redis 的 高可用, 高性能, 数据结构 和 功能 分别是什么&lt;/li&gt;
      &lt;li&gt;对比同类型产品/技术的 关键技术点 的差异&lt;/li&gt;
      &lt;li&gt;根据差异点, 总结不同技术下 的 背景原理 和 适用场景&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;环式&lt;/p&gt;

    &lt;p&gt;对于业务而言, 多画一下业务闭环流程图, 思考技术在各个环节的位置和所处的作用. 环式能让你更聚焦全局而不是个体&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;details&gt;
  &lt;summary&gt;
Me?
&lt;/summary&gt;
  &lt;blockquote&gt;

    &lt;p&gt;其实这块在晋升时候也有一些思考, 很多时候出现了 &lt;strong&gt;“没什么可讲”, “没什么可回答”, “没什么可思考”&lt;/strong&gt; 的问题。
也就是说, 自己太过于关注自己的简单的研发工作了, 没有从点到面, 从面到框架的方式, 来思考自己的技术, 产品 和
业务。在不同深度，宽度 和 广度 思考问题。&lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/details&gt;

&lt;h3 id=&quot;play--tech&quot;&gt;Play &amp;amp; Tech&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;What I hear, I forget. What I see, I remember. What I do, I understand.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;各种学习方式的留存效果&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/learning-retention.webp&quot; alt=&quot;leaning-retention&quot; width=&quot;85%&quot; /&gt;&lt;/p&gt;

&lt;details&gt;
  &lt;summary&gt;
Me?
&lt;/summary&gt;
  &lt;blockquote&gt;

    &lt;p&gt;很真实啊，自己看 PPT 或者听一个讲座，远没有自己实践和分享来得多。将你知道的讲一遍给别人听，准备被提问的问题，这样的进步才会更显著一些。&lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/details&gt;

&lt;p&gt;这里的 Play 对应着 实践, Tech 对应着 教授他人.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Play
    &lt;ul&gt;
      &lt;li&gt;试玩。手动搭建服务，弄清楚所有配置项的作用，以及为什么提供这样的功能&lt;/li&gt;
      &lt;li&gt;核心功能测试。&lt;/li&gt;
      &lt;li&gt;异常测试。包括边界测试和性能测试，测试在不同的场景(比如1C2G 下的机器? 10000QPS 并发?)下的服务反馈&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Tech
    &lt;ul&gt;
      &lt;li&gt;写作。写作最重要的是框架性，思考你传达的内容，先写框架，再写细节&lt;/li&gt;
      &lt;li&gt;培训。多准备一些问题，从深度，宽度和广度去提问和培训&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;规划-执行-复盘&quot;&gt;规划-执行-复盘&lt;/h2&gt;
&lt;h3 id=&quot;规划&quot;&gt;规划&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;使用 OKR 而不是 KPI 进行规划, 使用 3C 来进行方案选择，问题思考 和 提问&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
  &lt;li&gt;OKR, 价值的体现, 更注重(长期)结果和目标, 比如里程碑(系统从0到1, 解决技术债务等等)&lt;/li&gt;
  &lt;li&gt;&lt;del&gt;KPI&lt;/del&gt; 指标的体现, 更注重当前(短期)的任务是否达成, 对于一些创造性或者人性相关的工作内容时候, 往往容易跑偏&lt;/li&gt;
  &lt;li&gt;OKR 和 KPI 的关系: KPI 可以作为 KR 的形式&lt;/li&gt;
  &lt;li&gt;3C方案设计, (业务/技术/管理)方案设计三个(3C, 3 choices)，也可以用在提问环节。&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;执行&quot;&gt;执行&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;使用 PDCA 来落地执行&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Plan, 执行计划(短周期)&lt;/p&gt;

    &lt;p&gt;这里和 OKR 的区别是，OKR 是用来做长期规划的。 注意优先级，复杂的事情需要拆成小任务来处理，资源上有问题时，用上级的能力协调资源。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Do&lt;/p&gt;

    &lt;p&gt;做好信息同步，主要包括 &lt;strong&gt;进度，里程碑, 风险 和 问题&lt;/strong&gt;，风险要提前告知，delay 多少天，就提前多少天告知。问题要提前暴露出来，及时同步解决的方案和解决的时间&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Check&lt;/p&gt;

    &lt;p&gt;及时 check 进度, 使用 5W 来分析根因&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Act&lt;/p&gt;

    &lt;p&gt;基于 Check 的结果，制定下一步的行动。这里需要总结和汇报结果，主要是看结果是否符合预期，是否有经验教训，挑选 3个 以内的内容进行落地即可&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;复盘&quot;&gt;复盘&lt;/h3&gt;
&lt;h4 id=&quot;5w分析法&quot;&gt;5W分析法&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;https://baike.baidu.com/item/5why%E5%88%86%E6%9E%90%E6%B3%95/575907&quot;&gt;5W&lt;/a&gt; 可以用在 业务/技术/方案选择/管理 上，在进行链式学习的时候，也可以进行自我提问&lt;/p&gt;

&lt;p&gt;注意: 需要聚焦在问题本身，不要变成杠精似地撕逼&lt;/p&gt;

&lt;h4 id=&quot;4d总结法&quot;&gt;4D总结法&lt;/h4&gt;
&lt;p&gt;4D, 4 dimensions&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;结果(价值)维度&lt;/p&gt;

    &lt;p&gt;价值是什么: 业务指标(销售额, 营业额)，技术指标(故障率, SLI/SLO) 和 管理指标(团队的开发效率)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;数据维度&lt;/p&gt;

    &lt;p&gt;提升了开发效率，应该改为具体的 开发周期从 X 周减少到 Y 周, 人数从 X 人 减少到 X 人&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;注意: 这里的数据需要在不同的上下文有不同的意义, 比如当前用户数只要1000，提升 1000% 是很容易的, 但是 如果是当前的微信用户，用户数再提升 10% 都很难&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;技术维度&lt;/p&gt;

    &lt;p&gt;按照 链式/比较 学习法进行学习, 并用此总结经验和教训&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;成长维度&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;技术提升&lt;/li&gt;
      &lt;li&gt;业务理解
        &lt;ul&gt;
          &lt;li&gt;使用场景&lt;/li&gt;
          &lt;li&gt;目标用户&lt;/li&gt;
          &lt;li&gt;效果等等&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;管理技巧(项目组织, 沟通方式 和 做事技巧)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;金字塔汇报&quot;&gt;金字塔汇报&lt;/h4&gt;
&lt;blockquote&gt;
  &lt;p&gt;4D 总结法能让你客观地对自己和整个项目做完整的剖析和认知，但是会更多偏于细节，金字塔更多地是高维度地汇报，抓重点和关键点进行汇报&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;金字塔原理: 1中心, 3论点, 7论据 (1, 3, 7可以认为是 &lt;a href=&quot;https://www.sohu.com/a/166147743_774979&quot;&gt;magic number&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;论点, 输出 和 结果，要先阐述；论据，过程 和 内容 要后阐述(甚至不阐述)&lt;/p&gt;

&lt;p&gt;内容结构&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;结论
    &lt;ul&gt;
      &lt;li&gt;简明概要&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;具体分析
    &lt;ul&gt;
      &lt;li&gt;细节数据&lt;/li&gt;
      &lt;li&gt;为什么是这样的数据&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;关键事项
    &lt;ul&gt;
      &lt;li&gt;业务架构图/技术架构图&lt;/li&gt;
      &lt;li&gt;阶梯图&lt;/li&gt;
      &lt;li&gt;时间线&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;四线复盘&quot;&gt;四线复盘&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;时间线&lt;/li&gt;
  &lt;li&gt;问题链(5w分析法)&lt;/li&gt;
  &lt;li&gt;责任链
    &lt;ul&gt;
      &lt;li&gt;违反规范私自操作&lt;/li&gt;
      &lt;li&gt;问题源头&lt;/li&gt;
      &lt;li&gt;问题放大&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;改进线(可以落地的改进方案很重要)&lt;/li&gt;
&lt;/ul&gt;</content><author><name>dengqinghua</name></author><summary type="html">COMD 能力模型 COMD, aka, Complexity-Oriented Multi-Dimension 多维度 + 复杂度</summary></entry><entry><title type="html">fingerstyle blues level 1-3</title><link href="https://dengqinghua.github.io/finger-style-blues-l123.html" rel="alternate" type="text/html" title="fingerstyle blues level 1-3" /><published>2021-06-28T00:00:00+08:00</published><updated>2021-06-28T00:00:00+08:00</updated><id>https://dengqinghua.github.io/finger-style-blues-l123</id><content type="html" xml:base="https://dengqinghua.github.io/finger-style-blues-l123.html">&lt;hr data-content=&quot; 曲谱 &quot; /&gt;

&lt;ul&gt;
  &lt;li&gt;曲谱: &lt;a href=&quot;https://pan.baidu.com/disk/pdfview?path=%2F42%2F%E9%9F%B3%E4%B9%90%2F%E6%95%99%E6%9D%90%2FProGuitar%2FfingerstyleBlues%2Fproguitar-fingerstyle-blues.pdf&quot;&gt;PDF&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;来源: &lt;a href=&quot;https://www.proguitar.com/academy/lessons/fingerstyle-blues&quot;&gt;Fingerstyle blues in Pro Guitar&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;我的翻弹
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://www.bilibili.com/video/BV1ZK4y1o7wD&quot;&gt;Level1&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://www.bilibili.com/video/BV1GK4y1G7sq&quot;&gt;Level2&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://www.bilibili.com/video/BV17y4y1M7vV&quot;&gt;Level3&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr data-content=&quot; 律动 &quot; /&gt;

&lt;ol&gt;
  &lt;li&gt;boom-chick&lt;/li&gt;
  &lt;li&gt;制音&lt;/li&gt;
  &lt;li&gt;三连音的感觉, 声音需要一致&lt;/li&gt;
  &lt;li&gt;shuffle&lt;/li&gt;
&lt;/ol&gt;

&lt;hr data-content=&quot; 需要加强的 &quot; /&gt;

&lt;ol&gt;
  &lt;li&gt;boom-chick 的音量太大了, 由于自己的手指是没有指甲的, 所以导致 boom-chick 的声音过大, 而旋律音太小&lt;/li&gt;
  &lt;li&gt;boom-chick 的声音太过死板, 听 Emil 弹奏的时候, 其实他是专门有区分的, 比如会在强调一下特别的根音部分 【尝试过这样, 但是发现觉得自己弹奏得不够流畅, 经常会导致节奏乱掉】&lt;/li&gt;
  &lt;li&gt;指套和手指混弹的时候不太自然（需要练习 banjo rolling 和 open string lick 技巧）这块在三连音的时候, 问题特别明显&lt;/li&gt;
  &lt;li&gt;扫弦的时候声音太大了. Emil 有很多地方夹杂着很多扫弦+制音的技巧, 我在录音的时候, 发现自己在用指套扫的时候声音特别大, 控制得不好&lt;/li&gt;
  &lt;li&gt;Ghost Note 的声音太小了. 音符不够, Ghost Note 来凑, 如果声音太小, 就会少点儿味道&lt;/li&gt;
&lt;/ol&gt;

&lt;hr data-content=&quot; 做的不错的 &quot; /&gt;

&lt;ol&gt;
  &lt;li&gt;分段进行了练习, 开着节拍器进行了慢速练习&lt;/li&gt;
  &lt;li&gt;听了很多遍原曲, 跟着原曲一起演奏, 去找感觉&lt;/li&gt;
  &lt;li&gt;跟着原曲的慢速版本练习了很多遍, 并调整了速度进行练习&lt;/li&gt;
  &lt;li&gt;录音的时候很放松, 分时间进行了录制, 一次录制的时间不超过 40 分钟&lt;/li&gt;
&lt;/ol&gt;

&lt;hr data-content=&quot; 下次录音我会尝试的 &quot; /&gt;

&lt;ol&gt;
  &lt;li&gt;录音的时候跟着原曲弹/跟着节拍器弹&lt;/li&gt;
  &lt;li&gt;尝试对现有的曲子做一些改编, 改编音符, 节奏, 律动或者 Lick 等&lt;/li&gt;
&lt;/ol&gt;

&lt;hr data-content=&quot; 思考 &quot; /&gt;

&lt;p&gt;最近学习 Emil 的曲子, 也看了他非常多的视频, 很喜欢他的风格. 发现他常用的技巧包括下面的内容&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Boom Chick&lt;/li&gt;
  &lt;li&gt;Open String Lick&lt;/li&gt;
  &lt;li&gt;Banjo Rolling&lt;/li&gt;
  &lt;li&gt;Harmonic&lt;/li&gt;
  &lt;li&gt;Arp + Chord Inversion …&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这些都在他的一个视频: FingerStyle Learning 里面有讲, 里面基本上讲述了他对乐理的理解, 技巧的理解等等.&lt;/p&gt;

&lt;p&gt;后面我就会在想一个问题, what makes emil emil? 其实这些技巧是其次的, 比这些技巧更难的是, Emil 弹琴时候的放松的感觉, 偶尔拿出一些细节来分析
的话, 很很惊奇地发现他有一些特别的 accent, 比如他自己很常用的 ipm 技巧, 他的强弱感很重, 一些慢速的曲子会弹得很稳, 但是
节奏是流动的(比如 silent night, 他的民谣等等)&lt;/p&gt;

&lt;p&gt;他的音乐的音乐性很强, 感染力很强, 无论是慢速的, 还是那种 blues or Jazz.&lt;/p&gt;

&lt;p&gt;自己也练了很久的琴了, 有时候也会&lt;a href=&quot;/nowadays-training-music&quot;&gt;质疑&lt;/a&gt;自己为什么要花这么多时间练琴. 后来也想明白了, 比练琴更重要的是, 是 随便弹弹
时候的愉悦的感觉, 毕竟总得有自己喜欢的东西吧&lt;/p&gt;

&lt;p&gt;很喜欢他发在 ins 里面的一句话, 也贴在这里, 勉励一下自己吧&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/whatemilsays&quot; alt=&quot;whatemilsays&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;When it comes to praticing, everyone feels like they’re “stuck” at some point. You &lt;strong&gt;lose&lt;/strong&gt; the spark and you can’t push past the lack of inspiration.&lt;/p&gt;

  &lt;p&gt;The guiding light in these situations for me, has always been “thinking small”. You don’t need to cover all aspects of music in your window of
practice time.&lt;/p&gt;

  &lt;p&gt;Find a small musical idea.. it could be a simple phrase or “link” from one of you musician heroes. Move it around, change keys, change octave change the
feel of it. Let the small idea inspire you and play around with it. You never know where it will take you..
                                                               - Emil Ernebro&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name>dengqinghua</name></author><category term="music" /><summary type="html"></summary></entry><entry><title type="html">最近在思考什么</title><link href="https://dengqinghua.github.io/nowadays-training-music.html" rel="alternate" type="text/html" title="最近在思考什么" /><published>2021-05-31T00:00:00+08:00</published><updated>2021-05-31T00:00:00+08:00</updated><id>https://dengqinghua.github.io/nowadays-training-music</id><content type="html" xml:base="https://dengqinghua.github.io/nowadays-training-music.html">&lt;h3 id=&quot;录音&quot;&gt;录音&lt;/h3&gt;

&lt;p&gt;很久没有录音了, 一方面是照顾娃, 搬家这些事情, 另一方面是因为自己好像懒惰了。更重要的一点是&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;找不到录音的感觉了&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;每一次录音的时候都会录制很长时间, 原因还是跟以前一样&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;曲子不是那么熟练, 谱子无法背诵下来&lt;/li&gt;
  &lt;li&gt;一些比较薄弱的点, 没有练好, 导致一直在地方犯错, 比如 烟花易冷 的 横按 下的击勾弦&lt;/li&gt;
  &lt;li&gt;节奏问题, 节奏的时值控制不好, 往往在录制时间过久之后, 节奏会变得散漫和混乱&lt;/li&gt;
  &lt;li&gt;整体的感觉问题
    &lt;ul&gt;
      &lt;li&gt;延音控制不好, 往往是因为音的时值不够, 导致了在一部分的音断掉&lt;/li&gt;
      &lt;li&gt;换和弦太快/太慢, 一般是和弦转换得太快了而不是太慢了, 节奏就乱掉了&lt;/li&gt;
      &lt;li&gt;太紧张, 过于强调某个音或者弱化某个音, 如果某一个技巧不熟练, 这块问题就会变得更严重&lt;/li&gt;
      &lt;li&gt;手指角度问题, 导致音色听起来不均匀(经常三弦的声音和一弦的声音的感觉不一致)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;翻了几次之前写的录音记录的 【下次我会做的】里面有许多上述问题的解决方式&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;着重练习不熟念的部分, 不要着急录音&lt;/li&gt;
  &lt;li&gt;小段小段地录制, 聚焦在小段的录音&lt;/li&gt;
  &lt;li&gt;限制录音时间, 避免无效地录音&lt;/li&gt;
  &lt;li&gt;尽量放松: 跟着原曲弹/手指放松等等&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;但是发现, 过一段时间之后, 该有的问题还是有, 这让录音这一件事情变得非常折磨。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;录音变成了一个 KPI, 想完成录音, 但是却始终录不好&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;mermaid&quot;&gt;
graph TD;
    今晚要录出结果--&amp;gt;录的时候发现有问题;
    解决问题--&amp;gt;手指疲惫疲倦--&amp;gt;发现其他问题;
    节奏不稳--&amp;gt;出现了更多问题--&amp;gt;|执着录制|放弃今天的录音,改天再录;
    出现了更多问题--&amp;gt;|放弃录制|接受一个不算好的录音结果,发B站;
&lt;/div&gt;

&lt;p&gt;自己属于挺结果论的吧, 有时候希望练习有回报, 无论是弹琴, 健身, 还是学习, 每一项都是有产出的&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;事件&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;产出&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;弹琴&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;B站的视频&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;健身&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;体脂/照片/个人PR视频等&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;工作&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;薪资/职级&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;技术&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;技术文档/工程实践&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;结果论的结果就是有时候会变成怀疑主义, 在做一些事情的时候会一直去质疑事情的本身,
甚至质疑质疑本身, 往往会让人陷入一种莫名的焦虑中&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;我需要这么做吗? 我做了有什么意义, 为什么这样做了还是没有达到预期的效果?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这样的思维方式多了之后, 会有强烈的虚无的感觉(也就是失去欲望的感觉)&lt;/p&gt;

&lt;p&gt;然后也找了老师问了一下, 老师的回复依旧是很中肯吧, 认可这种焦虑, 但是也没有速成的方法&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;这瓶颈期是靠时间来磨的, 谁都有瓶颈期, 我也有, 但是这没办法, 因为他不可能说弹琴两三天
三五个月就一下子上去了。建议吧, 第一, 不断地弹新曲子, 第二, 坚持练基本功。经常学习新的
内容, 调节一下, 慢慢的就上去了。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;老师的这个建议其实蛮好的, 但是我已经快没有耐心了, 感觉已经很多年了吧, 有一种【道理我都懂,
困难去想办法克服啊! 能不能让快点儿拿到结果】的暴力逻辑&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;我会放弃弹琴吗? 兄弟问题【我会放弃健身吗】&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;我觉得不会吧, 或者说我想象不出来还能有啥其他属于自己的东西了&lt;/p&gt;

&lt;p&gt;害, 就弹着呗, 可能并没有自己想的那么差吧, 得有点儿耐心, 多琢磨琢磨自己的不足.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;毕竟, 控制自己可能是最简单的一件事情了吧!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;学习&quot;&gt;学习&lt;/h3&gt;

&lt;p&gt;最近学习了 ProGuitar 很多的内容, 包括 chord inversion, fingerstyle blues level 1&amp;amp;2, 还有
一些新的内容, 像 voice leading 等.&lt;/p&gt;

&lt;p&gt;开始听 Jerry Reed 和 Chet Atkins 的曲子, 听乡村会让人心情更加愉悦吧&lt;/p&gt;

&lt;p&gt;吉他的学习跟其他的学习不一样, 看了几十遍也不如弹上几遍.&lt;/p&gt;

&lt;p&gt;平常多花点儿心思在思考上面吧, I suppose.&lt;/p&gt;

&lt;h3 id=&quot;我做什么呢&quot;&gt;我做什么呢&lt;/h3&gt;
&lt;p&gt;按照惯例, 写一下 flag 或者 TODO 吧.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;着重练容易错的地方而不是自己喜欢的整首曲子 20%&lt;/li&gt;
  &lt;li&gt;基本功多练练, 思考有什么是自己缺乏的基本功&lt;/li&gt;
  &lt;li&gt;多弹弹有趣的曲子&lt;/li&gt;
  &lt;li&gt;多听听不同风格的曲子&lt;/li&gt;
  &lt;li&gt;经常录一小段, 30s以内, 保持录音的感觉&lt;/li&gt;
&lt;/ol&gt;</content><author><name>dengqinghua</name></author><category term="music" /><summary type="html">录音</summary></entry></feed>